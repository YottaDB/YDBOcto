#!/usr/bin/env tcsh
#
#################################################################
#                                                               #
# Copyright (c) 2020-2021 YottaDB LLC and/or its subsidiaries.  #
# All rights reserved.                                          #
#                                                               #
#       This source code contains the intellectual property     #
#       of its copyright holder(s), and is made available       #
#       under a license.  If you do not know the terms of       #
#       the license, please stop and do not read further.       #
#                                                               #
#################################################################
#
# -----------------------------------------------------------------
# Pre-commit hook that
#	1) Enforces YottaDB Copyright in changed modules
#
cd `git rev-parse --show-toplevel`
set filelist = `git diff --name-only --cached HEAD`
set fixlist = ""
set curyear = `date +%Y`
@ exitstatus = 0

foreach file ($filelist)
	tools/ci/needs_copyright.sh $file
	if ($status != 0) then
		continue
	endif
	# Optimization: don't run the python script unless necessary
	grep 'Copyright (c) .*'$curyear' YottaDB LLC' $file >& /dev/null
	if ($status == 0) then
		continue
	endif
	# Try to automatically add a copyright to the file
	set tempfile = `mktemp`
	./tools/ci/copyright.py $file > $tempfile
	set copyright_status = $status
	if ($copyright_status == 1) then
		echo "note: automatically committing copyright updates to $file"
		# Preserve the original file permissions
		chmod --reference=$file $tempfile
		cp $tempfile $file
		git add $file
	else if ($copyright_status != 0) then
		set fixlist = "$fixlist $file"
	endif
	rm $tempfile
end
if ("" != "$fixlist") then
	echo "  --> Hook $0 returned non-zero status"
	echo "  --> Below files are missing YottaDB Copyright notice and/or current year $curyear. Fix and retry commit"
	foreach file ($fixlist)
		echo "	$file"
	end
	@ exitstatus = 1
endif

# -----------------------------------------------------------------
# 2) Removes trailing white space
# -----------------------------------------------------------------
set nowhitespace_extensions = "ref"	# List of extensions that cannot have trailing white space removed.
	# .ref -> reference files used by the test cases (e.g. tests/outref/TUF001.ref).
	#		Those have a fixed format and should not go through any white-space changes.

set filelist = `git diff --name-only --cached HEAD`	# recompute "filelist" in case Step (1) had regenerated new files
foreach file ($filelist)

	if (! -e $file) then
		# If file is being deleted as part of this commit, skip whitespace conversion on it
		continue
	endif
	if ("" != "$nowhitespace_extensions") then
		set extension = $file:e
		set skip = 0
		foreach ext ($nowhitespace_extensions)
			if ($ext == $extension) then
				set skip = 1
				break
			endif
		end
		file --mime $file | grep "binary" > /dev/null
		if ($status == 0) then
			set skip = 1
			break
		endif
		if ($skip) then
			continue
		endif
	endif
	grep -q '[ 	][ 	]*$' $file
	if ! ($status) then
		echo $file
		sed -i 's/[ 	][ 	]*$//' $file
		git add $file
		if ($status) then
			@ exitstatus = 1
			echo "GITADD-E-FAIL : Command failed after removing trailing whitespace : git add $file"
		endif
	endif
end

# ---------------------------------------------------------------------------
# 3) Runs clang-format on all files and make sure there were no differences.
# ---------------------------------------------------------------------------
# We require at least clang-format-9 (for `AlignConsecutiveMacros`)
set CLANG_FORMAT="`tools/ci/find-llvm-tool.sh clang-format 9`"
if ($status) then
	echo "warning: missing a recent version of clang-format, not running format checks"
	echo "note: this could happen either if clang-format is not installed or if it's not a recent enough version"
	exit $exitstatus
endif

foreach file ($filelist)
	if (! -e $file) then
		continue
	endif
	set extension = $file:e
	set fixlist = ""
	if ( "c" == "$extension" || "h" == "$extension" ) then
		"$CLANG_FORMAT" -i "$file"
		# Check if there are unstaged changes (as opposed to staged and uncommitted)
		git diff-files --exit-code --name-only -- "$file" >/dev/null
		if ($status) then
			git add "$file"
			set fixlist = "$fixlist $file"
		endif
	endif
	if ("" != "$fixlist") then
		echo "note: automatically commiting clang-format changes for the following files:"
		echo "$fixlist"
	endif
end

# ---------------------------------------------------------------------------
# 4) Verify all error mnemonics and error message text included in errors.rst
# ---------------------------------------------------------------------------

tools/ci/doc_error_update.sh
if ($status) then
	echo "  --> Hook $0 returned non-zero status"
	echo "  --> HOOK-E-FAIL : Non-zero exit status returned by doc_error_update.sh"
	@ exitstatus = 1
endif

exit $exitstatus
