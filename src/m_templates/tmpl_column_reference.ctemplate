{}%
/****************************************************************
 *								*
 * Copyright (c) 2019-2024 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include <string.h>

#include "octo_types.h"
#include "physical_plan.h"
#include "template_helpers.h"

/* Note: "dot_count" is unused if "is_trigger" is TRUE. That is, it is used only if "is_trigger" is FALSE.
 * It reflects the real dot count of the currently generated M line in case this is non-zero.
 *	In this case, we are free to generate new M commands or M lines in this function as we please.
 * If this is zero though, it does not necessarily reflect the real dot count of the currently generated M line.
 *	In that case, it just says we are in the midst of generating an expression and hence all of our generation
 *	in this function has to happen as one expression (i.e. cannot generate new M commands or start a new M line).
 */
TEMPLATE(tmpl_column_reference, PhysicalPlan *pplan, SqlColumnAlias *column_alias, boolean_t is_trigger, int dot_count, int depth) {
	SqlColumn		*column = NULL;
	SqlTable		*table;
	SqlValue		*value;
	SqlTableAlias		*table_alias;
	SqlOptionalKeyword	*keyword;
	SqlKey			*key, *matching_key;
	char			*table_name, *delim;
	char			*piece = NULL, *source;
	unsigned int		i;
	boolean_t		is_extract, is_dollar_char;
	PhysicalPlan		*cur_plan, *matching_plan;
	int			unique_id;

	/* Note: The callers should pass a column, not a column list alias.
	 *
	 * Previously, there was a code block here that peeled any column_alias one layer at a time into a column.
	 * However, in the current code, a LP_COLUMN_ALIAS is transformed into a LP_DERIVED_COLUMN in a previous
	 * logical plan optimization phase. Therefore during physical plan generation, all LP_COLUMN_ALIAS
	 * references would have a column pointing to a column_STATEMENT and not a column_list_alias_STATEMENT.
	 *
	 * The only exception is a TABLENAME.ASTERISK reference.
	 *
	 * The following assert ensures this.
	 */
	assert((column_STATEMENT == column_alias->column->type)
		|| ((value_STATEMENT == column_alias->column->type) && (TABLE_ASTERISK == column_alias->column->v.value->type)));
	UNPACK_SQL_STATEMENT(table_alias, column_alias->table_alias_stmt, table_alias);
	unique_id = table_alias->unique_id;

	boolean_t	done;
	/* Note: Need "++depth" below to prevent intersection of M temporary variables (e.g. %ydboctoexpr(0))
	 * used inside the below call and the caller ("tmpl_print_expression").
	 */
	TMPL(tmpl_column_reference_common, pplan, column_alias, is_trigger, dot_count, ++depth, unique_id, &done);
	if (done) {
		return;
	}
	/* "column_alias" is a COLUMN reference (TABLENAME.ASTERISK would have returned above (verified by the following assert)).
	 * Fetch it from the database.
	 */
	assert((column_STATEMENT == column_alias->column->type) && !is_stmt_table_asterisk(column_alias->column));
	UNPACK_SQL_STATEMENT(column, column_alias->column, column);
	// Find the columns in the table so we can look at the correct keywords
	UNPACK_SQL_STATEMENT(table, table_alias->table, create_table);
	UNPACK_SQL_STATEMENT(value, table->tableName, value);
	table_name = value->v.string_literal;
	SET_DELIM_AND_IS_DOLLAR_CHAR(table, column, is_trigger, delim, is_dollar_char);	/* sets "delim" and "is_dollar_char" */
	/* If a key exists for current column, use key value (using "tmpl_key") rather than column value (using "tmpl_emit_source").
	 * Note that a key can exist for key columns and non-key columns (in case the non-key column had its value fixed using
	 * an xref key). In case of a key column, we have to always go through "tmpl_key" (this is because key columns are not
	 * part of the node value and so don't have a PIECE # and hence should not go through "tmpl_emit_source"). In case of a
	 * non-key column, we will mostly go through "tmpl_key" but can go through "tmpl_emit_source" in the case of the second
	 * half of a RIGHT JOIN ("key->column" would be set to NULL in that case in "tmpl_tablejoin" thereby ensuring we fail
	 * the "if (key->column == column)" check below and never invoke "tmpl_key" but instead fall through to "tmpl_emit_source").
	 */
	boolean_t is_date_time_column = IS_DATE_TIME_DATA_TYPE(column->data_type_struct.data_type);
	boolean_t is_boolean_column = (BOOLEAN_TYPE == column->data_type_struct.data_type);
	boolean_t is_fileman_column = (OPTIONAL_DATE_TIME_FILEMAN == column->data_type_struct.format);
	matching_plan = get_physical_plan_and_key_for_unique_id(pplan, unique_id, &matching_key);
	cur_plan = pplan;
	do {
		PhysicalPlan	*next_plan;

		next_plan = cur_plan->parent_plan;
		for (i = 0; i < cur_plan->total_iter_keys; i++) {
			key = cur_plan->iterKeys[i];
			if (key->unique_id == unique_id) {
				if (key->column == column) {
					if (matching_plan != pplan) {
						/* Key belongs to a parent query table. Depending on whether OUTER JOINs were in
						 * use there or not, it is possible for this key column to be undefined at this
						 * point (https://gitlab.com/YottaDB/DBMS/YDBOcto/-/issues/800#note_862163964).
						 * Use NULL value in that case. Otherwise, generate the actual key.
						 */
						TMPL(tmpl_key_dollardata_check, matching_plan, key, FALSE);
								/* FALSE to indicate this is not a derived column. */
					}
					// Handle date and time column
					boolean_t close_paren = FALSE;
					if (is_date_time_column) {
						/* Remove the `!is_fileman_column_condition` after
						 * https://gitlab.com/YottaDB/Util/YDBAIM/-/issues/78 is implemented and Octo makes
						 * use of it to do key fixing of FILEMAN readonly table columns.
						 */
						if (table->readwrite || (!table->readwrite && !is_fileman_column && key->is_cross_reference_key)) {
							// The value will be in internal format no need to do anything
						} else {
							// The value will be in a format different from the internal format expected
							// Convert it
							assert(NULL != column->keywords);
							close_paren = TRUE;
							%{}{{ PP_CONVERT_TO_UNIX_TIME }}{}%
						}
						// else {} doesn't need to be handled as if it is any other type its value will already be in internal
						// format.
						// Also no need to worry about derived column because of the same reason
					}
					// Add additional routine to process a boolean column when it is a readonly table
					boolean_t close_force_boolean_paren = FALSE;
					if (is_boolean_column && !table->readwrite) {
						%{}$$ForceBoolean^%%ydboctoplanhelpers({}%
						close_force_boolean_paren = TRUE;
					}
					TMPL(tmpl_key, key);
					if (close_paren) {
						// Add rest of the arguments
						TMPL(tmpl_print_date_time_to_unix_time_args,
						     get_sqlvaluetype_from_sqldatatype(
									column->data_type_struct.data_type,
									FALSE),
						     column->data_type_struct.format, FALSE, FALSE);
						// Close conversion routine
						%{}){}%
					} else if (close_force_boolean_paren) {
						%{}){}%
					}
					if (matching_plan != pplan) {
						%{}){}%	/* closing paren for "tmpl_key_dollardata_check" call above */
					}
					return;
				}
			}
		}
		cur_plan = next_plan;
	} while (NULL != cur_plan);
	/* Check for EXTRACT or GLOBAL/PIECE, and assemble it ourselves based on table_alias->source */
	/* It is possible for PIECE keyword to be missing in non-key columns that have DELIM of "" */
	keyword = get_keyword(column, OPTIONAL_PIECE);
	if (NULL != keyword) {
		UNPACK_SQL_STATEMENT(value, keyword->v, value);
		piece = value->v.string_literal;
	} else {
		piece = NULL;
	}
	keyword = get_keyword(column, OPTIONAL_EXTRACT);
	if (NULL == keyword) {
		is_extract = FALSE;
		keyword = get_keyword(column, OPTIONAL_GLOBAL);
		if (NULL == keyword) {
			UNPACK_SQL_STATEMENT(keyword, table->source, keyword);
		}
	} else {
		assert(NULL == piece); /* A column cannot be a piece and an extract column at the same time */
		is_extract = TRUE;
	}
	UNPACK_SQL_STATEMENT(value, keyword->v, value);
	source = value->v.string_literal;

	boolean_t	is_xref_plan;
	/* Note: pplan->outputKey can be NULL in case of LP_UPDATE plan so account for that below with a "NULL != " check */
	is_xref_plan = ((NULL != pplan->outputKey) && pplan->outputKey->is_cross_reference_key);

	boolean_t close_paren = FALSE;
	// Handle date and time column
	if ((!is_trigger) && (matching_plan != pplan)) {
		/* Key belongs to a parent query table. Depending on whether OUTER JOINs were
		 * in use there or not, it is possible for this key column to be undefined
		 * at this point. So check that before using it. See #800 comment above for similar code.
		 */
		TMPL(tmpl_key_dollardata_check, matching_plan, matching_key, FALSE);
			/* FALSE to indicate this is not a derived column */
	}
	if (is_date_time_column) {
		if (table->readwrite) {
			// The value will be in internal format no need to do anything
		} else {
			// GLOBAL or EXTRACT was specified
			// The value will be in a format different from the internal format expected
			// Convert it
			assert(NULL != column->keywords);
			close_paren = TRUE;
			%{}{{ PP_CONVERT_TO_UNIX_TIME }}{}%
		}
	}
	// Add additional routine to process a boolean column when it is a readonly table
	boolean_t close_force_boolean_paren = FALSE;
	if (is_boolean_column && !table->readwrite) {
		%{}$$ForceBoolean^%%ydboctoplanhelpers({}%
		close_force_boolean_paren = TRUE;
	}
	if (!is_trigger) {
		if (!dot_count) {
			if (!is_xref_plan) {
				%{}$$piecevalue2colvalue^%%ydboctoplanhelpers({}%
			}
			/* else : If xref plan, a NULL column value is represented as the empty string and the
			 * xref will be stored in the global node using the empty string value as the subscript
			 * so no need to convert from "" to $ZYSQLNULL.
			 */
		}
		/* else: if "dot_count" is non-zero, we implement the "$$piecevalue2colvalue^%%ydboctoplanhelpers"
		 * invocation a little later by inline M code as it is seen to be faster to avoid the function invocation.
		 * In the "!dot_count" case it is not possible to avoid the function case so we stick to the function there.
		 */
	}

	boolean_t	skipped_dollar_get;
	skipped_dollar_get = TRUE;
	/* All non-extract references get $GET. Add $PIECE for if piece number specified. */
	if (!is_trigger && !is_extract) {
		if (NULL != piece) {
			%{}$PIECE({}%
		}
		if (pplan->key_lvn_can_be_zysqlnull) {
			%{}$SELECT($ZYISSQLNULL({}%
			assert(matching_key->unique_id == unique_id);
			TMPL(tmpl_key, matching_key);
			%{}):$ZYSQLNULL,1:{}%
		}
		/* If the current query/command is guaranteed to be running inside TSTART/TCOMMIT fence, then we
		 * do not need to wrap the database access around a "$GET" call. Otherwise we need to or else we
		 * could encounter GVUNDEF errors due to concurrent updates after we did the "$ORDER" in the preceding
		 * for loop but before we reach this database access point in the M code. The INSERT/UPDATE/DELETE
		 * plans currently run inside a TP fence so we should be able to skip the "$GET" call for them.
		 */
		if (!IS_INSERT_INTO_PHYSICAL_PLAN(pplan) && !IS_DELETE_FROM_PHYSICAL_PLAN(pplan)	\
				&& !IS_UPDATE_PHYSICAL_PLAN(pplan)) {
			skipped_dollar_get = FALSE;
			%{}$GET({}%
		}
	}
	if (is_extract && (NULL != column_alias->extract_lp)) {
		assert(LP_FUNCTION_CALL == column_alias->extract_lp->type);
		/* This EXTRACT specification references a SQL function call, in which case its logical plan must be expanded
		 * and passed to `tmpl_print_expression()` instead of calling `tmpl_emit_source()`, which expects a simple string
		 * and not a logical plan.
		 */
		TMPL(tmpl_print_expression, column_alias->extract_lp, pplan, 0, depth);
	} else {
		TMPL(tmpl_emit_source, table, source, table_name, unique_id, 0, MAX_KEY_COUNT,	\
					(is_trigger ? EmitSourceForm_Trigger : EmitSourceForm_Value));
	}
	if (!is_trigger) {
		if (!is_extract) {
			if (!skipped_dollar_get) {
				%{}){}%
			}
			if (pplan->key_lvn_can_be_zysqlnull) {
				%{}){}%	/* closing paren for "$SELECT($ZYISSQLNULL" */
			}
			if (NULL != piece) {
				if (is_dollar_char) {
					%{},{{ delim }},{{ piece }}){}%
				} else {
					%{},"{{ delim }}",{{ piece }}){}%
				}
			}
		}
		if (!dot_count) {
			if (!is_xref_plan) {
				%{}){}%
			}
		}
		if (close_paren) {
			// Add rest of the arguments
			TMPL(tmpl_print_date_time_to_unix_time_args,
			     get_sqlvaluetype_from_sqldatatype(
						column->data_type_struct.data_type,
						FALSE),
			     column->data_type_struct.format, FALSE, FALSE);
			// Close conversion routine
			%{}){}% // Date time closing paren
		} else if (close_force_boolean_paren) {
			%{}){}%
		}
		if (matching_plan != pplan) {
			%{}){}%	/* closing paren for "tmpl_key_dollardata_check" call above */
		}
		if (dot_count) {
			/* Implement "piecevalue2colvalue^%ydboctoplanhelpers" call (already done for the "!dot_count" case)
			 * using inline M code as it was seen (in cc515a49) to be faster than a function invocation.
			 */
			%{} SET:(""={{ PP_YDB_OCTO_EXPR }}) {{ PP_YDB_OCTO_EXPR  }}=$ZYSQLNULL{}%
		}
	} else {
		if (NULL != delim) {
			if (is_dollar_char) {
				%{} -delim={{ delim }} -pieces=""{{ piece }}""{}%
			} else if ('\0' != *delim) {
				%{} -delim=""{{ delim }}"" -pieces=""{{ piece }}""{}%
			}
			/* else : DELIM "" case. Do not specify -delim and -pieces in trigger in that case */
		}
	}
	return;
}
%{}
