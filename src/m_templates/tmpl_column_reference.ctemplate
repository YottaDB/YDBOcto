{}%
/****************************************************************
 *								*
 * Copyright (c) 2019-2021 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include <string.h>

#include "octo_types.h"
#include "physical_plan.h"
#include "template_helpers.h"

/* Note: "dot_count" is unused if "is_trigger" is TRUE. That is, it is used only if "is_trigger" is FALSE.
 * It reflects the real dot count of the currently generated M line in case this is non-zero.
 *	In this case, we are free to generate new M commands or M lines in this function as we please.
 * If this is zero though, it does not necessarily reflect the real dot count of the currently generated M line.
 *	In that case, it just says we are in the midst of generating an expression and hence all of our generation
 *	in this function has to happen as one expression (i.e. cannot generate new M commands or start a new M line).
 */
TEMPLATE(tmpl_column_reference, PhysicalPlan *pplan, SqlColumnAlias *column_alias, boolean_t is_trigger, int dot_count) {
	SqlColumn		*column = NULL, *key_column;
	SqlTable		*table;
	SqlValue		*value;
	SqlTableAlias		*table_alias;
	SqlOptionalKeyword	*keyword;
	SqlKey			*key;
	char			*table_name, *delim;
	char			*piece = NULL, *source;
	unsigned int		i;
	boolean_t		is_extract, is_dollar_char;
	PhysicalPlan		*cur_plan;
	int			unique_id;

        /* Note: The callers should pass a column, not a column list alias.
         *
         * Previously, there was a code block here that peeled any column_alias one layer at a time into a column.
         * However, in the current code, a LP_COLUMN_ALIAS is transformed into a LP_DERIVED_COLUMN in a previous
	 * logical plan optimization phase. Therefore during physical plan generation, all LP_COLUMN_ALIAS
	 * references would have a column pointing to a column_STATEMENT and not a column_list_alias_STATEMENT.
         *
         * The following assert ensures this is true.
         */
	assert(column_STATEMENT == column_alias->column->type);
	UNPACK_SQL_STATEMENT(table_alias, column_alias->table_alias_stmt, table_alias);
	unique_id = table_alias->unique_id;

	boolean_t	done;
	TMPL(tmpl_column_reference_common, pplan, column_alias, unique_id, &done);
	if (done) {
		return;
	}
	assert(column_STATEMENT == column_alias->column->type);
	UNPACK_SQL_STATEMENT(column, column_alias->column, column);
	// Find the columns in the table so we can look at the correct keywords
	UNPACK_SQL_STATEMENT(table, table_alias->table, create_table);
	UNPACK_SQL_STATEMENT(value, table->tableName, value);
	table_name = value->v.string_literal;
	SET_DELIM_AND_IS_DOLLAR_CHAR(table, column, is_trigger, delim, is_dollar_char);	/* sets "delim" and "is_dollar_char" */
	/* Optimization : If the column is a key column, use key rather than column value when possible.
	 * Update: It turns out that this is not just an optimization but a necessity since key columns
	 * are not necessarily part of the value and so don't have a PIECE # and so should not go through
	 * "tmpl_emit_source()" function below (they should instead go through the "tmpl_key()" invocation below).
	 */
	cur_plan = pplan;
	do {
		PhysicalPlan	*next_plan;

		next_plan = cur_plan->parent_plan;
		for (i = 0; i < cur_plan->total_iter_keys; i++) {
			key = cur_plan->iterKeys[i];
			if (key->unique_id == unique_id) {
				key_column = key->column;
				if (key_column == column) {
					/* If using-key optimization has been asked to be disabled,
					 * continue generating column value instead of key.
					 */
					if (key->skip_column_reference_optimization) {
						next_plan = NULL;	/* so we break out of outer "do" loop too */
						break;
					}
					TMPL(tmpl_key, key);
					return;
				}
			}
		}
		cur_plan = next_plan;
	} while (NULL != cur_plan);
	/* Check for EXTRACT or GLOBAL/PIECE, and assemble it ourselves based on table_alias->source */
	/* It is possible for PIECE keyword to be missing in non-key columns that have DELIM of "" */
	keyword = get_keyword(column, OPTIONAL_PIECE);
	if (NULL != keyword) {
		UNPACK_SQL_STATEMENT(value, keyword->v, value);
		piece = value->v.string_literal;
	} else {
		piece = NULL;
	}
	keyword = get_keyword(column, OPTIONAL_EXTRACT);
	if (NULL == keyword) {
		is_extract = FALSE;
		keyword = get_keyword(column, OPTIONAL_SOURCE);
		if (NULL == keyword) {
			UNPACK_SQL_STATEMENT(keyword, table->source, keyword);
		}
	} else {
		assert(NULL == piece); /* A column cannot be a piece and an extract column at the same time */
		is_extract = TRUE;
	}
	UNPACK_SQL_STATEMENT(value, keyword->v, value);
	source = value->v.string_literal;

	boolean_t	is_xref_plan;

	/* Note: pplan->outputKey can be NULL in case of LP_UPDATE plan so account for that below with a "NULL != " check */
	is_xref_plan = ((NULL != pplan->outputKey) && pplan->outputKey->is_cross_reference_key);
	if (!is_trigger) {
		if (!dot_count) {
			if (!is_xref_plan) {
				%{}$$piecevalue2colvalue^%%ydboctoplanhelpers({}%
			}
			/* else : If xref plan, a NULL column value is represented as the empty string and the
			 * xref will be stored in the global node using the empty string value as the subscript
			 * so no need to convert from "" to $ZYSQLNULL.
			 */
		}
	}

	boolean_t	skipped_dollar_get;
	skipped_dollar_get = TRUE;
	/* All non-extract references get $GET. Add $PIECE for if piece number specified. */
	if (!is_trigger && !is_extract) {
		if (NULL != piece) {
			%{}$PIECE({}%
		}
		/* If the current query/command is guaranteed to be running inside TSTART/TCOMMIT fence, then we
		 * do not need to wrap the database access around a "$GET" call. Otherwise we need to or else we
		 * could encounter GVUNDEF errors due to concurrent updates after we did the "$ORDER" in the preceding
		 * for loop but before we reach this database access point in the M code. The INSERT/UPDATE/DELETE
		 * plans currently run inside a TP fence so we should be able to skip the "$GET" call for them.
		 */
		if (!IS_INSERT_INTO_PHYSICAL_PLAN(pplan) && !IS_DELETE_FROM_PHYSICAL_PLAN(pplan)	\
				&& !IS_UPDATE_PHYSICAL_PLAN(pplan)) {
			skipped_dollar_get = FALSE;
			%{}$GET({}%
		}
	}
	TMPL(tmpl_emit_source, table, source, table_name, unique_id, MAX_KEY_COUNT,	\
				(is_trigger ? EmitSourceForm_Trigger : EmitSourceForm_Value));
	if (!is_trigger) {
		if (!is_extract) {
			if (!skipped_dollar_get) {
				%{}){}%
			}
			if (NULL != piece) {
				if (is_dollar_char) {
					%{},{{ delim }},{{ piece }}){}%
				} else {
					%{},"{{ delim }}",{{ piece }}){}%
				}
			}
		}
		if (dot_count) {
			%{} SET:(""={{ PP_YDB_OCTO_EXPR }}) {{ PP_YDB_OCTO_EXPR  }}=$ZYSQLNULL{}%
		} else {
			if (!is_xref_plan) {
				%{}){}%
			}
		}
	} else {
		if (NULL != delim) {
			if (is_dollar_char) {
				%{} -delim={{ delim }} -pieces=""{{ piece }}""{}%
			} else if ('\0' != *delim) {
				%{} -delim=""{{ delim }}"" -pieces=""{{ piece }}""{}%
			}
			/* else : DELIM "" case. Do not specify -delim and -pieces in trigger in that case */
		}
	}
	return;
}
%{}
