{}%
/****************************************************************
 *								*
 * Copyright (c) 2022 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include "octo_types.h"

#include "physical_plan.h"
#include "template_helpers.h"

/* Generate M code that enforces CHECK/UNIQUE etc. constraints. Currently called for INSERT INTO or UPDATE or DELETE FROM.
 * Note that a PRIMARY KEY constraint is treated as a UNIQUE constraint below so whenever UNIQUE is mentioned below,
 * we mean a UNIQUE or PRIMARY KEY constraint.
 */
TEMPLATE(tmpl_constraint, PhysicalPlan *pplan, LogicalPlan *lp_constraint, SqlTable *table, int dot_count) {
	if (NULL == lp_constraint) {
		return;	/* No CHECK/UNIQUE etc. constraints in this table. So nothing to do here. */
	}

	LPActionType type;
	type = pplan->lp_select_query->type;
	assert((LP_INSERT_INTO == type) || (LP_UPDATE == type) || (LP_DELETE_FROM == type));

	/* Determine "num_cols", the number of user-visible columns. */
	SqlColumn	*start_column, *cur_column;
	int		num_cols;
	UNPACK_SQL_STATEMENT(start_column, table->columns, column);
	cur_column = start_column;
	num_cols = 0;
	do {
		if (NULL != cur_column->columnName) {
			/* Is NOT a table-level constraint */
			if (cur_column->is_hidden_keycol) {
				assert((0 == num_cols) && (0 == cur_column->column_number));
			} else {
				assert((num_cols + 1) == cur_column->column_number);
				num_cols = cur_column->column_number;
			}
		} else {
			/* This column is a table-level constraint. Do not count it as a user-visible column. */
		}
		cur_column = cur_column->next;
	} while (cur_column != start_column);

	/* Determine "tableName" */
	char		*tableName;
	SqlValue	*value;
	UNPACK_SQL_STATEMENT(value, table->tableName, value);
	tableName = value->v.reference;

	ydb_buffer_t ydboctoTblConstraint;
	YDB_LITERAL_TO_BUFFER(OCTOLIT_YDBOCTOTBLCONSTRAINT, &ydboctoTblConstraint);

	LogicalPlan	*lp_constraint_orig;
	lp_constraint_orig = lp_constraint;

	/* First determine the number of CHECK/UNIQUE constraints that need to be emitted. For the UPDATE case, we have
	 * to do this BEFORE any SET_TBL_CONSTRAINT_LVN macro calls happen as there is an assumption that IS_TBL_CONSTRAINT_LVN_SET
	 * macro will return is_lvn_set as TRUE only for those columns that are in the UPDATE SET list. This is why we
	 * separately calculate "num_emits[]" for CHECK and UNIQUE constraints first before doing the actual processing for
	 * these constraints.
	 */
	/* ==================== Count number of CHECK and UNIQUE constraints to emit and see if they are non-zero ======== */
	/* Note that the LP_CONSTRAINT logical plan has 2 children. The first one (index 0) is of type LP_CHECK_CONSTRAINT
	 * and the second one (index 1) is of type LP_UNIQUE_CONSTRAINT. Since these 2 constraints need very similar processing
	 * we do this for both type of constraints in the same "for" loop below where the loop executes twice and the first
	 * iteration is for CHECK and the second iteration is for UNIQUE. We need to ensure that the access
	 * "lp_constraint_orig->v.lp_default.operand[i]" below is never done for "i" greater than 1 and therefore it is considered
	 * acceptable to use a loop with a hardcoded max "i" of "2" instead of using "enum"s.
	 */
	int	i, num_emits[2];
	for (i = 0; i < 2; i++) {
		num_emits[i] = 0;	/* Initialize to 0 */
		/* i = 0 is CHECK constraint iteration, i = 1 is UNIQUE constraint iteration */
		lp_constraint = lp_constraint_orig->v.lp_default.operand[i];
		if (NULL == lp_constraint) {
			continue;
		}
		if ((0 == i) && (LP_DELETE_FROM == type)) {
			/* No need to do anything for CHECK constraints in case of a DELETE FROM */
			continue;
		}
		for ( ; NULL != lp_constraint; lp_constraint = lp_constraint->v.lp_default.operand[1]) {
			assert((0 != i) || (LP_CHECK_CONSTRAINT == lp_constraint->type));
			assert((1 != i) || (LP_UNIQUE_CONSTRAINT == lp_constraint->type));
			assert(FALSE == lp_constraint->extra_detail.lp_constraint.emit_m_code);

			SqlConstraint	*constraint;
			constraint = lp_constraint->extra_detail.lp_constraint.constraint;

			SqlStatement	*col_list_stmt;
			if ((PRIMARY_KEY == constraint->type) && (LP_DELETE_FROM == type)) {
				/* This is a DELETE command and a PRIMARY KEY constraint.
				 * Maintenance of the global corresponding to the deleted table rows already happens in
				 * "tmpl_delete_record_from_table.ctemplate" so no need to process PRIMARY KEY constraints
				 * in case of DELETE.
				 */
				continue;
			}
			if ((UNIQUE_CONSTRAINT == constraint->type) || (PRIMARY_KEY == constraint->type)) {
				assert(1 == i);
				col_list_stmt = constraint->definition;
				assert(NULL != col_list_stmt);	/* UNIQUE constraint should have a non-empty list of columns */
			} else {
				assert(0 == i);
				assert(OPTIONAL_CHECK_CONSTRAINT == constraint->type);
				col_list_stmt = constraint->v.check_columns;
				if (NULL == col_list_stmt) {
					/* No table columns used in this CHECK constraint. Must be a static expression.
					 * No point generating code to verify this constraint.
					 */
					continue;
				}
			}
			switch(type) {
			case LP_DELETE_FROM:
			case LP_INSERT_INTO:
				/* This is an INSERT or DELETE FROM command. We emit all CHECK/UNIQUE constraints since
				 * a new/deleted row affects every CHECK/UNIQUE constraint.
				 */
				lp_constraint->extra_detail.lp_constraint.emit_m_code = TRUE;
				num_emits[i]++;
				break;
			case LP_UPDATE:
			default:
				assert(LP_UPDATE == type);
				/* This is an UPDATE command. Check if the list of columns that the current CHECK/UNIQUE constraint
				 * uses intersects with at least one column in the SET list of the UPDATE. If not, this constraint
				 * is not affected by this UPDATE command and so we can skip generating code to verify this.
				 */
				unsigned int	is_lvn_set;
				SqlColumnList	*start_col, *cur_col;
				UNPACK_SQL_STATEMENT(start_col, col_list_stmt, column_list);
				cur_col = start_col;
				is_lvn_set = 0;
				do {
					SqlValue	*colname;

					UNPACK_SQL_STATEMENT(colname, cur_col->value, value);
					cur_column = find_column(colname->v.string_literal, table);
					IS_TBL_CONSTRAINT_LVN_SET(&ydboctoTblConstraint, cur_column->column_number, is_lvn_set);
					if (0 != is_lvn_set) {
						/* We found at least one column that is in the UPDATE SET list as only those
						 * columns would have the LVN set. Therefore we need to emit M code for this
						 * constraint.
						 */
						lp_constraint->extra_detail.lp_constraint.emit_m_code = TRUE;
						num_emits[i]++;
						break;
					}
					cur_col = cur_col->next;
				} while (cur_col != start_col);
				break;
			}
		}
	}

	/* ==================== Emit CHECK constraints if it is non-zero ======== */
	lp_constraint = lp_constraint_orig->v.lp_default.operand[0];
	if (0 != num_emits[0]) {
		TMPL(tmpl_print_dots, dot_count);
		%{}; -------------------------------------{}%
		%{}`n{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);
		%{}; CHECK constraints enforcement section{}%
		%{}`n{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);
		%{}; -------------------------------------{}%
		%{}`n{{ PLAN_LINE_START }}{}%

		for ( ; NULL != lp_constraint; lp_constraint = lp_constraint->v.lp_default.operand[1]) {
			assert(LP_CHECK_CONSTRAINT == lp_constraint->type);

			if (!lp_constraint->extra_detail.lp_constraint.emit_m_code) {
				continue;
			}

			SqlConstraint	*constraint;
			constraint = lp_constraint->extra_detail.lp_constraint.constraint;
			assert(OPTIONAL_CHECK_CONSTRAINT == constraint->type);
			UNPACK_SQL_STATEMENT(value, constraint->name, value);

			char		*constraint_name;
			constraint_name = value->v.string_literal;

			TMPL(tmpl_print_dots, dot_count);
			%{}; Emit code for CHECK constraint {{ constraint_name }}{}%
			%{}`n{{ PLAN_LINE_START }}{}%

			if (LP_UPDATE == type) {
				/* This is an UPDATE command. Determine the list of columns that are used inside this
				 * constraint. Generate M code that initializes "PP_COL(i)" for all those columns.
				 * Do not generate M code to initialize if that particular column is already initialized
				 * (as part of UPDATE SET column list or a previous constraint processing in this same
				 * "for" loop).
				 */
				SqlStatement	*col_list_stmt;
				col_list_stmt = constraint->v.check_columns;
				assert(NULL != col_list_stmt);

				unsigned int	is_lvn_set;
				SqlColumnList	*start_col, *cur_col;
				UNPACK_SQL_STATEMENT(start_col, col_list_stmt, column_list);
				cur_col = start_col;
				is_lvn_set = 0;
				do {
					SqlValue	*colname;

					UNPACK_SQL_STATEMENT(colname, cur_col->value, value);
					cur_column = find_column(colname->v.string_literal, table);
					IS_TBL_CONSTRAINT_LVN_SET(&ydboctoTblConstraint, cur_column->column_number,
													is_lvn_set);
					if (0 == is_lvn_set) {
						/* This column has not yet been initialized. Do that now. */
						TMPL(tmpl_print_dots, dot_count);
						%{}SET {{ PP_YDB_OCTO_EXPR }}={}%
						TMPL(tmpl_update_column_reference, pplan, cur_column, dot_count);
						%{}`n{{ PLAN_LINE_START }}{}%
						TMPL(tmpl_print_dots, dot_count);
						%{}SET {{ PP_COL }}({{ cur_column->column_number|%d }}){}%
						%{}={{ PP_YDB_OCTO_EXPR }}{}%
						%{}`n{{ PLAN_LINE_START }}{}%
						/* Now that we generated M code to set this lvn, record this fact for
						 * later use.
						 */
						SET_TBL_CONSTRAINT_LVN(&ydboctoTblConstraint, cur_column->column_number);
					}
					cur_col = cur_col->next;
				} while (cur_col != start_col);
			}

			LogicalPlan	*lp_where;
			GET_LP(lp_where, lp_constraint, 0, LP_WHERE);
			TMPL(tmpl_print_expression, lp_where->v.lp_default.operand[0], pplan, dot_count, 0);
				/* variable PP_YDB_OCTO_EXPR holds the result */
			TMPL(tmpl_print_dots, dot_count);
			/* Note that a CHECK constraint is considered as accepted if it returns TRUE or NULL.
			 * Only if it returns FALSE is it considered as not accepted (i.e. violated).
			 * Hence the "'" check done in the below emitted M code.
			 */
			%{}IF '{{ PP_YDB_OCTO_EXPR }} DO {}%
			if (LP_UPDATE == type) {
				/* In the case of INSERT INTO, col(1), col(2), ... col(num_cols) contain the individual
				 * column values of all columns in the table. But in the case of UPDATE,
				 * %ydboctoupd(COLUMNNAME1) etc. contains the individual column values of only those
				 * columns which are being updated in the current row.
				 * But "CheckConstraintViolation^%ydboctoplanhelpers()" relies on all column values being
				 * in col(1), col(2), ... col(num_cols). Therefore, do more processing, if UPDATE, to set
				 * those nodes. The additional processing will be done in the next M line (inline code
				 * using dotted DO notation).
				 */
				%{} DO {}%
			}
			%{}CheckConstraintViolation^%%ydboctoplanhelpers({}%

			/* Pass 1st parameter to CheckConstraintViolation^%ydboctoplanhelpers */
			%{}"{{ tableName }}",{}%

			/* Pass 2nd parameter to CheckConstraintViolation^%ydboctoplanhelpers */
			SqlValue	*value;
			UNPACK_SQL_STATEMENT(value, constraint->name, value);
			%{}"{{ value->v.string_literal }}",{}%

			/* Pass 3rd parameter to CheckConstraintViolation^%ydboctoplanhelpers */
			%{}{{ num_cols|%d }}){}%

			if (LP_UPDATE == type) {
				dot_count++;
				/* Emit a comment line just in case the do/while loop below does not emit any M code.
				 * Needed as otherwise we would have an empty dotted do which is an error in M.
				 */
				%{}`n{{ PLAN_LINE_START }}{}%
				TMPL(tmpl_print_dots, dot_count);
				%{}; Initialize col(1), col(2), ... etc. {}%
				%{}for those columns that have not been initialized above{}%
				cur_column = start_column;
				do {
					unsigned int	is_lvn_set;
					IS_TBL_CONSTRAINT_LVN_SET(&ydboctoTblConstraint, cur_column->column_number,
														is_lvn_set);
					if ((0 == is_lvn_set) && (NULL != cur_column->columnName)
									&& !cur_column->is_hidden_keycol) {
						assert(0 < cur_column->column_number);
						%{}`n{{ PLAN_LINE_START }}{}%
						TMPL(tmpl_print_dots, dot_count);
						%{}SET {{ PP_YDB_OCTO_EXPR }}={}%
						TMPL(tmpl_update_column_reference, pplan, cur_column, dot_count);
						%{}`n{{ PLAN_LINE_START }}{}%
						TMPL(tmpl_print_dots, dot_count);
						%{}SET {{ PP_COL }}({{ cur_column->column_number|%d }}){}%
						%{}={{ PP_YDB_OCTO_EXPR }}{}%
						/* Note that even though we generated M code to set this lvn, we won't
						 * record this fact for later use using a SET_TBL_CONSTRAINT_LVN like is
						 * usual. This is because this lvn is set only in the error code path
						 * and not in the normal code path.
						 */
					}
					cur_column = cur_column->next;
				} while (cur_column != start_column);
				dot_count--;
			}
			%{}`n{{ PLAN_LINE_START }}{}%
		}
		if (0 != num_emits[1]) {
			/* If there are UNIQUE constraints to be emitted, then signal end of CHECK constraint section.
			 * Otherwise, the UNIQUE constraint emitting would signal its beginning thus also signaling
			 * the end of the CHECK constraint section.
			 */
			TMPL(tmpl_print_dots, dot_count);
			%{}; END of CHECK constraint enforcement section{}%
			%{}`n{{ PLAN_LINE_START }}{}%
		}
	}
	/* ==================== Emit UNIQUE constraints if it is non-zero ======== */
	if (0 != num_emits[1]) {
		TMPL(tmpl_print_dots, dot_count);
		%{}; --------------------------------------{}%
		%{}`n{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);
		%{}; UNIQUE constraints enforcement section{}%
		%{}`n{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);
		%{}; --------------------------------------{}%
		%{}`n{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);

		lp_constraint = lp_constraint_orig->v.lp_default.operand[1];
		for ( ; NULL != lp_constraint; lp_constraint = lp_constraint->v.lp_default.operand[1]) {
			assert(LP_UNIQUE_CONSTRAINT == lp_constraint->type);

			if (!lp_constraint->extra_detail.lp_constraint.emit_m_code) {
				continue;
			}

			SqlConstraint	*constraint;
			constraint = lp_constraint->extra_detail.lp_constraint.constraint;
			assert((UNIQUE_CONSTRAINT == constraint->type) || (PRIMARY_KEY == constraint->type));
			assert((LP_DELETE_FROM != type) || (PRIMARY_KEY != constraint->type));
			UNPACK_SQL_STATEMENT(value, constraint->name, value);

			char	*constraint_name;
			constraint_name = value->v.string_literal;

			%{}; Emit code for {}%
			if (UNIQUE_CONSTRAINT == constraint->type) {
				%{}UNIQUE{}%
			} else {
				%{}PRIMARY KEY{}%
			}
			%{} constraint {{ constraint_name }}{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			TMPL(tmpl_print_dots, dot_count);

			UniqueConstraintLoopType loop_type;
			for (loop_type = UniqueConstraintLoopNotUpdate; loop_type < UniqueConstraintLoopMax; loop_type++) {
				/* UPDATE runs this for loop for 2 iterations in order to store post-UPDATE and pre-UPDATE
				 * column values. INSERT and DELETE do it only for 1 iteration.
				 */
				if ((UniqueConstraintLoopUpdate == loop_type)
						&& ((LP_INSERT_INTO == type) || (LP_DELETE_FROM == type))) {
					break;
				}
				/* For INSERT INTO, PP_COL(i) lvns are already set hence the below "if" check */
				if ((LP_DELETE_FROM == type) || (LP_UPDATE == type)) {
					TMPL(tmpl_constraint_col_list, pplan, constraint, table, ConstraintSetColIList,	\
						dot_count, loop_type);
				}
				if (UNIQUE_CONSTRAINT == constraint->type) {
					/* In case of a PRIMARY KEY constraint, we would have already emitted M code
					 * to check if they are NULL and if so issue an error. Therefore, we can skip the
					 * "ConstraintColNullList" call in that case. But in the case of a UNIQUE constraint,
					 * we do need to do that check. Hence the "ConstraintColNullList" call below in that case.
					 */
					%{}DO:{}%
					TMPL(tmpl_constraint_col_list, pplan, constraint, table, ConstraintColNullList,	\
											dot_count, loop_type);
					%{}`n{{ PLAN_LINE_START }}{}%
					dot_count++;
					TMPL(tmpl_print_dots, dot_count);
				} else if ((LP_UPDATE == type) && (UniqueConstraintLoopUpdate == loop_type)) {
					/* This is a PRIMARY KEY constraint and UPDATE command. We do not do a KILL of the gvn
					 * (as it is done after processing all UNIQUE constraints). Therefore, we need to
					 * additionally check if at least one key column changed in value. And only then do
					 * the "DuplicateKeyValue" check as otherwise we would issue an incorrect duplicate key
					 * error. Hence the "ConstraintColChangedList" call below in that case.
					 */
					%{}DO:{}%
					TMPL(tmpl_constraint_col_list, pplan, constraint, table, ConstraintColChangedList,	\
											dot_count, loop_type);
					%{}`n{{ PLAN_LINE_START }}{}%
					dot_count++;
					TMPL(tmpl_print_dots, dot_count);
				}
				if ((LP_INSERT_INTO == type) || ((UniqueConstraintLoopUpdate == loop_type)
						&& (LP_UPDATE == type))) {
					%{}DO:$DATA({}%
					TMPL(tmpl_constraint_col_list, pplan, constraint, table, ConstraintColIList,	\
												dot_count, loop_type);
					%{}){}%
					%{}`n{{ PLAN_LINE_START }}{}%
					dot_count++;
					TMPL(tmpl_print_dots, dot_count);
					%{}DO DuplicateKeyValue^%%ydboctoplanhelpers({}%
					%{}"{{ constraint_name }}","Key ("_{}%
					TMPL(tmpl_constraint_col_list, pplan, constraint, table, ConstraintColNameList,	\
						dot_count, loop_type);
					%{}_")=("_{}%
					TMPL(tmpl_constraint_col_list, pplan, constraint, table, ConstraintColValList,	\
						dot_count, loop_type);
					%{}_")"){}%
					%{}`n{{ PLAN_LINE_START }}{}%
					dot_count--;
					TMPL(tmpl_print_dots, dot_count);
				}
				/* In the case of a PRIMARY KEY constraint, the SET/KILL is taken care of in the caller after
				 * emitting all constraints. Therefore the below step can be skipped. Note that it is also
				 * necessary since if we do a KILL of the global node as part of processing the PRIMARY KEY
				 * constraint, we could end up with a GVUNDEF error while processing a later UNIQUE constraint
				 * that wants to look at that global node for extracting some column value.
				 */
				if (UNIQUE_CONSTRAINT == constraint->type) {
					if ((LP_INSERT_INTO == type)
							|| ((UniqueConstraintLoopUpdate == loop_type) && (LP_UPDATE == type))) {
						%{}SET {}%
					} else {
						%{}KILL {}%
					}
					TMPL(tmpl_constraint_col_list, pplan, constraint, table, ConstraintColIList,	\
						dot_count, loop_type);
					if ((LP_INSERT_INTO == type)
							|| ((UniqueConstraintLoopUpdate == loop_type) && (LP_UPDATE == type))) {
						%{}=""{}%
					}
					%{}`n{{ PLAN_LINE_START }}{}%
					dot_count--;
					TMPL(tmpl_print_dots, dot_count);
				} else if ((LP_UPDATE == type) && (UniqueConstraintLoopUpdate == loop_type)) {
					/* We would have emitted a sequence of dots 1 more than needed.
					 * Undo the last dot with space.
					 */
					(*buffer_index)--;	/* Go back one, removing space */
					(*buffer_index)--;	/* Go back one, removing . */
					dot_count--;
				}
			}
		}
		%{}; END of UNIQUE constraint enforcement section{}%
		%{}`n{{ PLAN_LINE_START }}{}%
	}
}
%{}
