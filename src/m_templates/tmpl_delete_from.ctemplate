{}%
/****************************************************************
 *								*
 * Copyright (c) 2021 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include "octo_types.h"

#include "physical_plan.h"
#include "template_helpers.h"

TEMPLATE(tmpl_delete_from, PhysicalPlan *pplan) {
	int			dot_count;
	unsigned int		cur_key;

	/* Note: Most of the below code is similar to the LP_SELECT_QUERY code in "tmpl_physical_plan.ctemplate".
	 * To avoid code duplication, if things get too similar, it might make sense to merge the current file into the latter.
	 */
	assert(LP_DELETE_FROM == pplan->lp_select_query->type);
	%{}NEW {{ PP_YDB_OCTO_Z }},{{ PP_YDB_OCTO_EXPR }}{}%
	%{}`n{{ PLAN_LINE_START }}{}% // Whitespace for MUMPS
	/* If we have a set of LP_SET_DNF plans each corresponding to a LP_DELETE_FROM plan, then set the delete count to 0
	 * only at the start of the first DNF plan. Do not want the count after the first DNF plan execution to get reset to 0
	 * before the start of the second/later DNF plans.
	 */
	if (NULL == pplan->dnf_prev) {
		%{}SET {}%
		%{}{{ config->global_names.cursor }}(cursorId,{{ PP_ROW_COUNT }}){}%
		%{}=0 ; Initialize count of deleted records{}%
		%{}`n{{ PLAN_LINE_START }}{}%
	}
	cur_key = 0;
	dot_count = 0;
	assert(FALSE == pplan->tablejoin_body_group_by_done);
	TMPL(tmpl_tablejoin, pplan, pplan->tablejoin, cur_key, FALSE, dot_count, NULL, NULL);
	%{}`n{{ PLAN_LINE_START }}{}%
	%{}QUIT{}%
}
%{}
