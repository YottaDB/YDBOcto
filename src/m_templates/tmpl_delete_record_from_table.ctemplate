{}%
/****************************************************************
 *								*
 * Copyright (c) 2021-2023 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include "octo_types.h"

#include "physical_plan.h"
#include "template_helpers.h"

TEMPLATE(tmpl_delete_record_from_table, PhysicalPlan *pplan, int dot_count) {

	LogicalPlan	*lp_delete_from;
	lp_delete_from = pplan->lp_select_query;
	assert(LP_DELETE_FROM == lp_delete_from->type);

	SqlTableAlias	*src_table_alias;
	src_table_alias = lp_delete_from->extra_detail.lp_select_query.root_table_alias;

	SqlStatement	*table_stmt;
	table_stmt = src_table_alias->table;

	SqlTable	*table;
	UNPACK_SQL_STATEMENT(table, table_stmt, create_table);
	dot_count++;
	%{}`n{{ PLAN_LINE_START }}{}%

	/* Unlike INSERT INTO or UPDATE queries, a DELETE FROM query does not need to worry about CHECK constraint enforcement.
	 * This is because the entire row is removed and all CHECK constraints operate only at a row level (not across rows).
	 * Removing a row can never cause a CHECK constraint violation. But it does need to help with UNIQUE constraint
	 * enforcement (to remove global nodes from the UNIQUE index corresponding to the deleted rows). Hence the call to
	 * "tmpl_constraint()" below.
	 */
	LogicalPlan	*lp_constraint;
	GET_LP_ALLOW_NULL(lp_constraint, lp_delete_from, 1, LP_CONSTRAINT);
	if (NULL != lp_constraint) {
		/* Define the local variable name under which we will store column numbers that have PP_COL(i) initialized.
		 * This will help us (inside "tmpl_constraint()") determine the list of remaining table columns whose
		 * PP_COL(i) has not been initialized.
		 */
		ydb_buffer_t ydboctoTblConstraint;
		YDB_LITERAL_TO_BUFFER(OCTOLIT_YDBOCTOTBLCONSTRAINT, &ydboctoTblConstraint);

		int status;
		status = ydb_delete_s(&ydboctoTblConstraint, 0, NULL, YDB_DEL_TREE);/* Remove any leftover lvn nodes just in case */
		assert(YDB_OK == status);
		UNUSED(status);	/* needed to avoid [-Wunused-but-set-variable] warning from compiler */

		TMPL(tmpl_constraint, pplan, lp_constraint, table, dot_count);

		/* Now that the "tmpl_constraint()" call is done, remove lvn nodes that tracked PP_COL(i) */
		status = ydb_delete_s(&ydboctoTblConstraint, 0, NULL, YDB_DEL_TREE);
		assert(YDB_OK == status);
	}

	SqlValue	*value;
	UNPACK_SQL_STATEMENT(value, table->tableName, value);

	char		*tableName;
	tableName = value->v.reference;

	SqlOptionalKeyword	*keyword;
	UNPACK_SQL_STATEMENT(keyword, table->source, keyword);
	UNPACK_SQL_STATEMENT(value, keyword->v, value);
	TMPL(tmpl_print_dots, dot_count);
	%{}KILL {}%

	SqlKey		*key;
	int		total_keys;
	int		iter_key_index = 0;
	total_keys = pplan->total_iter_keys;
	iter_key_index = 0;
	key = pplan->iterKeys[0];
	/* Skip cross reference key (if any) */
	if (key->is_cross_reference_key) {
		total_keys--;
		key = pplan->iterKeys[++iter_key_index];
		/* We expect only ONE cross reference key in the DELETE FROM query since only 1 table is involved and
		 * currently we only xref a max of 1 non-key column in one table.
		 */
		assert(!key->is_cross_reference_key);
	}
	assert(total_keys);	/* Assert we have at least one primary key in the table we are doing the DELETE on */

#	ifndef NDEBUG
	SqlKey		*plan_key;
	int		keys_to_match;

	keys_to_match = 0;
	for ( ; ; ) {
		plan_key = pplan->iterKeys[iter_key_index];
		assert(!plan_key->is_cross_reference_key);
		if (plan_key->unique_id == key->unique_id) {
			keys_to_match++;
		}
		iter_key_index++;
		if (iter_key_index >= (int)pplan->total_iter_keys) {
			break;
		}
	}
	assert(keys_to_match == total_keys);
#	endif
	TMPL(tmpl_emit_source, table, value->v.string_literal, tableName, key->unique_id, 0, total_keys, EmitSourceForm_Value);
	TMPL(tmpl_set_duplication_check, pplan, dot_count);
	%{}`n{{ PLAN_LINE_START }}{}%
	TMPL(tmpl_print_dots, dot_count);
	%{}IF $INCREMENT({}%
	%{}{{ config->global_names.cursor }}(cursorId,{{ PP_ROW_COUNT }}){}%
	%{}) ; Increment count of deleted records{}%
}
%{}
