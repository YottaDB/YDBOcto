{}%
/****************************************************************
 *								*
 * Copyright (c) 2019-2022 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include "physical_plan.h"
#include "template_helpers.h"

TEMPLATE(tmpl_group_by, PhysicalPlan *pplan, int dot_count) {
	LogicalPlan	*af, *first_aggregate;

	assert(NULL != pplan->outputKey);
	assert(IS_GROUP_BY_PLAN(pplan));
	assert(!pplan->outputKey->is_cross_reference_key);	/* caller should have ensured this */
	TMPL(tmpl_print_dots, dot_count);
	%{}`n{{ PLAN_LINE_START }}{}%
	%{}SET {{ PP_YDB_OCTO_G }}=""{}%
	/* If there is no GROUP BY clause in the query, check if any aggregate function usages happened.
	 * If so initialize those to 0 or NULL if they don't exist (due to WHERE clauses skipping all rows).
	 * See https://gitlab.com/YottaDB/DBMS/YDBOcto/-/issues/455#note_321309198 for details on why only
	 * the no-GROUP-BY-specified case is treated specially.
	 */
	if (!(GROUP_BY_SPECIFIED & pplan->aggregate_function_or_group_by_or_having_specified)) {
		first_aggregate = pplan->lp_select_query->extra_detail.lp_select_query.first_aggregate;
		for (af = first_aggregate; NULL != af; af = af->extra_detail.lp_aggregate_function.next_aggregate) {
			boolean_t	is_avg;
			int		aggregate_cnt;
			LPActionType	type;

			type = af->type;
			assert(IS_TYPE_LP_AGGREGATE(type));
			assert(af->extra_detail.lp_aggregate_function.aggregate_cnt);
			is_avg = ((LP_AGGREGATE_FUNCTION_AVG == type) || (LP_AGGREGATE_FUNCTION_AVG_DISTINCT == type));
			%{}`n{{ PLAN_LINE_START }}{}%
			TMPL(tmpl_print_dots, dot_count);
			%{}SET:'$DATA({}%
			TMPL(tmpl_key, pplan->outputKey);
			(*buffer_index)--;
			%{},{{ PP_GROUP_BY }},{{ PP_YDB_OCTO_G }},{}%
			aggregate_cnt = af->extra_detail.lp_aggregate_function.aggregate_cnt;
			if (is_avg) {
				/* In case of AVG function, the SUM and COUNT are stored separately so use that to find the AVG.
				 * The SUM and COUNT are stored in a negative subscript so do the negation here.
				 */
				aggregate_cnt = - aggregate_cnt;
			}
			%{}{{ aggregate_cnt|%d }}{}%
			if (is_avg) {
				%{},"SUM"{}%
			}
			%{})) {}%
			TMPL(tmpl_key, pplan->outputKey);
			(*buffer_index)--;
			%{},{{ PP_GROUP_BY }},{{ PP_YDB_OCTO_G }},{}%
			%{}{{ aggregate_cnt|%d }}{}%
			if (is_avg) {
				%{},"SUM"{}%
			}
			%{})={}%
			switch(type) {
			case LP_AGGREGATE_FUNCTION_MIN:
			case LP_AGGREGATE_FUNCTION_MAX:
			case LP_AGGREGATE_FUNCTION_SUM:
			case LP_AGGREGATE_FUNCTION_SUM_DISTINCT:
			case LP_AGGREGATE_FUNCTION_AVG:
			case LP_AGGREGATE_FUNCTION_AVG_DISTINCT:
				%{}$ZYSQLNULL{}%
				break;
			default:
				assert((LP_AGGREGATE_FUNCTION_COUNT_ASTERISK == type)
					|| (LP_AGGREGATE_FUNCTION_COUNT == type) || (LP_AGGREGATE_FUNCTION_COUNT_DISTINCT == type)
					|| (LP_AGGREGATE_FUNCTION_COUNT_DISTINCT_TABLE_ASTERISK == type)
					|| (LP_AGGREGATE_FUNCTION_COUNT_TABLE_ASTERISK == type));
				%{}0{}%
				break;
			}
		}
	}
	%{}`n{{ PLAN_LINE_START }}{}%
	TMPL(tmpl_print_dots, dot_count);
	%{}FOR  {}%
	if (NULL == pplan->order_by) {
		SqlOptionalKeyword	*limit_keyword;

		limit_keyword = get_keyword_from_keywords(pplan->keywords, OPTIONAL_LIMIT);
		if (NULL != limit_keyword) {
			%{}QUIT:{}%
			TMPL(tmpl_limit_check, limit_keyword, "", "'>" PP_YDB_OCTO_ZLIMIT);
						/* Note: literal concatenation in last parameter above */
			(*buffer_index)--;	/* Remove the trailing ")" from `tmpl_limit_check` call */
			%{}({{ pplan->outputKey->unique_id|%d }}){}%	/* Add subscript based on output key */
			%{}){}%	/* Add back the trailing ")" from `tmpl_limit_check` call above */
			%{}  {}%
		}
	}
	%{}DO:$DATA({}%
	TMPL(tmpl_key, pplan->outputKey); (*buffer_index)--;
	%{},{{ PP_GROUP_BY }},{{ PP_YDB_OCTO_G }}))  SET {{ PP_YDB_OCTO_G }}=$ORDER({}%
	TMPL(tmpl_key, pplan->outputKey); (*buffer_index)--;
	%{},{{ PP_GROUP_BY }},{{ PP_YDB_OCTO_G }})) QUIT:(""={{ PP_YDB_OCTO_G }}){}%
	// Apply the conditions for this statement
	%{}`n{{ PLAN_LINE_START }}{}%
	dot_count++;
	TMPL(tmpl_print_dots, dot_count);
	%{}SET {{ PP_YDB_OCTO_EXPR }}=1{}%
	if (NULL != pplan->aggregate_options) {
		LogicalPlan	*having;

		/* Check if there is a HAVING clause. If so, generate pplan for that. */
		having = pplan->aggregate_options->v.lp_default.operand[1];
		if (NULL != having) {
			TMPL(tmpl_where_or_having_or_on, having->v.lp_default.operand[0], pplan, dot_count);
		} else {
			%{}`n{{ PLAN_LINE_START }}{}%
		}
	} else {
		%{}`n{{ PLAN_LINE_START }}{}%
	}
	if (pplan->distinct_values) {
		TMPL(tmpl_print_dots, dot_count);
		%{}SET {{ PP_YDB_OCTO_EXPR }}={{ PP_YDB_OCTO_EXPR }}&{}%
		%{}('$DATA({{ PP_YDB_OCTO_ZDISTINCT }}({{ pplan->outputKey->unique_id|%d }},{}%
		TMPL(tmpl_column_list_combine, pplan->projection, pplan, ",", FALSE, 0, FALSE);
		%{}))){}%
		%{}`n{{ PLAN_LINE_START }}{}%
	}
	TMPL(tmpl_print_dots, dot_count);
	%{}DO:{{ PP_YDB_OCTO_EXPR }}{}%
	// Populate records in the output key (i.e. SELECT column list)
	TMPL(tmpl_populate_output_key, pplan, dot_count);
	return;
}
%{}
