{}%
/****************************************************************
 *								*
 * Copyright (c) 2020-2024 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include "octo_types.h"

#include "physical_plan.h"
#include "template_helpers.h"
TEMPLATE(tmpl_insert_into, PhysicalPlan *pplan) {
	LogicalPlan		*lp_insert_into, *lp_insert_into_options, *lp_select_query, *lp_key, *lp_table, *lp_col_list;
	LogicalPlan		*lp_insert_into_more_options;
	SqlKey			*outputKey;
	SqlTable		*table;
	SqlStatement		*table_stmt;
	SqlColumn		*start_column, *cur_column;
	SqlOptionalKeyword	*keyword;
	SqlValue		*value;
	SqlTableAlias		*src_table_alias;
	int			first_nonkey_column;
	char			*delim;
	SqlColumnListAlias	*src_start_cla, *src_cur_cla;
	int			src_colnum;
	int			dot_count;

	lp_insert_into = pplan->lp_select_query;
	GET_LP(lp_insert_into_options, lp_insert_into, 1, LP_INSERT_INTO_OPTIONS);
	GET_LP_ALLOW_NULL(lp_col_list, lp_insert_into_options, 0, LP_COLUMN_LIST);
	GET_LP(lp_insert_into_more_options, lp_insert_into_options, 1, LP_INSERT_INTO_MORE_OPTIONS);
	lp_select_query = lp_insert_into_more_options->v.lp_default.operand[0];
	lp_key = lp_get_output_key(lp_select_query);
	outputKey = lp_key->v.lp_key.key;
	%{}SET {}%
	%{}{{ config->global_names.cursor }}(cursorId,{{ PP_ROW_COUNT }}){}%
	%{}=0 ; Initialize count of inserted records{}%
	%{}`n{{ PLAN_LINE_START }}{}%
	%{}SET {}%
	TMPL(tmpl_key, outputKey);
	%{}=""`n{{ PLAN_LINE_START }}{}%
	%{}FOR  SET {}%
	TMPL(tmpl_key, outputKey);
	%{}=$ORDER({}%
	TMPL(tmpl_key_advance, pplan, outputKey);
	%{}) QUIT:({}%
	TMPL(tmpl_key_end, outputKey);
	%{}){}%
	%{}  DO`n{{ PLAN_LINE_START }}{}%
	dot_count = 1;
	TMPL(tmpl_print_dots, dot_count);
	%{}NEW {{ PP_COL }},{{ PP_COL_META_DATA }}{}%

	boolean_t	is_insert_into_values;	/* used for optimization in case of INSERT INTO .. VALUES (YDBOcto#910) */

	is_insert_into_values = (LP_TABLE_VALUE == lp_select_query->type);
	if (!is_insert_into_values) {
		%{},{{ PP_VAL }}{}%
	}
	%{}`n{{ PLAN_LINE_START }}{}%
	if (!is_insert_into_values) {
		TMPL(tmpl_print_dots, dot_count);
		%{}SET {{ PP_VAL }}={}%
		TMPL(tmpl_key, outputKey); (*buffer_index)--;
		%{},{}%
		TMPL(tmpl_key, outputKey);
		%{}){}%
		%{}`n{{ PLAN_LINE_START }}{}%
	}
	/* Generate code to extract each column value */
	GET_LP(lp_table, lp_insert_into, 0, LP_TABLE);
	table_stmt = lp_table->v.lp_table.table_alias->table;
	UNPACK_SQL_STATEMENT(table, table_stmt, create_table);
	UNPACK_SQL_STATEMENT(keyword, table->source, keyword);
	UNPACK_SQL_STATEMENT(value, keyword->v, value);
	UNPACK_SQL_STATEMENT(start_column, table->columns, column);
	cur_column = start_column;
	lp_select_query = lp_drill_to_insert(lp_select_query);	/* Needed in case of LP_SET_OPERATION */
	src_table_alias = lp_select_query->extra_detail.lp_select_query.root_table_alias;
	UNPACK_SQL_STATEMENT(src_start_cla, src_table_alias->column_list, column_list_alias);
	src_cur_cla = src_start_cla;
	src_colnum = 0;
	do {
		boolean_t	col_is_specified;

		if (NULL != cur_column->columnName) {
			/* Is NOT a table-level constraint */
			if (IS_DATE_TIME_DATA_TYPE(cur_column->data_type_struct.data_type)) {
				TMPL(tmpl_print_dots, dot_count);
				%{}`n{{ PLAN_LINE_START }}{}%
				SqlValueType date_time_value_type = get_sqlvaluetype_from_sqldatatype(cur_column->data_type_struct.data_type, FALSE);
				TMPL(tmpl_print_dots, dot_count);
				%{}SET {{ PP_COL_META_DATA }}({{ cur_column->column_number|%d }},1)={{ date_time_value_type|%d }}{}%
				%{}`n{{ PLAN_LINE_START }}{}%
				TMPL(tmpl_print_dots, dot_count);
				%{}SET {{ PP_COL_META_DATA }}({{ cur_column->column_number|%d }},2)={{ OCTOLIT_YDBOCTODATETIMEOUTPUTFORMAT }}{}%
				%{}`n{{ PLAN_LINE_START }}{}%
				TMPL(tmpl_print_dots, dot_count);
				const char *format_specifier;
				GET_DATE_TIME_OUTPUT_FORMAT_SPECIFIER_FOR_TYPE(date_time_value_type, format_specifier);
				%{}SET {{ PP_COL_META_DATA }}({{ cur_column->column_number|%d }},3)="{{ format_specifier }}"{}%
				%{}`n{{ PLAN_LINE_START }}{}%
			}
			TMPL(tmpl_print_dots, dot_count);
			%{}SET {{ PP_COL }}({{ cur_column->column_number|%d }})={}%
			if (cur_column->is_hidden_keycol) {
				assert(0 == cur_column->column_number);
				/* Column is a hidden key column. Generate a unique counter for it using the top level table gvn */
				%{}$INCREMENT({}%
				TMPL(tmpl_emit_source, table, value->v.string_literal, NULL, 0, (void *)0, MAX_KEY_COUNT, \
					EmitSourceForm_NoKeyCol);
				%{}){}%
			} else {
				SqlValueType	src_cur_cla_type;

				src_cur_cla_type = UNKNOWN_SqlValueType;
				if (NULL == lp_col_list) {
					/* No comma-separated list of target columns was specified */
					col_is_specified = (NULL != src_cur_cla);
					/* Go to the next column in the source query of the INSERT INTO for the next iteration.
					 * If we have run out of columns in the source query before we run out of columns in the
					 * target table, then set "src_cur_cla" to NULL.
					 */
					if (NULL != src_cur_cla) {
						src_cur_cla_type = src_cur_cla->type;
						assert(UNKNOWN_SqlValueType != src_cur_cla_type);
						src_cur_cla = src_cur_cla->next;
						src_colnum++;
						if (src_start_cla == src_cur_cla) {
							src_cur_cla = NULL;
						}
					}
				} else {
					/* A comma-separated list of target columns was specified.
					 * Check if this column is in that list.
					 */
					LogicalPlan	*cur_lp_col_list;

					col_is_specified = FALSE;
					cur_lp_col_list = lp_col_list;
					src_colnum = 1;
					do {
						LogicalPlan	*lp_column;

						assert(LP_COLUMN_LIST == cur_lp_col_list->type);
						GET_LP(lp_column, cur_lp_col_list, 0, LP_COLUMN);
						if (cur_column == lp_column->v.lp_column.column) {
							/* Column is specified */
							col_is_specified = TRUE;
							break;
						}
						GET_LP_ALLOW_NULL(cur_lp_col_list, cur_lp_col_list, 1, LP_COLUMN_LIST);
						src_colnum++;
					} while (NULL != cur_lp_col_list);
				}
				/* The below expression helps avoid duplication of code for handling IDENTITY column in case where
				 * insert columns are explicitely specified and not specified.
				 */
				if (col_is_specified && (IS_COLUMN_IDENTITY(cur_column)
					    && lp_insert_into->extra_detail.lp_select_query.override_user_value)) {
					    col_is_specified = FALSE; // Execute `else` block in the next `if` to handle IDENTITY
				}
				if (col_is_specified) {
					if (is_insert_into_values) {
						TMPL(tmpl_key, outputKey); (*buffer_index)--;
						%{},{}%
						TMPL(tmpl_key, outputKey);
						%{},{{ src_colnum|%d }}){}%
					} else {
						%{}$$mval2str^%%ydboctoplanhelpers($$mvalPiece^%%ydboctoplanhelpers({{ PP_VAL }},{}%
						%{}{{ src_colnum|%d }})){}%
					}
					/* 1) Check if the column has size/precision/scale specified. If so, do checks/conversions
					 *    as appropriate. Currently the only 2 types that honor the size/precision/scale are
					 *    STRING_TYPE and NUMERIC_TYPE.
					 * 2) If the source column is a NUMERIC type and target column is INTEGER,
					 *    need to do ROUNDing of the input data before fitting into an INTEGER (YDBOcto#1019).
					 * 3) If the source column is an INTEGER/NUMERIC type and target column is INTEGER/NUMERIC,
					 *    need to do "+" of the input data to ensure non-canonical strings are converted
					 *    to numeric (e.g. "023" -> "23").
					 */
					switch(cur_column->data_type_struct.data_type) {
					case NUMERIC_TYPE:
					case STRING_TYPE:
						if (SIZE_OR_PRECISION_UNSPECIFIED
								!= cur_column->data_type_struct.size_or_precision) {
							%{}`n{{ PLAN_LINE_START }}{}%
							TMPL(tmpl_print_dots, dot_count);
							%{}SET {{ PP_COL }}({{ cur_column->column_number|%d }})={}%
							if (NUMERIC_TYPE == cur_column->data_type_struct.data_type) {
								%{}$$Cast2NUMERICWithPrecision^%%ydboctoplanhelpers{}%
							} else {
								%{}$$SizeCheckVARCHAR^%%ydboctoplanhelpers{}%
							}
							%{}({{ PP_COL }}({{ cur_column->column_number|%d }}){}%
							%{},{{ cur_column->data_type_struct.size_or_precision|%d }}{}%
							if (SCALE_UNSPECIFIED != cur_column->data_type_struct.scale) {
								assert(NUMERIC_TYPE == cur_column->data_type_struct.data_type);
								%{},{{ cur_column->data_type_struct.scale|%d }}{}%
							}
							%{}){}%
						} else if (NUMERIC_TYPE == cur_column->data_type_struct.data_type) {
							switch(src_cur_cla_type) {
							case NUMERIC_LITERAL:
							case INTEGER_LITERAL:
								%{}`n{{ PLAN_LINE_START }}{}%
								TMPL(tmpl_print_dots, dot_count);
								%{}SET {{ PP_COL }}({{ cur_column->column_number|%d }})={}%
								%{}+{}%
								%{}{{ PP_COL }}({{ cur_column->column_number|%d }}){}%
								break;
							default:
								break;
							}
						}
						break;
					case DATE_TYPE:
					case TIME_TYPE:
					case TIME_WITH_TIME_ZONE_TYPE:
					case TIMESTAMP_TYPE:
					case TIMESTAMP_WITH_TIME_ZONE_TYPE:
					case INTEGER_TYPE:
						switch(src_cur_cla_type) {
						case NUMERIC_LITERAL:
						case INTEGER_LITERAL:
							%{}`n{{ PLAN_LINE_START }}{}%
							TMPL(tmpl_print_dots, dot_count);
							%{}SET {{ PP_COL }}({{ cur_column->column_number|%d }})={}%
							if (NUMERIC_LITERAL == src_cur_cla_type) {
								%{}$$ROUND^%%ydboctosqlfunctions({}%
							} else {
								%{}+{}%
							}
							%{}{{ PP_COL }}({{ cur_column->column_number|%d }}){}%
							if (NUMERIC_LITERAL == src_cur_cla_type) {
								%{},0){}%
							}
							break;
						case STRING_LITERAL:
							if (IS_DATE_TIME_DATA_TYPE(cur_column->data_type_struct.data_type)) {
								%{}`n{{ PLAN_LINE_START }}{}%
								TMPL(tmpl_print_dots, dot_count);
								%{}SET {{ PP_COL }}({{ cur_column->column_number|%d }})={}%
								// Place conversion routine
								TMPL(tmpl_convert_to_unix_time);
								// Add arguments along with PP_COL(col_num)
								// 1. Add value to tranform : inputStr
								%{}{{ PP_COL }}({{ cur_column->column_number|%d }}){}%
								// Add rest of the arguments
								TMPL(tmpl_print_date_time_to_unix_time_args,
								     get_sqlvaluetype_from_sqldatatype(
								     			cur_column->data_type_struct.data_type,
											FALSE),
								     cur_column->data_type_struct.format, TRUE, FALSE);
								// Close conversion routine
								%{}){}%
							}
						default:
							break;
						}
						break;
					case NUL_TYPE:
					case BOOLEAN_TYPE:
						/* No checks are currently done/deemed-necessary for these types.
						 * Will add them as the need arises.
						 */
						break;
					default:
						assert(FALSE);
						break;
					}
				} else {
					 if (IS_COLUMN_IDENTITY(cur_column)) {
					 	TMPL(tmpl_identity_column, cur_column);
						/* Parser would have generated an error if OVERRIDING SYSTEM VALUE was specified and
						 * this is a GENERATED ALWAYS identity column. Following assert confirms this usage.
						 */
						assert((!lp_insert_into->extra_detail.lp_select_query.override_user_value)
						       || (lp_insert_into->extra_detail.lp_select_query.override_user_value
						           && IS_COLUMN_BY_DEFAULT_IDENTITY(cur_column)));
					 } else {
					 	/* For the default value of ZYSQLNULL. This needed target table column is not
						 * available in the source query select column list. For now, treat it as NULL.
						 * Later when support for DEFAULT is added, we should set this to that DEFAULT
						 * value if one is defined for this column. TODO: YDBOcto#555.
						 */
					 	%{}$ZYSQLNULL{}%
					 }
				}
				if (IS_COLUMN_NOT_NULL(cur_column)) {
					/* Check if a NOT NULL column is set to NULL. If so issue an error.
					 * Note that key columns (PRIMARY KEY or KEY NUM keyword) automatically have the
					 * NOT NULL constraint added so they also get handled in this same "if" block.
					 */
					%{}`n{{ PLAN_LINE_START }}{}%
					TMPL(tmpl_print_dots, dot_count);
					%{}DO:$ZYISSQLNULL({{ PP_COL }}({{ cur_column->column_number|%d }})){}%

					SqlValue	*colname_value;
					UNPACK_SQL_STATEMENT (colname_value, cur_column->columnName, value);

					char		*columnName;
					columnName = colname_value->v.reference;
					%{} NullColValue^%%ydboctoplanhelpers("{{ columnName }}"){}%
				}
			}
			%{}`n{{ PLAN_LINE_START }}{}%
		} else {
			/* This column is a table-level constraint. Don't do anything now. Process it few lines later. */
		}
		cur_column = cur_column->next;
	} while (cur_column != start_column);

	LogicalPlan	*lp_constraint;
	GET_LP_ALLOW_NULL(lp_constraint, lp_insert_into_more_options, 1, LP_CONSTRAINT);
	TMPL(tmpl_constraint, pplan, lp_constraint, table, dot_count);

	/* Generate global reference */
	TMPL(tmpl_print_dots, dot_count);
	%{}SET {}%
	TMPL(tmpl_emit_source, table, value->v.string_literal, NULL, 0, (void *)0, MAX_KEY_COUNT, EmitSourceForm_Insert);
	%{}={}%
	/* Generate non-key columns */
	assert(cur_column == start_column);
	if (table->delim) {
		UNPACK_SQL_STATEMENT(keyword, table->delim, keyword);
		UNPACK_SQL_STATEMENT(value, keyword->v, value);
		delim = value->v.reference;
	} else {
		delim = NULL;
	}
	first_nonkey_column = TRUE;
	do {
		if ((NULL != cur_column->columnName) && !IS_KEY_COLUMN(cur_column)) {
			if (!first_nonkey_column) {
				char	ch;

				%{}_{}%
				assert(NULL != get_keyword(cur_column, OPTIONAL_PIECE));
				if (NULL != delim) {
					char	*actual_delim;

					ch = *delim;
					actual_delim = delim + 1; /* Skip first byte to get actual delimiter */
					assert((DELIM_IS_DOLLAR_CHAR == ch) || (DELIM_IS_LITERAL == ch));
					if (DELIM_IS_LITERAL == ch) {
						char	*buffer;
						int	 buffer_size = 4; /* 4 bytes is more than enough space to hold
										 * expanded space for 1-byte (maximum space needed
										 * is 2 bytes in case delim is the double quote
										 * character).
										 */

						buffer = (char *)malloc(sizeof(char) * buffer_size);
						m_escape_string2(&buffer, &buffer_size, actual_delim);
						%{}"{{ buffer }}"{}%
						free(buffer);
					} else {
						assert(!MEMCMP_LIT(actual_delim, "$CHAR(")); /* this is added in parser.y */
						%{}{{ actual_delim }}{}%
					}
					%{}_{}%
				}
			}
			%{}$$colvalue2piecevalue^%%ydboctoplanhelpers({{ PP_COL }}({{ cur_column->column_number|%d }})){}%
			first_nonkey_column = FALSE;
		}
		/* else:
		 *   a) It is a key column and code has already been emitted by "tmpl_emit_source()" above OR
		 *   b) It is a table-level constraint and needed code has already been emitted above.
		 */
		cur_column = cur_column->next;
	} while (cur_column != start_column);
	if (first_nonkey_column) {
		/* There was no non-key column found, i.e. all columns are key columns. So generate an empty string value
		 * for the value portion of the M node.
		 */
		%{}""{}%
	}
	%{}`n{{ PLAN_LINE_START }}{}%
	TMPL(tmpl_print_dots, dot_count);
	%{}IF $INCREMENT({}%
	%{}{{ config->global_names.cursor }}(cursorId,{{ PP_ROW_COUNT }}){}%
	%{}) ; Increment count of inserted records{}%
	%{}`n{{ PLAN_LINE_START }}{}%
	%{}QUIT{}%
	%{}`n{}%
}
%{}
