{}%
/****************************************************************
 *								*
 * Copyright (c) 2020-2021 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include "octo_types.h"

#include "physical_plan.h"
#include "template_helpers.h"

TEMPLATE(tmpl_insert_into, PhysicalPlan *pplan) {
	LogicalPlan		*lp_insert_into, *lp_insert_into_options, *lp_select_query, *lp_key, *lp_table, *lp_col_list;
	SqlKey			*outputKey;
	SqlTable		*table;
	SqlStatement		*table_stmt;
	SqlColumn		*start_column, *cur_column;
	SqlOptionalKeyword	*keyword;
	SqlValue		*value;
	SqlTableAlias		*src_table_alias;
	int			first_nonkey_column;
	char			*delim;
	SqlColumnListAlias	*src_start_cla, *src_cur_cla;
	int			src_colnum;
	int			dot_count;

	lp_insert_into = pplan->lp_select_query;
	lp_insert_into_options = lp_insert_into->v.lp_default.operand[1];
	lp_col_list = lp_insert_into_options->v.lp_default.operand[0];
	lp_select_query = lp_insert_into_options->v.lp_default.operand[1];
	lp_key = lp_get_output_key(lp_select_query);
	outputKey = lp_key->v.lp_key.key;
	%{}SET {}%
	%{}{{ config->global_names.cursor }}(cursorId,{{ PP_ROW_COUNT }}){}%
	%{}=0 ; Initialize count of inserted records{}%
	%{}`n{{ PLAN_LINE_START }}{}%
	%{}SET {}%
	TMPL(tmpl_key, outputKey);
	%{}=""`n{{ PLAN_LINE_START }}{}%
	%{}FOR  SET {}%
	TMPL(tmpl_key, outputKey);
	%{}=$ORDER({}%
	TMPL(tmpl_key_advance, pplan, outputKey);
	%{}) QUIT:({}%
	TMPL(tmpl_key_end, outputKey);
	%{}){}%
	%{}  DO`n{{ PLAN_LINE_START }}{}%
	dot_count = 1;
	TMPL(tmpl_print_dots, dot_count);
	%{}NEW {{ PP_COL }},{{ PP_VAL }}`n{{ PLAN_LINE_START }}{}%
	TMPL(tmpl_print_dots, dot_count);
	%{}SET {{ PP_VAL }}={}%
	TMPL(tmpl_key, outputKey); (*buffer_index)--;
	%{},{}%
	TMPL(tmpl_key, outputKey);
	%{}){}%
	%{}`n{{ PLAN_LINE_START }}{}%
	/* Generate code to extract each column value */
	lp_table = lp_insert_into->v.lp_default.operand[0];
	table_stmt = lp_table->v.lp_table.table_alias->table;
	UNPACK_SQL_STATEMENT(table, table_stmt, create_table);
	UNPACK_SQL_STATEMENT(keyword, table->source, keyword);
	UNPACK_SQL_STATEMENT(value, keyword->v, value);
	UNPACK_SQL_STATEMENT(start_column, table->columns, column);
	cur_column = start_column;
	lp_select_query = lp_drill_to_insert(lp_select_query);	/* Needed in case of LP_SET_OPERATION */
	src_table_alias = lp_select_query->extra_detail.lp_select_query.root_table_alias;
	UNPACK_SQL_STATEMENT(src_start_cla, src_table_alias->column_list, column_list_alias);
	src_cur_cla = src_start_cla;
	src_colnum = 0;
	do {
		boolean_t	col_is_specified;

		TMPL(tmpl_print_dots, dot_count);
		%{}SET {{ PP_COL }}({{ cur_column->column_number|%d }})={}%
		if (cur_column->is_hidden_keycol) {
			/* Column is a hidden key column. Generate a unique counter for it using the top level table gvn */
			%{}$INCREMENT({}%
			TMPL(tmpl_emit_source, table, value->v.string_literal, NULL, 0, MAX_KEY_COUNT, EmitSourceForm_NoKeyCol);
			%{}){}%
		} else {
			if (NULL == lp_col_list) {
				/* No comma-separated list of target columns was specified */
				col_is_specified = (NULL != src_cur_cla);
				/* Go to the next column in the source query of the INSERT INTO for the next iteration.
				 * If we have run out of columns in the source query before we run out of columns in the
				 * target table, then set "src_cur_cla" to NULL.
				 */
				if (NULL != src_cur_cla) {
					src_cur_cla = src_cur_cla->next;
					src_colnum++;
					if (src_start_cla == src_cur_cla) {
						src_cur_cla = NULL;
					}
				}
			} else {
				/* A comma-separated list of target columns was specified. Check if this column is in that list. */
				LogicalPlan	*cur_lp_col_list;

				col_is_specified = FALSE;
				cur_lp_col_list = lp_col_list;
				src_colnum = 1;
				do {
					LogicalPlan	*lp_column;

					assert(LP_COLUMN_LIST == cur_lp_col_list->type);
					GET_LP(lp_column, cur_lp_col_list, 0, LP_COLUMN);
					if (cur_column == lp_column->v.lp_column.column) {
						/* Column is specified */
						col_is_specified = TRUE;
						break;
					}
					cur_lp_col_list = cur_lp_col_list->v.lp_default.operand[1];
					src_colnum++;
				} while (NULL != cur_lp_col_list);
			}
			if (col_is_specified) {
				%{}$$mval2str^%%ydboctoplanhelpers($$mvalPiece^%%ydboctoplanhelpers({{ PP_VAL }},{}%
				%{}{{ src_colnum|%d }})){}%
				/* Check if the column has size/precision/scale specified. If so, do checks/conversions as
				 * appropriate. Currently the only 2 types that honor the size/precision/scale are STRING_TYPE
				 * and NUMERIC_TYPE. So check for those below.
				 */
				switch(cur_column->data_type_struct.data_type) {
				case NUMERIC_TYPE:
				case STRING_TYPE:
					if (SIZE_OR_PRECISION_UNSPECIFIED != cur_column->data_type_struct.size_or_precision) {
						%{}`n{{ PLAN_LINE_START }}{}%
						TMPL(tmpl_print_dots, dot_count);
						%{}SET {{ PP_COL }}({{ cur_column->column_number|%d }})={}%
						if (NUMERIC_TYPE == cur_column->data_type_struct.data_type) {
							%{}$$Cast2NUMERIC^%%ydboctoplanhelpers{}%
						} else {
							%{}$$SizeCheckVARCHAR^%%ydboctoplanhelpers{}%
						}
						%{}({{ PP_COL }}({{ cur_column->column_number|%d }}){}%
						%{},{{ cur_column->data_type_struct.size_or_precision|%d }}{}%
						if (SCALE_UNSPECIFIED != cur_column->data_type_struct.scale) {
							assert(NUMERIC_TYPE == cur_column->data_type_struct.data_type);
							%{},{{ cur_column->data_type_struct.scale|%d }}{}%
						}
						%{}){}%
					}
					break;
				case INTEGER_TYPE:
				case NUL_TYPE:
				case BOOLEAN_TYPE:
					/* No checks are currently done/deemed-necessary for these types.
					 * Will add them as the need arises.
					 */
					break;
				default:
					assert(FALSE);
					break;
				}
			} else {
				/* This needed target table column is not available in the source query select column list.
				 * For now, treat it as NULL. Later when support for DEFAULT is added, we should set
				 * this to that DEFAULT value if one is defined for this column.
				 * TODO: YDBOcto#555, YDBOcto#502.
				 */
				%{}$ZYSQLNULL{}%
			}
		}
		%{}`n{{ PLAN_LINE_START }}{}%
		cur_column = cur_column->next;
	} while (cur_column != start_column);
	/* Generate global reference */
	TMPL(tmpl_print_dots, dot_count);
	%{}SET {}%
	TMPL(tmpl_emit_source, table, value->v.string_literal, NULL, 0, MAX_KEY_COUNT, EmitSourceForm_Insert);
	%{}={}%
	/* Generate non-key columns */
	assert(cur_column == start_column);
	if (table->delim) {
		UNPACK_SQL_STATEMENT(keyword, table->delim, keyword);
		UNPACK_SQL_STATEMENT(value, keyword->v, value);
		delim = value->v.reference;
	} else {
		delim = NULL;
	}
	first_nonkey_column = TRUE;
	do {
		if ((NULL == get_keyword(cur_column, PRIMARY_KEY)) && (NULL == get_keyword(cur_column, OPTIONAL_KEY_NUM))) {
			if (!first_nonkey_column) {
				char	ch;

				%{}_{}%
				assert(NULL != get_keyword(cur_column, OPTIONAL_PIECE));
				if (NULL != delim) {
					char	*actual_delim;

					ch = *delim;
					actual_delim = delim + 1; /* Skip first byte to get actual delimiter */
					assert((DELIM_IS_DOLLAR_CHAR == ch) || (DELIM_IS_LITERAL == ch));
					if (DELIM_IS_LITERAL == ch) {
						char	*buffer;
						int	 buffer_size = 4; /* 4 bytes is more than enough space to hold
										 * expanded space for 1-byte (maximum space needed
										 * is 2 bytes in case delim is the double quote
										 * character).
										 */

						buffer = (char *)malloc(sizeof(char) * buffer_size);
						m_escape_string2(&buffer, &buffer_size, actual_delim);
						%{}"{{ buffer }}"{}%
						free(buffer);
					} else {
						assert(!MEMCMP_LIT(actual_delim, "$CHAR(")); /* this is added in parser.y */
						%{}{{ actual_delim }}{}%
					}
					%{}_{}%
				}
			}
			%{}$$colvalue2piecevalue^%%ydboctoplanhelpers({{ PP_COL }}({{ cur_column->column_number|%d }})){}%
			first_nonkey_column = FALSE;
		}
		/* else: It is a key column and code has already been generated by "tmpl_emit_source()" above */
		cur_column = cur_column->next;
	} while (cur_column != start_column);
	if (first_nonkey_column) {
		/* There was no non-key column found, i.e. all columns are key columns. So generate an empty string value
		 * for the value portion of the M node.
		 */
		%{}""{}%
	}
	%{}`n{{ PLAN_LINE_START }}{}%
	TMPL(tmpl_print_dots, dot_count);
	%{}IF $INCREMENT({}%
	%{}{{ config->global_names.cursor }}(cursorId,{{ PP_ROW_COUNT }}){}%
	%{}) ; Increment count of inserted records{}%
	%{}`n{{ PLAN_LINE_START }}{}%
	%{}QUIT{}%
	%{}`n{}%
}
%{}
