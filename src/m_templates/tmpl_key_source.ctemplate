{}%
/****************************************************************
 *								*
 * Copyright (c) 2019-2021 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/
#include "logical_plan.h"
#include "template_helpers.h"

/**
 * Outputs the "source" of the given key, such as a value in xref global (or local) if the key is
 *  a cross reference, or the value of user-specified global mapping
 */
TEMPLATE(tmpl_key_source, PhysicalPlan *pplan, SqlKey *key, enum EmitSourceForm form) {
	char			*tableName;
	SqlValue		*value;
	SqlTable		*table;
	SqlOptionalKeyword	*keyword = NULL;
	unsigned int		iter_key_index = 0;
	char			*columnName = "";

	assert(NULL != key->table);
	table = key->table;
	UNPACK_SQL_STATEMENT(value, table->tableName, value);
	tableName = value->v.reference;

	// We ignore the key value here, so we can check if there is data in this key in some cases
	if (key->is_cross_reference_key) {

		UNPACK_SQL_STATEMENT(value, key->column->columnName, value);
		columnName = value->v.reference;
		%{}{{ key->xref_prefix }}{}%
		%{}{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}"{}%
		// Output the column this cross reference is sourced from
		iter_key_index = 0;
		while ((iter_key_index < pplan->total_iter_keys) && (pplan->iterKeys[iter_key_index]->unique_id != key->unique_id))
			iter_key_index++;
		%{},{}%
		// We only look at the first subscript, since we don't want to look at actual values of the keys
		assert(key == pplan->iterKeys[iter_key_index]);
		if (IS_NULL_FIXED_VALUE(key->fixed_to_value)) {
			/* Use empty string instead of $ZYSQLNULL when generating xref global subscript.
			 * This is because we use "" to store NULL values in the xref global.
			 * Cannot use $ZSYSQLNULL as a subscript (will issue ZYSQLNULLNOTVALID error).
			 */
			%{}""{}%
		} else {
			TMPL(tmpl_key, key);
		}
		%{}){}%
	} else {
		SqlKey		*plan_key;
		unsigned int	total_keys;
		int		keys_to_match;

		assert(NULL != table->source);
		total_keys = pplan->total_iter_keys;
		iter_key_index = 0;
		keys_to_match = 0;
		for ( ; ; ) {
			plan_key = pplan->iterKeys[iter_key_index];
			if ((plan_key->unique_id == key->unique_id) && !plan_key->is_cross_reference_key) {
				keys_to_match++;
			}
			if (plan_key == key) {
				break;
			}
			iter_key_index++;
			if (iter_key_index >= total_keys) {
				break;
			}
		}
		assert(keys_to_match);
		UNPACK_SQL_STATEMENT(keyword, table->source, keyword);
		UNPACK_SQL_STATEMENT(value, keyword->v, value);
		if (EmitSourceForm_Value == form) {
			TMPL(tmpl_emit_source, table, value->v.string_literal, tableName, key->unique_id, keys_to_match, form);
		} else {
			assert(EmitSourceForm_UpdateKeyCol == form);
			/* In this case a linked list of "lp_column_list" structures needs to be passed in to "tmpl_emit_source". */
			LogicalPlan	*lp_update, *lp_column_list;

			lp_update = pplan->lp_select_query;
			assert(LP_UPDATE == lp_update->type);
			GET_LP(lp_column_list, lp_update, 1, LP_COLUMN_LIST);
			TMPL(tmpl_emit_source, table, value->v.string_literal, (char *)lp_column_list,		\
									key->unique_id, keys_to_match, form);
		}
	}
	return;
}
%{}
