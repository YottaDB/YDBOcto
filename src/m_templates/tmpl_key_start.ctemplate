{}%
/****************************************************************
 *								*
 * Copyright (c) 2019-2023 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include "octo_types.h"
#include "logical_plan.h"

#include "template_helpers.h"

TEMPLATE(tmpl_key_start, SqlKey *key) {
	char			*start = "\"\"";
	SqlOptionalKeyword	*keyword;
	SqlValue		*value;
	boolean_t		zwrite_needed = FALSE;

	assert((NULL != key->table) || (NULL == key->column));
	assert((NULL == key->table) || (NULL != key->column));
	if (NULL != key->column) {
		if (!key->emit_desc_order) {
			/* This key should have a FOR loop emitted in ascending order (most common case). */
			keyword = get_keyword(key->column, OPTIONAL_START);
			if (NULL != keyword) {
				UNPACK_SQL_STATEMENT(value, keyword->v, value);
				start = value->v.string_literal;
				zwrite_needed = FALSE;
			}
		} else {
			/* This key should have a FOR loop emitted in descending order (possible for example if ORDER BY
			 * optimization of YDBOcto#959 is enabled etc.).
			 */
			assert(NULL == get_keyword(key->column, OPTIONAL_END));
			keyword = get_keyword(key->column, OPTIONAL_ENDPOINT);
			if (NULL != keyword) {
				UNPACK_SQL_STATEMENT(value, keyword->v, value);
				start = value->v.string_literal;
				/* Emit "$zwrite()" ONLY if it's not the empty string
				 * Otherwise, we end up double quoting it in $ZWRITE.
				 * This logic is similar to that in "tmpl_emit_source.ctemplate" for OPTIONAL_ENDPOINT.
				 */
				zwrite_needed = (!((2 == strlen(start)) && (0 == strncmp("\"\"", start, 2))));
			}
		}
	}
	%{}SET {}%
	TMPL(tmpl_key, key);
	%{}={}%
	if (zwrite_needed) {
		%{}$zwrite({{start}}){}%
	} else {
		%{}{{ start }}{}%
	}
	return;
}
%{}
