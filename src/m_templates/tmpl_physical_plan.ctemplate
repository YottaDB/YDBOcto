{}%
/****************************************************************
 *								*
 * Copyright (c) 2019-2022 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include "physical_plan.h"
#include "template_helpers.h"

#define OCTO_AIM_XREF_COMMENT "xref for table %s column %s"
// Adding one below for null terminator as LIT_LEN does not include it.
#define OCTO_AIM_XREF_COMMENT_MAXSIZE (LIT_LEN(OCTO_AIM_XREF_COMMENT) + 1 /* null */ - 4 /* strlen("%s") * 2 */ +  OCTO_MAX_IDENT * 2)
TEMPLATE(tmpl_physical_plan, PhysicalPlan *pplan) {
	LogicalPlan		*lp_temp;
	unsigned int		cur_key;
	int			dot_count;
	SqlOptionalKeyword	*limit_keyword;

	// Entrypoint xrefPlan(cursorId) at the top of the routine
	// NB: We don't use cursorId anymore for xrefs in globals, but lvn
	// tables (such as pg_settings) use it
	%{}`n{{ pplan->plan_name }}(cursorId)`n{{ PLAN_LINE_START }}{}%

	/* Handle LP_INSERT_INTO/LP_DELETE_FROM/LP_UPDATE plans first as they are relatively easy to handle */
	if (IS_INSERT_INTO_PHYSICAL_PLAN(pplan)) {
		TMPL(tmpl_insert_into, pplan);
		return;
	}

	// The below initialization is needed for cross-reference plans and the regular plans
	assert(NULL == pplan->treat_key_as_null);
	pplan->treat_key_as_null = octo_cmalloc(memory_chunks, sizeof(boolean_t) * config->plan_id);

	if (IS_DELETE_FROM_PHYSICAL_PLAN(pplan)) {
		TMPL(tmpl_delete_from, pplan);
		return;
	}
	if (IS_UPDATE_PHYSICAL_PLAN(pplan)) {
		TMPL(tmpl_update_table, pplan);
		return;
	}
	assert(NULL != pplan->outputKey);
	// Check if there are any cross references that need to be built
	if (pplan->outputKey->is_cross_reference_key) {
		SqlTable		*table;
		SqlColumn		*column;
		int			num_key_cols;
		boolean_t		is_dollar_char;
		SqlOptionalKeyword	*keyword;
		SqlValue		*value;
		char			*tableName;
		char			*columnName;
		char			*source;
		char			*delim;
		char			*piece;
		char			comment[OCTO_AIM_XREF_COMMENT_MAXSIZE];
		int			aim_type;

		// Get table, column, table name, column name
		table = pplan->outputKey->table;
		column = pplan->outputKey->column;
		UNPACK_SQL_STATEMENT(value, pplan->outputKey->table->tableName, value);
		tableName = value->v.reference;
		UNPACK_SQL_STATEMENT (value, pplan->outputKey->column->columnName, value);
		columnName = value->v.reference;

		// Get Piece
		keyword = get_keyword(column, OPTIONAL_PIECE);
		if (NULL != keyword) {
			UNPACK_SQL_STATEMENT(value, keyword->v, value);
			piece = value->v.string_literal;
		} else {
			piece = NULL;
		}

		// Get Delimiter
		if (column->delim) {
			UNPACK_SQL_STATEMENT(value, column->delim, value);
			delim = value->v.string_literal;
			is_dollar_char = (DELIM_IS_DOLLAR_CHAR == delim[0] ? TRUE : FALSE);
			delim = &value->v.string_literal[1];
		} else if (table->delim) {
			UNPACK_SQL_STATEMENT(keyword, table->delim, keyword);
			UNPACK_SQL_STATEMENT(value, keyword->v, value);
			delim = value->v.string_literal;
			is_dollar_char = (DELIM_IS_DOLLAR_CHAR == delim[0] ? TRUE : FALSE);
			delim = &value->v.string_literal[1];
		} else {
			delim = COLUMN_DELIMITER;
			is_dollar_char = FALSE;
		}

		// Get source
		keyword = get_keyword(column, OPTIONAL_EXTRACT);
		if (NULL == keyword) {
			keyword = get_keyword(column, OPTIONAL_SOURCE);
			if (NULL == keyword) {
				UNPACK_SQL_STATEMENT(keyword, table->source, keyword);
			}
		}
		UNPACK_SQL_STATEMENT(value, keyword->v, value);
		source = value->v.string_literal;

		// Get AIM metadata type
		aim_type = 0; //Default
		if (table->aim_type) {
			UNPACK_SQL_STATEMENT(keyword, table->aim_type, keyword);
			UNPACK_SQL_STATEMENT(value, keyword->v, value);
			aim_type = atoi(value->v.string_literal);
		}

		// Determine number of primary key columns
		lp_temp = pplan->projection->v.lp_default.operand[1];
		num_key_cols = 0;
		while (NULL != lp_temp) {
			lp_temp = lp_temp->v.lp_default.operand[1];
			num_key_cols++;
		}

		// Create comment
		snprintf(comment, OCTO_AIM_XREF_COMMENT_MAXSIZE, OCTO_AIM_XREF_COMMENT, tableName, columnName);

		// Write M code for %YDBAIM
		// If Global (most Octo tables are except rare ones like pg_settings)
		if ('^' == pplan->outputKey->xref_prefix[0]) {
			%{}NEW base,subs DO baseSubs(.base,.subs){}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}; XREFDATA parameters: global, subscripts, delimiter, piece, nmonly (0 here), zpiece (always 0), omitfix (always 1),{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{};   stat (0 for now until AIM#42 is implemented), AIM Metadata Type (depending if the table has it specified or not){}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}NEW aimglobal SET aimglobal=$$XREFDATA^%%YDBAIM(base,.subs,{}%
			if (is_dollar_char) {
				%{}{{delim}}{}%
			} else {
				%{}"{{delim}}"{}%
			}
			if (NULL == piece) {
				%{},{}%
			} else {
				%{},{{piece}}{}%
			}
			%{},0,0,1,0,{{aim_type|%d}}){}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}; Now that xref building is complete, cleanup saved cancel related state information{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}KILL {{OCTOLIT_YDBOCTOCANCEL}}("{{tableName}}","{{columnName}}","{{OCTOLIT_AIM_SUB_CANCELXREF}}"){}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}; Put the comment in again, in case it's deleted after the metadata is created but before the xref is built{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}NEW comment SET comment="{{ comment }}"{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			if (NULL == piece) {
				%{}SET @aimglobal@("comment-0")=comment{}%
			} else {
				%{}SET @aimglobal@("comment-{{piece}}")=comment{}%
			}
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}; And mark that we are done with building xref so we won't try to build again{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}SET {{OCTOLIT_AIM_OCTO_CACHE}}("{{tableName}}","{{columnName}}","{{OCTOLIT_AIM_SUB_COMPLETED}}")=1{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}; This is redundant, but is here just in case the {{OCTOLIT_AIM_OCTO_CACHE}} global is deleted.{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}; Otherwise, %%ydboctoDiscard will have no way to figure out how to discard the AIM global.{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			if (NULL == piece) {
				%{}SET {{OCTOLIT_AIM_OCTO_CACHE}}("{{tableName}}","{{columnName}}","{{OCTOLIT_AIM_SUB_LOCATION}}")=$name(@aimglobal@(0)){}%
			} else {
				%{}SET {{OCTOLIT_AIM_OCTO_CACHE}}("{{tableName}}","{{columnName}}","{{OCTOLIT_AIM_SUB_LOCATION}}")=$name(@aimglobal@({{piece}})){}%
			}
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}QUIT{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{};{}%
			%{}`n{}%

			// Entry point xrefMetadata
			%{}`nxrefMetadata ; called by src/physical/emit_physical_plan.c after xref plan generation{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}NEW base,subs DO baseSubs(.base,.subs){}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}; XREFDATA parameters: global, subscripts, delimiter, piece, nmonly (1 here), zpiece (always 0), omitfix (always 1),{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{};   stat (0 for now until AIM#42 is implemented), AIM Metadata Type (depending if the table has it specified or not){}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}NEW aimglobal SET aimglobal=$$XREFDATA^%%YDBAIM(base,.subs{}%
			if (is_dollar_char) {
				%{},{{delim}}{}%
			} else {
				%{},"{{delim}}"{}%
			}
			if (NULL == piece) {
			%{},{}%
			} else {
			%{},{{piece}}{}%
			}
			%{},1,0,1,0,{{aim_type|%d}}){}%
			%{}`n{{ PLAN_LINE_START }}{}%
			if (NULL == piece) {
				%{}SET {{OCTOLIT_AIM_OCTO_CACHE}}("{{tableName}}","{{columnName}}","{{OCTOLIT_AIM_SUB_LOCATION}}")=$name(@aimglobal@(0)){}%
			} else {
				%{}SET {{OCTOLIT_AIM_OCTO_CACHE}}("{{tableName}}","{{columnName}}","{{OCTOLIT_AIM_SUB_LOCATION}}")=$name(@aimglobal@({{piece}})){}%
			}
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}SET {{OCTOLIT_AIM_OCTO_CACHE}}("{{tableName}}","{{columnName}}","{{OCTOLIT_AIM_SUB_COMPLETED}}")=0{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}; Cancelation information for _ydboctoCleanup.m{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}SET {{OCTOLIT_YDBOCTOCANCEL}}("{{tableName}}","{{columnName}}","{{OCTOLIT_AIM_SUB_CANCELXREF}}")=""{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}NEW comment SET comment="{{ comment }}"{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			if (NULL == piece) {
				%{}SET @aimglobal@("comment-0")=comment{}%
			} else {
				%{}SET @aimglobal@("comment-{{piece}}")=comment{}%
			}
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}QUIT{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{};{}%
			%{}`n{}%

			// Private entry point baseSubs
			%{}`nbaseSubs:(base,subs) ; Private entry point for use by other labels in this routine{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}NEW global SET global=$NAME({}%
			TMPL(tmpl_emit_source, table, source, tableName, pplan->outputKey->unique_id, MAX_KEY_COUNT, EmitSourceForm_AIM);
			%{}){}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}NEW subn for subn=1:1:$QLENGTH(global) DO{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}. SET subs(subn)=$QSUBSCRIPT(global,subn){}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}. IF subs(subn)'[":" SET subs(subn)=$ZWRITE(subs(subn)){}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}SET base=$QSUBSCRIPT(global,0){}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}QUIT{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{};{}%
			%{}`n{}%
		} else { // This is table kept in a local variable, e.g. pg_settings
			/* If this a plan for a cross reference, put safeguards in place (i.e. QUIT) to prevent building twice */
			%{}IF $DATA({{ pplan->outputKey->xref_prefix }}{{ config->global_names.raw_xref }}({{ PP_XREF_STATUS }},"{{ tableName }}","{{ columnName }}")) {}%
			%{}QUIT`n{{ PLAN_LINE_START }}{}%
			%{}; Store state information in case query is canceled in middle of xref building`n{{ PLAN_LINE_START }}{}%
			%{}; Actual cleanup happens in _ydboctoCleanup.m using this saved state information`n{{ PLAN_LINE_START }}{}%
			%{}SET {{OCTOLIT_YDBOCTOCANCEL}}("{{ tableName }}","{{ columnName }}","{{OCTOLIT_YDBOCTOCANCELLOCALXF}}")="{{ pplan->outputKey->xref_prefix }}{{ config->global_names.raw_xref }}(""{}%
			%{}{{ tableName }}"",""{{ columnName }}"")" ; Note: NULL value of {{ columnName }} is stored as ""{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}; Populate cross reference`n{{ PLAN_LINE_START }}{}%
			%{}DO populateXref`n{{ PLAN_LINE_START }}{}%
			%{}SET {{ pplan->outputKey->xref_prefix }}{{ config->global_names.raw_octo }}({{ PP_XREF_STATUS }},"{{ tableName }}","{{ columnName }}")=""{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}; Now that xref building is complete, cleanup saved cancel related state information`n{{ PLAN_LINE_START }}{}%
			%{}KILL {{OCTOLIT_YDBOCTOCANCEL}}`n{{ PLAN_LINE_START }}{}%
			%{}QUIT`n{}%
			// Generate the populateXref entryref here
			%{}`npopulateXref`n{{ PLAN_LINE_START }}{}%
			%{}; Build cross reference for {{ columnName }} column in {{ tableName }} table`n{{ PLAN_LINE_START }}{}%
			%{}KILL {{ pplan->outputKey->xref_prefix }}{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}"){}%
			%{}  ; Remove prior cross reference data (if any still exists)`n{{ PLAN_LINE_START }}{}%
			cur_key = 0;
			dot_count = 0;
			TMPL(tmpl_tablejoin, pplan, pplan->tablejoin, cur_key, FALSE, dot_count, tableName, columnName);
			%{}`n{{ PLAN_LINE_START }}QUIT{}%
		}
		return;
	}

	// Not a cross-reference plan
	if (LP_TABLE_VALUE == pplan->lp_select_query->type) {
		LogicalPlan	*lp_table_data, *lp_row_value;

		assert(NULL == pplan->dnf_prev);
		assert(NULL == pplan->dnf_next);
		assert(NULL == pplan->order_by);
		assert(!pplan->emit_duplication_check);
		assert(!pplan->distinct_values);
		assert(!pplan->distinct_values);
		%{}KILL {}%
		TMPL(tmpl_key, pplan->outputKey);
		GET_LP(lp_table_data, pplan->lp_select_query, 0, LP_TABLE_DATA);
		GET_LP(lp_row_value, lp_table_data, 1, LP_ROW_VALUE);
		dot_count = 1;
		do {
			LogicalPlan	*lp_column_list;
			boolean_t	stash_columns_in_keys;

			assert(LP_ROW_VALUE == lp_row_value->type);
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}IF $INCREMENT({}%
			TMPL(tmpl_key, pplan->outputKey);
			%{}) DO{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			GET_LP(lp_column_list, lp_row_value, 0, LP_COLUMN_LIST);
			stash_columns_in_keys = pplan->stash_columns_in_keys;
			TMPL(tmpl_column_list_combine, lp_column_list, pplan, "_", !stash_columns_in_keys, dot_count, FALSE);
			if (!stash_columns_in_keys) {
				%{}SET {}%
				TMPL(tmpl_key, pplan->outputKey); (*buffer_index)--;
				%{},{}%
				TMPL(tmpl_key, pplan->outputKey);
				%{}){}%
				%{}={{ PP_YDB_OCTO_EXPR }}{}%
			} else {
				%{}IF $INCREMENT({}%
				TMPL(tmpl_key, pplan->outputKey); (*buffer_index)--;
				%{},{}%
				%{}{{ PP_YDB_OCTO_EXPR }}{}%
				%{})){}%
			}
			lp_row_value = lp_row_value->v.lp_default.operand[1];
		} while (NULL != lp_row_value);
	} else {
		assert(LP_SELECT_QUERY == pplan->lp_select_query->type);
		/* New variables that are used in almost every plan. This is needed since deferred plans can be called from
		 * within another plan (see "XECUTE" in "GetScalarOrArray" entryref in "src/aux/_ydboctoplanhelpers.m")
		 * and we do not want say "%ydboctoexpr" variable in the deferred plan to affect the variable of the same
		 * name (but holding a completely different value) in the caller plan.
		 */
		%{}NEW {{ PP_YDB_OCTO_Z }},{{ PP_YDB_OCTO_EXPR }}{}%
		if (IS_GROUP_BY_PLAN(pplan)) {
			/* If this physical plan uses GROUP BY/HAVING/AGGREGATE FUNCTIONS, make sure to NEW PP_YDB_OCTO_G
			 * to avoid altering a variable of the same name in a caller physical plan corresponding to an
			 * outer query (#814)
			 */
			%{},{{ PP_YDB_OCTO_G }}{}%
		}
		limit_keyword = get_keyword_from_keywords(pplan->keywords, OPTIONAL_LIMIT);
		if ((NULL != limit_keyword) && (NULL == pplan->dnf_prev)) {
			%{} SET {{ PP_YDB_OCTO_ZLIMIT }}({{ pplan->outputKey->unique_id|%d }})=0{}%
		}
		if (NULL == pplan->dnf_prev) {
			%{} KILL {}%
			TMPL(tmpl_key, pplan->outputKey);
		}
		%{}`n{{ PLAN_LINE_START }}{}% // Whitespace for MUMPS
		cur_key = 0;
		dot_count = 0;
		assert(FALSE == pplan->tablejoin_body_group_by_done);
		TMPL(tmpl_tablejoin, pplan, pplan->tablejoin, cur_key, FALSE, dot_count, NULL, NULL);
		/* If this plan has GROUP BY or HAVING or Aggregate function usage, "tmpl_tablejoin" would not have generated
		 * output keys in the usual format. It would have generated GROUP BY related subscript lvn tree that needs
		 * to be converted into an output key. Do that here.
		 */
		if (IS_GROUP_BY_PLAN(pplan) && (NULL == pplan->dnf_next)) {
			assert(FALSE == pplan->tablejoin_body_group_by_done);
			pplan->tablejoin_body_group_by_done = TRUE;
			TMPL(tmpl_group_by, pplan, dot_count);
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}KILL {}%
			TMPL(tmpl_key, pplan->outputKey); (*buffer_index)--;
			%{},{{ PP_GROUP_BY }}){}%
		}
		// If this expression had an order by, we now need to go back and make the ordering uniform
		// If we have a lot of plans each of which have the same output key and order by, then do this step
		// only for the last plan in that set.
		if ((NULL != pplan->order_by) && (NULL == pplan->dnf_next)) {
			char			*direction;
			LogicalPlan		*order_by;
			int			num_cols;

			order_by = pplan->order_by;
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}NEW {{ PP_YDB_OCTO_I }}  SET {{ PP_YDB_OCTO_I }}(0)=1`n{{ PLAN_LINE_START }}{}%
			assert(NULL != pplan->outputKey);
			// Determine how many columns are specified in ORDER BY. Need to generate M code accordingly.
			// The below code is a simplified version of that in "tmpl_column_list_combine.ctemplate".
			num_cols = 0;
			do {
				boolean_t	is_desc;

				assert(LP_ORDER_BY == order_by->type);
				TMPL(tmpl_print_dots, num_cols);
				num_cols++;
				%{}SET {{ PP_YDB_OCTO_I }}({{ num_cols|%d }})="" {}%
				is_desc = (OPTIONAL_DESC == order_by->extra_detail.lp_order_by.direction);
				direction = (is_desc ? "-1" : "1");
				/* In case of ASCENDING order, we want an empty string subscript (if any) to show up first
				 * whereas for DESCENDING order, we want it to show up last. Handle it accordingly below.
				 */
				if (is_desc) {
					%{}FOR  SET {{ PP_YDB_OCTO_I }}({{ num_cols|%d }})=$ORDER({}%
					TMPL(tmpl_key, pplan->outputKey); (*buffer_index)--;
					TMPL(tmpl_order_by_key, num_cols);
					%{}),{{ direction }})  QUIT:$DATA({}%
					TMPL(tmpl_key, pplan->outputKey); (*buffer_index)--;
					TMPL(tmpl_order_by_key, num_cols);
					%{}))=0  DO  QUIT:({{ PP_YDB_OCTO_I }}({{ num_cols|%d }})=""){}%
				} else {
					%{}FOR  DO:$DATA({}%
					TMPL(tmpl_key, pplan->outputKey); (*buffer_index)--;
					TMPL(tmpl_order_by_key, num_cols);
					%{}))  SET {{ PP_YDB_OCTO_I }}({{ num_cols|%d }})=$ORDER({}%
					TMPL(tmpl_key, pplan->outputKey); (*buffer_index)--;
					TMPL(tmpl_order_by_key, num_cols);
					%{}),{{ direction }})  QUIT:({{ PP_YDB_OCTO_I }}({{ num_cols|%d }})=""){}%
				}
				if (NULL != limit_keyword) {
					TMPL(tmpl_limit_check, limit_keyword, "!", "<%ydboctoi(0)");
				}
				%{}`n{{ PLAN_LINE_START }}{}%
				order_by = order_by->v.lp_default.operand[1];
			} while (NULL != order_by);
			TMPL(tmpl_print_dots, num_cols);
			num_cols++;
			%{}SET {{ PP_YDB_OCTO_I }}({{ num_cols|%d }})="" {}%
			%{}FOR  SET {{ PP_YDB_OCTO_I }}({{ num_cols|%d }})=$ORDER({}%
			TMPL(tmpl_key, pplan->outputKey); (*buffer_index)--;
			TMPL(tmpl_order_by_key, num_cols);
			%{})) QUIT:({{ PP_YDB_OCTO_I }}({{ num_cols|%d }})=""){}%
			if (NULL != limit_keyword) {
				TMPL(tmpl_limit_check, limit_keyword, "!", "<%ydboctoi(0)");
			}
			%{}  DO`n{{ PLAN_LINE_START }}{}%
			TMPL(tmpl_print_dots, num_cols);
			if (!pplan->stash_columns_in_keys) {
				%{}SET {}%
				TMPL(tmpl_key, pplan->outputKey); (*buffer_index)--;
				%{},{{ PP_YDB_OCTO_I }}(0))={}%
				TMPL(tmpl_key, pplan->outputKey); (*buffer_index)--;
				TMPL(tmpl_order_by_key, num_cols);
			} else {
				/* Plan is part of a sub-query with an ORDER BY. Finish actual stashing of keys in columns
				 * that was deferred in "tmpl_populate_output_key".
				 */
				%{}IF $INCREMENT({}%
				TMPL(tmpl_key, pplan->outputKey); (*buffer_index)--;
				%{},{}%
				TMPL(tmpl_key, pplan->outputKey); (*buffer_index)--;
				TMPL(tmpl_order_by_key, num_cols);
				%{})){}%
			}
			%{})`n{{ PLAN_LINE_START }}{}%
			TMPL(tmpl_print_dots, num_cols);
			%{}IF $INCREMENT({{ PP_YDB_OCTO_I }}(0)){}%
			%{}`n{{ PLAN_LINE_START }}{}%
			%{}KILL {}%
			TMPL(tmpl_key, pplan->outputKey); (*buffer_index)--;
			%{},{{ PP_ORDER_BY }}){}%
			%{}`n{{ PLAN_LINE_START }}SET {}%
			TMPL(tmpl_key, pplan->outputKey); (*buffer_index)--;
			%{})={{ PP_YDB_OCTO_I }}(0)-1{}%
		}
		if (NULL == pplan->dnf_next) {
			if (pplan->emit_duplication_check) {
				%{}`n{{ PLAN_LINE_START }}{}%
				%{}KILL {{ PP_YDB_OCTO_ZDUPLICATE }}({{ pplan->outputKey->unique_id|%d }}){}%
			}
			if (NULL != limit_keyword) {
				%{}`n{{ PLAN_LINE_START }}{}%
				%{}KILL {{ PP_YDB_OCTO_ZLIMIT }}({{ pplan->outputKey->unique_id|%d }}){}%
			}
			if (pplan->distinct_values) {
				%{}`n{{ PLAN_LINE_START }}{}%
				%{}KILL {{ PP_YDB_OCTO_ZDISTINCT }}({{ pplan->outputKey->unique_id|%d }}){}%
			}
		}
	}
	%{}`n{{ PLAN_LINE_START }}{}%
	%{}QUIT{}%
	return;
}
%{}
