{}%
/****************************************************************
 *								*
 * Copyright (c) 2021-2022 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/
#include "logical_plan.h"
#include "template_helpers.h"
/* This is helper function called by tmpl_column_reference_common.ctemplate to emit M code to fetch grouped column reference data
 * from the pplan.
 * Output
 * ------
 * "*done" is set to TRUE if all the needed work to generate M code for the column reference got done here and caller doesn't need
 * to do anything more. It is set to FALSE otherwise in which case caller will have to do additional work to generate appropriate
 * M code.
 */
TEMPLATE(tmpl_print_group_by_column_reference, PhysicalPlan *pplan, SqlColumnAlias *column_alias, boolean_t in_where_clause,
	 int unique_id, int dot_count, boolean_t *done) {
	if (pplan->tablejoin_body_group_by_done) {
		boolean_t	is_col_cur_pplan;
		// Check if the column's unique_id is part of pplan
		is_col_cur_pplan = is_unique_id_a_key_of_pplan(pplan, unique_id);
		if (is_col_cur_pplan) {
			if (column_alias->group_by_column_number) {
				/* This column reference was specified in the GROUP BY clause and GROUP BY related processing
				 * already happened and wrote the records (based on the FROM/WHERE clauses) into the lvn subtree
				 * under PP_GROUP_BY. Now the same column is being referenced in the SELECT column list.
				 * Retrieve the column value from the lvn. That is easily done using PP_YDB_OCTO_G since that
				 * lvn already holds the needed value of the entire GROUP BY expression. We then retrieve the
				 * Nth piece of that expression assuming this column reference is the Nth column in the GROUP BY.
				 */
				if (dot_count) {
					TMPL(tmpl_print_dots, dot_count);
					%{}SET {{ PP_YDB_OCTO_EXPR }}={}%
				}
				%{}$$mval2str^%%ydboctoplanhelpers({}%
				%{}$$mvalPiece^%%ydboctoplanhelpers({}%
				%{}{{ PP_YDB_OCTO_G }},{{ column_alias->group_by_column_number|%d }}{}%
				%{}){}%	/* closing paren for mvalPiece call above */
				%{}){}% /* closing paren for mval2str call above */
				if (dot_count) {
					%{}`n{{ PLAN_LINE_START }}{}%
				}
				*done = TRUE;
				return;
			}
		}
	}
	if (!in_where_clause) {
		pplan = pplan->parent_plan;
		/* We cannot rely on `tablejoin_body_group_by_done` of the parent pplan because parent pplan has already been
		 * emitted and the value of `tablejoin_body_group_by_done` is no longer valid. Following query fails if we rely
		 * on its value.
		 * Example:
		 * 1.
		 * `SELECT ALL first_name FROM customers c GROUP BY first_name HAVING EXISTS (SELECT 1 FROM customers n1 GROUP BY
		 *  n1.first_name having EXISTS(SELECT 1 from orders n2 group by n2.order_id having
		 *  count((c.first_name||n1.first_name)=order_amount)=1));`
		 * 2.
		 * `SELECT ALL first_name FROM customers c GROUP BY first_name HAVING EXISTS (SELECT 1 FROM customers n1 GROUP BY
		 *  n1.first_name having EXISTS(SELECT 1 from orders n2 group by n2.order_id having
		 *  ((c.first_name=n1.first_name))));`
		 * 3.
		 * `SELECT ALL first_name FROM customers c GROUP BY first_name HAVING EXISTS (SELECT 1 FROM customers n1 WHERE
		 *  EXISTS(SELECT 1 from orders n2 group by n2.order_id having ((c.first_name=n1.first_name)))
		 *         GROUP BY n1.first_name);`
		 * In the 1st query, the pplan corresponding to the first inner query is placed after the second inner query's
		 * pplan in the final pplan ordering done in emit_physical_plan(), because of this when the second inner
		 * query's pplan is being emitted we cannot rely on `tablejoin_body_group_by_done` of the first inner query's
		 * pplan as its not yet emitted. Even otherwise, consider the 3rd query, lets say that the second inner query is
		 * in the WHERE clause of the first inner query. It is valid in such a case to have an aggregate in second inner
		 * query with a column of the first as long as there is atleast one column in the same aggregate belonging to the
		 * second inner query. In this case let us assume there is also a GROUP BY present for the first inner query. The
		 * inner query column in the aggregate of second inner query will have its `group_by_column_num` set. If we relied
		 * just on the `tablejoin_body_group_by_done` value then we would incorrectly fetch the column data from GROUP BY.
		 * Because of this and the fact that qualify_statement() strictly verifies validity of such grouping
		 * references we safely rely upon `in_where_clause` value and `group_by_column_num` value of a column alias to
		 * correctly identify the stage in which the query of the column_alias is in when its being referred to, thus
		 * ignoring `tablejoin_body_group_by_done` value in the below code.
		 */
		if ((NULL != pplan) && (column_alias->group_by_column_number)) {
			PhysicalPlan    *matching_pplan;
			SqlKey          *matching_key;
			matching_pplan = get_physical_plan_and_key_for_unique_id(pplan, unique_id, &matching_key);
			if (NULL != matching_pplan) {
				assert(matching_pplan->aggregate_function_or_group_by_or_having_specified);
				if (dot_count) {
					TMPL(tmpl_print_dots, dot_count);
					%{}SET {{ PP_YDB_OCTO_EXPR }}={}%
				}
				%{}$$mval2str^%%ydboctoplanhelpers({}%
				%{}$$mvalPiece^%%ydboctoplanhelpers({}%
				TMPL(tmpl_key, matching_pplan->outputKey); (*buffer_index)--;
				%{},{{ PP_GROUP_BY }}),{}%
				%{}{{ column_alias->group_by_column_number|%d }}{}%
				%{}){}% // closing paren for mvalPiece call above
				%{}){}% // closing paren for mval2str call above
				if (dot_count) {
					%{}`n{{ PLAN_LINE_START }}{}%
				}
				*done = TRUE;
				return;
			}
		}
	}
	*done = FALSE;
	return;
}
%{}
