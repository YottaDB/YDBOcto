{}%
/****************************************************************
 *								*
 * Copyright (c) 2019-2021 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include "physical_plan.h"
#include "template_helpers.h"

TEMPLATE(tmpl_tablejoin, PhysicalPlan *pplan, LogicalPlan *tablejoin, unsigned int cur_key, boolean_t right_join_second_half,
								int dot_count, char *tableName, char *columnName) {
	SqlKey			*key, *save_key, *fixed_xref_key;
	unsigned int		total_keys, key_start;
	int			left_table_id, right_table_id, this_table_id;
	enum SqlJoinType	this_join_type, next_join_type;
	SqlOptionalKeyword	*limit_keyword;
	LogicalPlan		*right_tablejoin;
	boolean_t		nested_call, this_join_is_left_join;

	total_keys = pplan->total_iter_keys;
	assert(((NULL != tablejoin) && (LP_TABLE_JOIN == tablejoin->type)) || ((NULL == tablejoin) && (cur_key == total_keys)));
	assert(cur_key < total_keys);
	key = pplan->iterKeys[cur_key];
	left_table_id = key->unique_id;
	nested_call = FALSE;
	this_join_type = ((NULL == tablejoin) ? NO_JOIN
						: tablejoin->extra_detail.lp_table_join.cur_join_type);
	this_join_is_left_join = ((LEFT_JOIN == this_join_type) || ((FULL_JOIN == this_join_type) && !right_join_second_half));
	key_start = cur_key;
	assert(((RIGHT_JOIN != this_join_type) && (FULL_JOIN != this_join_type)) || cur_key);
	if (pplan->tablejoin == tablejoin) {
		unsigned int	save_cur_key;
		int		in_value_list_id;

		save_cur_key = cur_key;
		in_value_list_id = 1;	/* assign local variable name to use to store list of values (under a subtree)
					 * corresponding to fixed keys (e.g. %ydboctoin1, %ydboctoin2 etc.).
					 */
		/* This is the outermost "tmpl_tablejoin" invocation. See if there are any IN operator usages which have
		 * a key on the LHS that is fixed to a list of values on the RHS. If so, generate M local variables to store
		 * that list before any of the FOR loops for scanning any key begins. This way we do this M local variable
		 * initialization only once.
		 */
		for ( ; cur_key < total_keys; cur_key++) {
			LogicalPlan	*list;

			key = pplan->iterKeys[cur_key];
			assert(0 == key->in_value_list_id);
			assert(in_value_list_id != key->in_value_list_id);	/* hence "in_value_list_id" start at 1 above */
			list = key->fixed_to_value;
			if (NULL == list) {
				continue;
			}
			if (LP_COLUMN_LIST != list->type) {
				continue;
			}
			TMPL(tmpl_print_dots, dot_count);
			%{}NEW {{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			key->in_value_list_id = in_value_list_id;
			do {
				LogicalPlan	*value;

				/* Below assert is ensured by "lp_optimize_where_multi_equals_ands_helper()".
				 * Or else it would not have decided to fix the key.
				 */
				value = list->v.lp_default.operand[0];
				assert(LP_VALUE == value->type);
				TMPL(tmpl_print_expression_assignment, value, pplan, dot_count, 0);
				TMPL(tmpl_print_dots, dot_count);
				%{}SET {{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}({{ PP_YDB_OCTO_EXPR }})=""{}%
				%{}`n{{ PLAN_LINE_START }}{}%
				list = list->v.lp_default.operand[1];
			} while (NULL != list);
			in_value_list_id++;
		}
		cur_key = save_cur_key;
	}
	if (NULL != tablejoin) {
		LogicalPlan	*left_tablejoin;
		left_tablejoin = tablejoin->v.lp_default.operand[0];
		switch(left_tablejoin->type) {
		case LP_SELECT_QUERY:
		case LP_SET_OPERATION:
		case LP_TABLE_VALUE:
			/* If a table in the FROM/JOIN list is a sub-query that corresponds to a deferred plan,
			 * generate code to invoke it here (before we generate code to use the results of the plan
			 * in the next "for" loop). If it does not correspond to a deferred plan, we would have
			 * already generated M code to invoke it so no need to do anything in that case.
			 */
			TMPL(tmpl_invoke_deferred_plan, InvokeDeferredPlan_TABLEJOIN, left_tablejoin, dot_count);
			break;
		default:
			break;
		}
	}
	fixed_xref_key = NULL;
	for ( ; cur_key < total_keys; cur_key++) {
		// For each key, output the key start, a FOR loop, QUIT, and increment
		key = pplan->iterKeys[cur_key];
		if (key->unique_id != left_table_id) {
			/* We are done with all key columns in this table; recurse to move on to next table/key */
			nested_call = TRUE;
			break;
		}
		if (this_join_is_left_join && pplan->treat_key_as_null[key->unique_id]) {
			continue;
		}
		// If this plan has no ORDER BY or GROUP BY, then any LIMIT usage can be safely applied right away.
		// Otherwise, we need to apply the LIMIT after the ORDER BY processing finally happens in "tmpl_physical_plan"
		//	or GROUP BY processing finally happens in "tmpl_group_by"
		limit_keyword = ((NULL == pplan->order_by) && !IS_GROUP_BY_PLAN(pplan))
					? get_keyword_from_keywords(pplan->keywords, OPTIONAL_LIMIT)
					: NULL;
		/* If this is the second half of the right join, then treat all keys as non-fixed.
		 * And do not include cross-reference keys. Only primary-keys. This is because we want
		 * to include ALL rows from the right table for the RIGHT JOIN.
		 */
		if ((NULL != key->fixed_to_value) && !right_join_second_half) {
			LogicalPlan	*fixed_to_value;

			fixed_to_value = key->fixed_to_value;
			if ((LP_VALUE != fixed_to_value->type) || (NUL_VALUE != fixed_to_value->v.lp_value.value->type)) {
				int		in_value_list_id;
				boolean_t	is_key_column;

				/* Key is fixed to a value (= operator) or list of values (IN operator) */
				assert((LP_COLUMN_LIST != fixed_to_value->type) || (0 < key->in_value_list_id));
				assert((LP_COLUMN_LIST == fixed_to_value->type) || (0 == key->in_value_list_id));
				in_value_list_id = key->in_value_list_id;
				assert(0 <= in_value_list_id);
				if (0 < in_value_list_id) {
					/* This is a list of values on the right hand side of an IN operator */
					TMPL(tmpl_print_dots, dot_count);
					%{}SET {{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}="" FOR  {}%
					%{}DO:$DATA({{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}({{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}))  {}%
					%{}SET {{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}={}%
					%{}$ORDER({{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}({{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }})) {}%
					%{}QUIT:""={{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}{}%
					%{}`n{{ PLAN_LINE_START }}{}%
					dot_count++;
				}
				if (0 == in_value_list_id) {
					TMPL(tmpl_print_expression_assignment, fixed_to_value, pplan, dot_count, 0);
				} else {
					TMPL(tmpl_print_dots, dot_count);
					%{}SET {{ PP_YDB_OCTO_EXPR }}={{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}{}%
					%{}`n{{ PLAN_LINE_START }}{}%
				}
				TMPL(tmpl_print_dots, dot_count);
				%{}SET {}%
				TMPL(tmpl_key, key);
				%{}={{ PP_YDB_OCTO_EXPR }}{}%
				/* The "tmpl_key_source" function call below would result in an M gvn.
				 * If the `fixed_to_value` is `$ZYSQLNULL`, we have to skip doing the gvn reference
				 * with `$ZYSQLNULL` as a subscript (as it causes a ZYSQLNULLNOTVALID error currently).
				 * Hence the need for a `$ZYISSQLNULL` check below (in the generated M code).
				 *
				 * But we do not want to do this in case the key is fixed to a IS_NULL_LITERAL value type.
				 * This is because in that case, we will generate the empty string instead of $ZYSQLNULL
				 * in "tmpl_key_source" and "tmpl_key_advance" thereby avoiding ZYSQLNULLNOTVALID errors.
				 * And having a `$ZYISSQLNULL` check in this case would skip the entire block of code
				 * which is not right (as we do want to loop through the xref). Hence the "IS_NULL_FIXED_VALUE"
				 * macro check below.
				 *
				 * Finally, even if the key is fixed to a IS_NULL_LITERAL value type, if the key corresponds
				 * to a key column, then we want to skip doing the gvn reference as the primary key can never
				 * take on a NULL value (even if the xref global does contain "" subscripts for the key columns).
				 * Hence the "is_key_column" check below.
				 */
				is_key_column = ((NULL != key->column) && IS_KEY_COLUMN(key->column));
				if (is_key_column || !IS_NULL_FIXED_VALUE(key->fixed_to_value) ) {
					%{} IF '$ZYISSQLNULL({}%
					TMPL(tmpl_key, key);
					%{}){}%
				}
				%{} IF $DATA({}%
				TMPL(tmpl_key_source, pplan, key, EmitSourceForm_Value);
				if (key->is_cross_reference_key) {
					fixed_xref_key = key;	/* Note down this key for later "tmpl_key_advance" call */
				}
				%{}){}%
				if (NULL != limit_keyword) {
					TMPL(tmpl_limit_check, limit_keyword, "&", ">" PP_YDB_OCTO_ZLIMIT);
						/* Note: literal concatenation in last parameter above */
					(*buffer_index)--;	/* Remove the trailing ")" from "tmpl_limit_check" call above */
					%{}({{ pplan->outputKey->unique_id|%d }}){}%	/* Add subscript based on output key */
					%{}){}%	/* Add back the trailing ")" from "tmpl_limit_check" call above */
				}
			} else {
				/* If fixed_to_value is NULL, then there is no output from this key fix.
				 * So skip entire DO block (that will get generated later). Generate M code accordingly.
				 */
				TMPL(tmpl_print_dots, dot_count);
				%{}; Note: The below IF 0 check skips the entire DO block and is intentional{}%
				%{}`n{{ PLAN_LINE_START }}{}%
				TMPL(tmpl_print_dots, dot_count);
				%{}; as it is not straightforward to skip generating the M code that follows{}%
				%{}`n{{ PLAN_LINE_START }}{}%
				TMPL(tmpl_print_dots, dot_count);
				%{}IF 0{}%
			}
			%{} DO{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			dot_count++;
			continue;
		}
		if (key->is_cross_reference_key && right_join_second_half) {
			continue;
		}
		if (right_join_second_half && (NULL != key->cross_reference_output_key)) {
			/* Temporarily save cross-reference output key and clear it to generate correct key loop
			 * for second half of the right join.
			 */
			save_key = key->cross_reference_output_key;
			key->cross_reference_output_key = NULL;
		} else {
			save_key = NULL;
		}
		TMPL(tmpl_print_dots, dot_count);
		TMPL(tmpl_key_start, key);
		%{}`n{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);
		/* If STARTINCLUDE was specified for this key column, include the starting value also in the FOR loop.
		 * Do this only if there is a table associated with the key (nested queries correspond to temporary tables
		 * and so should skip this).
		 */
		if (NULL != key->table) {
			SqlOptionalKeyword	*keyword;

			keyword = (key->column ? get_keyword(key->column, OPTIONAL_STARTINCLUDE) : NULL);
			if (NULL != keyword) {
				%{}DO:$DATA({}%
				if (NULL == fixed_xref_key) {
					TMPL(tmpl_key_source, pplan, key, EmitSourceForm_Value);
				} else {
					TMPL(tmpl_key_advance, pplan, key);
				}
				%{})  {}%
			}
		}
		%{}FOR  SET {}%
		TMPL(tmpl_key, key);
		%{}=$ORDER({}%
		TMPL(tmpl_key_advance, pplan, key);
		%{}) QUIT:({}%
		TMPL(tmpl_key_end, key);
		%{}){}%
		if (NULL != limit_keyword) {
			TMPL(tmpl_limit_check, limit_keyword, "!", "'>" PP_YDB_OCTO_ZLIMIT);
						/* Note: literal concatenation in last parameter above */
			(*buffer_index)--;	/* Remove the trailing ")" from `tmpl_limit_check` call */
			%{}({{ pplan->outputKey->unique_id|%d }}){}%	/* Add subscript based on output key */
			%{}){}%	/* Add back the trailing ")" from `tmpl_limit_check` call above */
		}
		%{}  DO`n{{ PLAN_LINE_START }}{}%
		if (NULL != save_key) {
			key->cross_reference_output_key = save_key;	/* Restore cross-reference output key */
		}
		dot_count++;
	}
	/* If this is a JOIN with an ON condition, generate an IF statement in M for doing the check */
	if (!IS_OUTER_JOIN(this_join_type)) {
		/* This is not an OUTER JOIN. In that case, generate the IF condition for the ON clause (if one exists).
		 * For an OUTER JOIN, we have later code that generates this if certain conditions are satisfied.
		 */
		TMPL(tmpl_tablejoin_on_condition, tablejoin, pplan, &dot_count);
	}
	if (this_join_is_left_join && !pplan->treat_key_as_null[left_table_id]) {
		TMPL(tmpl_tablejoin_on_condition, tablejoin, pplan, &dot_count);
		TMPL(tmpl_print_dots, dot_count);
		%{}SET {{ PP_YDB_OCTO_Z }}({{ key_start|%d }})=1{}%
		%{}`n{{ PLAN_LINE_START }}{}%
	}
	if ((RIGHT_JOIN == this_join_type) || (FULL_JOIN == this_join_type)) {
		if (!right_join_second_half) {
			if (!this_join_is_left_join) {
				TMPL(tmpl_tablejoin_on_condition, tablejoin, pplan, &dot_count);
			}
			/* Generate an M line to indicate a matched right table row ONLY if the current invocation of
			 * `tmpl_tablejoin` is not from the NO_MATCHING_RIGHT_TABLE_ROWS (search for occurrence below)
			 * code block. In that code block, we set `pplan->treat_key_as_null[table_id]` to TRUE and we
			 * passed FALSE as `this_join_is_left_join`. So that is what we check for below.
			 */
			if (!this_join_is_left_join || !pplan->treat_key_as_null[left_table_id]) {
				TMPL(tmpl_print_dots, dot_count);
				%{}SET {{ PP_YDB_OCTO_Z }}({}%
				TMPL(tmpl_rightjoin_key, pplan, key_start, cur_key);
				%{})=""`n{{ PLAN_LINE_START }}{}%
			}
		} else {
			/* Generate code for second half of RIGHT JOIN */
			/* First, if there are any cross-reference keys, generate code to set them based off the primary key.
			 * This is needed since we based the for loop for the second half of the RIGHT JOIN on the primary key
			 * only and so later references to the column corresponding to any cross-reference key for the same
			 * table need the cross-reference key value set properly (an optimization in "tmpl_column_reference"
			 * to generate the key instead of the column value relies on this).
			 */
			TMPL(tmpl_print_dots, dot_count);
			%{}DO:'$DATA({{ PP_YDB_OCTO_Z }}({}%
			TMPL(tmpl_rightjoin_key, pplan, key_start, cur_key);
			%{}))`n{{ PLAN_LINE_START }}{}%
			dot_count++;
		}
	}
	if (!nested_call) {
		/* Check if this is an UPDATE query and if at least one primary key column was specified in the SET clause.
		 * If so, we need to generate extra code.
		 */
		if (IS_UPDATE_PHYSICAL_PLAN(pplan) && (0 < get_num_key_cols_in_set_clause(pplan))) {
			/* Check if the primary key(s) corresponding to the current row was(were) created as part of a
			 * prior iteration of the current UPDATE query. If so, skip processing this row as it did not
			 * exist at the time the UPDATE query started.
			 */
			TMPL(tmpl_print_dots, dot_count);
			%{}DO:'$DATA({}%
			TMPL(tmpl_update_key_source, pplan, TRUE);
			%{}`n{{ PLAN_LINE_START }}{}%
			dot_count++;
		}
		TMPL(tmpl_tablejoin_body, pplan, dot_count, tableName, columnName);
	} else {
		assert(cur_key < total_keys);
		right_tablejoin = tablejoin->v.lp_default.operand[1];
		next_join_type = right_tablejoin->extra_detail.lp_table_join.cur_join_type;
		// Treat a FULL_JOIN as a LEFT_JOIN at this stage. It will be treated as a RIGHT JOIN at a later stage.
		if (FULL_JOIN == next_join_type) {
			next_join_type = LEFT_JOIN;
		}
		if (LEFT_JOIN == next_join_type) {
			TMPL(tmpl_print_dots, dot_count);
			%{}SET {{ PP_YDB_OCTO_Z }}({{ cur_key|%d }})=0`n{{ PLAN_LINE_START }}{}%
		}
		TMPL(tmpl_tablejoin, pplan, right_tablejoin, cur_key, FALSE, dot_count, tableName, columnName);
		if (LEFT_JOIN == next_join_type) {
			/* Generate M code to include rows from the left table where there is no matching right table rows
			 * (NO_MATCHING_RIGHT_TABLE_ROWS code block).
			 */
			assert(NULL != right_tablejoin->extra_detail.lp_table_join.join_on_condition);
			%{}`n{{ PLAN_LINE_START }}{}%
			TMPL(tmpl_print_dots, dot_count);
			%{}DO:0={{ PP_YDB_OCTO_Z }}({{ cur_key|%d }})`n{{ PLAN_LINE_START }}{}%
			dot_count++;
			/* Treat all keys in the right table as NULL and invoke nested joins (if needed) */
			key = pplan->iterKeys[cur_key];
			right_table_id = key->unique_id;
			pplan->treat_key_as_null[right_table_id] = TRUE;
			TMPL(tmpl_tablejoin, pplan, right_tablejoin, cur_key, FALSE, dot_count, tableName, columnName);
			/* Undo NULL-treating of keys in right table */
			assert(pplan->treat_key_as_null[right_table_id]);
			pplan->treat_key_as_null[right_table_id] = FALSE;
		}
	}
	if (pplan->tablejoin == tablejoin) {
		/* This is the outermost "tmpl_tablejoin" invocation. Do additional invocation for RIGHT JOINs (if any)
		 * to include rows from the right table where there is no matching left table rows.
		 * We do that by scanning the linked list of tablejoins and finding the first tablejoin that is a RIGHT JOIN,
		 * setting all keys for prior tablejoins to be NULL and invoking "tmpl_tablejoin". And redoing this for
		 * every other RIGHT JOIN until the end of the tablejoin linked list is reached.
		 */
		LogicalPlan	*this_table_join;
		int		num_tables = 0, cur_tables;
		boolean_t	key_nullified;

		this_table_join = tablejoin;
		cur_key = 0;
		key_nullified = FALSE;
		dot_count = 0;
		do {
			assert(LP_TABLE_JOIN == this_table_join->type);
			this_join_type = this_table_join->extra_detail.lp_table_join.cur_join_type;
			if ((RIGHT_JOIN == this_join_type) || (FULL_JOIN == this_join_type)) {
				int		right_join_table_id;
				unsigned int	right_join_cur_key;

				/* Set keys of all tables till now to NULL */
				assert(cur_key < total_keys);
				cur_tables = 0;
				do {
					this_table_id = pplan->iterKeys[cur_key]->unique_id;
					if (!pplan->treat_key_as_null[this_table_id]) {
						if (cur_tables == num_tables) {
							break;
						}
						pplan->treat_key_as_null[this_table_id] = TRUE;
						key_nullified = TRUE;
						cur_tables++;
					}
				} while (++cur_key < total_keys);
				assert(cur_key);
				%{}`n{{ PLAN_LINE_START }}{}%
				/* Assert that this is not the outermost "tmpl_tablejoin" invocation */
				assert(this_table_join != pplan->tablejoin);
				right_join_table_id = this_table_id;
				for (right_join_cur_key = cur_key; right_join_cur_key < total_keys; right_join_cur_key++) {
					key = pplan->iterKeys[right_join_cur_key];
					if (right_join_table_id == key->unique_id) {
						if (key->is_cross_reference_key) {
							key->skip_column_reference_optimization = TRUE;
						}
					} else {
						break;
					}
				}
				TMPL(tmpl_tablejoin, pplan, this_table_join, cur_key, TRUE, dot_count, tableName, columnName);
				/* No need to undo "key->skip_column_reference_optimization" as it is not used after here */
				num_tables = 1;	// include this table as first one for next round of RIGHT JOIN key nullification
			} else {
				num_tables++;
			}
			this_table_join = this_table_join->v.lp_default.operand[1];
		} while (NULL != this_table_join);
		if (key_nullified) {
			/* We nullified at least one key above for a RIGHT JOIN. Undo all of those. */
			for (cur_key = 0; cur_key < total_keys; cur_key++)
			{
				this_table_id = pplan->iterKeys[cur_key]->unique_id;
				pplan->treat_key_as_null[this_table_id] = FALSE;
			}
		}
	}
	return;
}
%{}
