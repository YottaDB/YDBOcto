{}%
/****************************************************************
 *								*
 * Copyright (c) 2019-2023 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include "physical_plan.h"
#include "template_helpers.h"

TEMPLATE(tmpl_tablejoin, PhysicalPlan *pplan, LogicalPlan *tablejoin, unsigned int cur_key, boolean_t right_join_second_half,
								int dot_count, char *tableName, char *columnName) {
	SqlKey			*key, *save_key, *fixed_xref_key;
	unsigned int		total_keys, key_start;
	int			left_table_id;
	enum SqlJoinType	this_join_type, next_join_type;
	SqlOptionalKeyword	*limit_keyword;
	LogicalPlan		*right_tablejoin;
	boolean_t		nested_call, this_join_is_left_join;

	total_keys = pplan->total_iter_keys;
	assert(((NULL != tablejoin) && (LP_TABLE_JOIN == tablejoin->type)) || ((NULL == tablejoin) && (cur_key == total_keys)));
	assert(cur_key < total_keys);
	key = pplan->iterKeys[cur_key];
	left_table_id = key->unique_id;
	nested_call = FALSE;
	this_join_type = ((NULL == tablejoin) ? NO_JOIN
						: tablejoin->extra_detail.lp_table_join.cur_join_type);
	this_join_is_left_join = ((LEFT_JOIN == this_join_type) || ((FULL_JOIN == this_join_type) && !right_join_second_half));
	key_start = cur_key;
	assert(((RIGHT_JOIN != this_join_type) && (FULL_JOIN != this_join_type)) || cur_key);
	if (pplan->tablejoin == tablejoin) {
		unsigned int	save_cur_key;

		save_cur_key = cur_key;
		/* This is the outermost "tmpl_tablejoin" invocation. See if there are any IN operator usages which have
		 * a key on the LHS that is fixed to a list of values on the RHS. If so, generate M local variables to store
		 * that list before any of the FOR loops for scanning any key begins. This way we do this M local variable
		 * initialization only once.
		 */
		for ( ; cur_key < total_keys; cur_key++) {
			LogicalPlan	*list;

			key = pplan->iterKeys[cur_key];
			list = key->fixed_to_value;
			if (NULL == list) {
				continue;
			}
			if (LP_COLUMN_LIST != list->type) {
				continue;
			}

			int	in_value_list_id;
			in_value_list_id = cur_key;	/* assign local variable name to use to store list of values
							 * (under a subtree) corresponding to fixed keys
							 * (e.g. %ydboctoin1, %ydboctoin2 etc.).
							 */
			TMPL(tmpl_print_dots, dot_count);
			%{}NEW {{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			do {
				LogicalPlan	*value;

				/* LP_VALUE type below is ensured by "lp_optimize_where_multi_equals_ands_helper()"
				 * (or else it would not have decided to fix the key).
				 */
				GET_LP(value, list, 0, LP_VALUE);
				TMPL(tmpl_print_expression_assignment, value, pplan, dot_count, 0);
				TMPL(tmpl_print_dots, dot_count);
				%{}SET {{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}({{ PP_YDB_OCTO_EXPR }})=""{}%
				%{}`n{{ PLAN_LINE_START }}{}%
				GET_LP_ALLOW_NULL(list, list, 1, LP_COLUMN_LIST);
			} while (NULL != list);
		}
		cur_key = save_cur_key;
	}
	if (NULL != tablejoin) {
		LogicalPlan	*left_tablejoin;
		left_tablejoin = tablejoin->v.lp_default.operand[0];
		switch(left_tablejoin->type) {
		case LP_SELECT_QUERY:
		case LP_SET_OPERATION:
		case LP_TABLE_VALUE:
			/* If a table in the FROM/JOIN list is a sub-query that corresponds to a deferred plan,
			 * generate code to invoke it here (before we generate code to use the results of the plan
			 * in the next "for" loop). If it does not correspond to a deferred plan, we would have
			 * already generated M code to invoke it so no need to do anything in that case.
			 */
			TMPL(tmpl_invoke_deferred_plan, InvokeDeferredPlan_TABLEJOIN, left_tablejoin, dot_count);
			break;
		default:
			break;
		}
	}

	int	orig_dot_count;
	orig_dot_count = dot_count;

	boolean_t	need_tmpl_key_finish;
	need_tmpl_key_finish = FALSE;

	fixed_xref_key = NULL;
	for ( ; cur_key < total_keys; cur_key++) {
		// For each key, output the key start, a FOR loop, QUIT, and increment
		key = pplan->iterKeys[cur_key];
		if (key->unique_id != left_table_id) {
			/* We are done with all key columns in this table; recurse to move on to next table/key */
			nested_call = TRUE;
			break;
		}
		if (this_join_is_left_join && pplan->treat_key_as_null[key->unique_id]) {
			continue;
		}
		// If this plan has no ORDER BY or GROUP BY, then any LIMIT usage can be safely applied right away.
		// Otherwise, we need to apply the LIMIT after the ORDER BY processing finally happens in "tmpl_physical_plan"
		//	or GROUP BY processing finally happens in "tmpl_group_by"
		limit_keyword = ((NULL == pplan->order_by) && !IS_GROUP_BY_PLAN(pplan))
					? get_keyword_from_keywords(pplan->keywords, OPTIONAL_LIMIT)
					: NULL;
		/* If this is the second half of the right join, then treat all keys as non-fixed.
		 * And do not include cross-reference keys. Only primary-keys. This is because we want
		 * to include ALL rows from the right table for the RIGHT JOIN.
		 */
		if ((NULL != key->fixed_to_value) && !right_join_second_half) {
			LogicalPlan	*fixed_to_value;

			fixed_to_value = key->fixed_to_value;
			if ((LP_VALUE != fixed_to_value->type)
					|| !IS_NUL_VALUE(fixed_to_value->v.lp_value.value->type)) {
				boolean_t	is_key_column;
				boolean_t	use_pp_ydb_octo_expr;

				/* Key is fixed to a value (= operator) or list of values (IN operator) */
				use_pp_ydb_octo_expr = TRUE;
				if (LP_COLUMN_LIST == fixed_to_value->type) {
					int	in_value_list_id;

					/* This is a list of values on the right hand side of an IN operator */
					in_value_list_id = cur_key;
					TMPL(tmpl_print_dots, dot_count);
					%{}SET {{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}="" FOR  {}%
					%{}DO:$DATA({{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}{}%
					%{}({{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}))  {}%
					%{}SET {{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}={}%
					%{}$ORDER({{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}{}%
					%{}({{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}){}%
					if (key->emit_desc_order) {
						%{},-1{}%
					}
					%{}) {}%
					%{}QUIT:""={{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}{}%
					%{}`n{{ PLAN_LINE_START }}{}%
					dot_count++;
					TMPL(tmpl_print_dots, dot_count);
					%{}SET {{ PP_YDB_OCTO_EXPR }}={{ PP_YDB_OCTO_IN }}{{ in_value_list_id|%d }}{}%
					%{}`n{{ PLAN_LINE_START }}{}%
				} else {
					TMPL(tmpl_print_expression_assignment, fixed_to_value, pplan, dot_count, 0);
					switch(key->fixed_to_value_type) {
					case LP_BOOLEAN_EQUALS:
					case LP_BOOLEAN_IS:
						break;
					case LP_BOOLEAN_LESS_THAN:
					case LP_BOOLEAN_GREATER_THAN:
					case LP_BOOLEAN_LESS_THAN_OR_EQUALS:
					case LP_BOOLEAN_GREATER_THAN_OR_EQUALS:
						assert(!IS_NULL_FIXED_VALUE(key->fixed_to_value));
						TMPL(tmpl_print_dots, dot_count);

						%{}SET {}%
						%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }},{{ cur_key|%d }}{}%
						switch(key->fixed_to_value_type) {
						case LP_BOOLEAN_LESS_THAN:
						case LP_BOOLEAN_LESS_THAN_OR_EQUALS:
							if (!key->emit_desc_order) {
								%{},1{}%
							}
							break;
						case LP_BOOLEAN_GREATER_THAN:
						case LP_BOOLEAN_GREATER_THAN_OR_EQUALS:
							if (key->emit_desc_order) {
								%{},1{}%
							}
						default:
							break;
						}
						%{})={{ PP_YDB_OCTO_EXPR }}{}%
						%{}`n{{ PLAN_LINE_START }}{}%
						TMPL(tmpl_print_dots, dot_count);
						switch(key->fixed_to_value_type) {
						case LP_BOOLEAN_LESS_THAN:
						case LP_BOOLEAN_LESS_THAN_OR_EQUALS:
							if (!key->emit_desc_order) {
								%{}SET {}%
								%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }}{}%
								%{},{{ cur_key|%d }})=""{}%
								%{}`n{{ PLAN_LINE_START }}{}%
								TMPL(tmpl_print_dots, dot_count);
							}
							break;
						case LP_BOOLEAN_GREATER_THAN:
						case LP_BOOLEAN_GREATER_THAN_OR_EQUALS:
							if (key->emit_desc_order) {
								%{}SET {}%
								%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }}{}%
								%{},{{ cur_key|%d }})=""{}%
								%{}`n{{ PLAN_LINE_START }}{}%
								TMPL(tmpl_print_dots, dot_count);
							}
						default:
							break;
						}
						if ((!key->emit_desc_order
								&& (LP_BOOLEAN_GREATER_THAN_OR_EQUALS == key->fixed_to_value_type))
						    	|| (key->emit_desc_order
								&& (LP_BOOLEAN_LESS_THAN_OR_EQUALS == key->fixed_to_value_type))) {
							%{}DO  {}%
						}
						%{}IF '$ZYISSQLNULL({}%
						%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }},{{ cur_key|%d }}{}%
						switch(key->fixed_to_value_type) {
						case LP_BOOLEAN_LESS_THAN:
						case LP_BOOLEAN_LESS_THAN_OR_EQUALS:
							if (!key->emit_desc_order) {
								%{},1{}%
							}
							break;
						case LP_BOOLEAN_GREATER_THAN:
						case LP_BOOLEAN_GREATER_THAN_OR_EQUALS:
							if (key->emit_desc_order) {
								%{},1{}%
							}
						default:
							break;
						}
						%{})) {}%
						%{}FOR  SET {}%
						%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }},{{ cur_key|%d }}){}%
						%{}=$ORDER({}%
						if (key->is_cross_reference_key) {
							SqlTable		*table;
							table = key->table;

							SqlValue		*value;
							UNPACK_SQL_STATEMENT(value, table->tableName, value);

							char		*tableName2, *columnName2;
							tableName2 = value->v.reference;
							UNPACK_SQL_STATEMENT(value, key->column->columnName, value);
							columnName2 = value->v.reference;
							TMPL(tmpl_key_source_aim, tableName2, columnName2);

							%{},{}%
							%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }},{{ cur_key|%d }})){}%
						} else {
							TMPL(tmpl_key_source, pplan, key, EmitSourceForm_KeyFix);
						}
						if (key->emit_desc_order) {
							%{},-1{}%
						}
						%{}) QUIT:{}%
						%{}({{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }},{{ cur_key|%d }})="")!({}%
						/* Determine type of column as that will determine how the QUIT: is structured */
						assert(NULL != key->column);
						boolean_t	is_string;
						is_string = FALSE;
						switch(key->column->data_type_struct.data_type) {
						case BOOLEAN_TYPE:
						case INTEGER_TYPE:
						case NUMERIC_TYPE:
							break;
						case STRING_TYPE:
							is_string = TRUE;
							break;
						case UNKNOWN_SqlDataType:
						case NUL_TYPE:
							assert(FALSE);
							break;
						}
						if (!is_string) {
							%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }},{{ cur_key|%d }}){}%
							switch(key->fixed_to_value_type) {
							case LP_BOOLEAN_LESS_THAN:
								if (!key->emit_desc_order) {
									%{}'<{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }}{}%
									%{},{{ cur_key|%d }},1){}%
								} else {
									%{}=""{}%
								}
								break;
							case LP_BOOLEAN_LESS_THAN_OR_EQUALS:
								if (!key->emit_desc_order) {
									%{}>{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }}{}%
									%{},{{ cur_key|%d }},1){}%
								} else {
									%{}=""{}%
								}
								break;
							case LP_BOOLEAN_GREATER_THAN:
								if (!key->emit_desc_order) {
									%{}=""{}%
								} else {
									%{}'>{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }}{}%
									%{},{{ cur_key|%d }},1){}%
								}
								break;
							case LP_BOOLEAN_GREATER_THAN_OR_EQUALS:
								if (!key->emit_desc_order) {
									%{}=""{}%
								} else {
									%{}<{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }}{}%
									%{},{{ cur_key|%d }},1){}%
								}
								break;
							default:
								assert(FALSE);
								break;
							}
						} else {
							switch(key->fixed_to_value_type) {
							case LP_BOOLEAN_LESS_THAN:
								if (!key->emit_desc_order) {
									%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }}{}%
									%{},{{ cur_key|%d }},1){}%
									%{}']{}%
									%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }}{}%
									%{},{{ cur_key|%d }}){}%
								} else {
									%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }}{}%
									%{},{{ cur_key|%d }}){}%
									%{}=""{}%
								}
								break;
							case LP_BOOLEAN_LESS_THAN_OR_EQUALS:
								if (!key->emit_desc_order) {
									%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }}{}%
									%{},{{ cur_key|%d }}){}%
									%{}]{}%
									%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }}{}%
									%{},{{ cur_key|%d }},1){}%
								} else {
									%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }}{}%
									%{},{{ cur_key|%d }}){}%
									%{}=""{}%
								}
								break;
							case LP_BOOLEAN_GREATER_THAN:
								if (!key->emit_desc_order) {
									%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }}{}%
									%{},{{ cur_key|%d }}){}%
									%{}=""{}%
								} else {
									%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }}{}%
									%{},{{ cur_key|%d }}){}%
									%{}']{}%
									%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }}{}%
									%{},{{ cur_key|%d }},1){}%
								}
								break;
							case LP_BOOLEAN_GREATER_THAN_OR_EQUALS:
								if (!key->emit_desc_order) {
									%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }}{}%
									%{},{{ cur_key|%d }}){}%
									%{}=""{}%
								} else {
									%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }}{}%
									%{},{{ cur_key|%d }},1){}%
									%{}]{}%
									%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }}{}%
									%{},{{ cur_key|%d }}){}%
								}
								break;
							default:
								assert(FALSE);
								break;
							}
						}
						%{})  DO{}%
						%{}`n{{ PLAN_LINE_START }}{}%
						dot_count++;

						/* If START/STARTINCLUDE/ENDPOINT keywords were specified for this column,
						 * skip processing records that are outside the range indicated by these keywords.
						 * Note that we are processing these keywords INSIDE the FOR loop instead of outside
						 * and so this is not optimal.
						 *
						 * For example, take a "CREATE TABLE hugetbl (id integer PRIMARY KEY START 90)"
						 * command. And let us say the table has 100 rows taking on values of "id" from
						 * 1 to 100. The START keyword restricts the table from rows 90 to 100. But if
						 * we have a query say "select * from hugetbl WHERE id > 1;", we would end up
						 * generating M code that does a FOR loop using $ORDER of the ^hugetbl global.
						 * That FOR loop would run for 100 iterations and inside that loop we would have
						 * M code that would check if the current "id" value is greater than 90 and if not
						 * we would move on to the next iteration. Basically wasting 90 iterations whereas
						 * if we had structured the FOR loop to start at subscript 90 onwards, we would
						 * have avoided this overhead.
						 *
						 * But this is not an easy change and this use case is not considered common
						 * so keeping the implementation simple for now.
						 */
						SqlOptionalKeyword	*keyword;
						keyword = get_keyword(key->column, OPTIONAL_START);
						if (NULL != keyword) {
							SqlValue	*value;
							UNPACK_SQL_STATEMENT(value, keyword->v, value);

							char		*start;
							start = value->v.string_literal;

							boolean_t	startinclude;
							startinclude = (NULL != get_keyword(key->column, OPTIONAL_STARTINCLUDE));
							TMPL(tmpl_print_dots, dot_count);
							%{}QUIT:{}%
							if (!is_string) {
								%{}{{ PP_YDB_OCTO_ZKEYFIX }}{}%
								%{}({{ key->unique_id|%d }},{{ cur_key|%d }}){}%
								if (startinclude) {
									%{}<{{ start }}{}%
								} else {
									%{}<={{ start }}{}%
								}
							} else {
								if (startinclude) {
									%{}{{ start }}]{}%
									%{}{{ PP_YDB_OCTO_ZKEYFIX }}{}%
									%{}({{ key->unique_id|%d }},{{ cur_key|%d }}){}%
								} else {
									%{}{{ PP_YDB_OCTO_ZKEYFIX }}{}%
									%{}({{ key->unique_id|%d }},{{ cur_key|%d }}){}%
									%{}']{{ start }}{}%
								}
							}
							%{}`n{{ PLAN_LINE_START }}{}%
						}
						/* END keyword is not supported with key-fixing optimization as it will involve
						 * changing "tmpl_emit_source" to replace "keys()" usages with "PP_YDB_OCTO_ZKEYFIX"
						 * usages (like what "EmitSourceForm_KeyFix" does but for all usages and not just
						 * the last key column like what is currently implemented in "tmpl_emit_source".
						 */
						assert(NULL == get_keyword(key->column, OPTIONAL_END));
						keyword = get_keyword(key->column, OPTIONAL_ENDPOINT);
						if (NULL != keyword) {
							SqlValue	*value;
							UNPACK_SQL_STATEMENT(value, keyword->v, value);

							char		*endpoint;
							endpoint = value->v.string_literal;
							TMPL(tmpl_print_dots, dot_count);
							%{}QUIT:{}%
							%{}{{ PP_YDB_OCTO_ZKEYFIX }}{}%
							%{}({{ key->unique_id|%d }},{{ cur_key|%d }}){}%
							%{}]]{{ endpoint }}{}%
							%{}`n{{ PLAN_LINE_START }}{}%
						}
						use_pp_ydb_octo_expr = FALSE;
						break;
					default:
						assert(FALSE);
						break;
					}
				}
				TMPL(tmpl_print_dots, dot_count);
				%{}SET {}%
				TMPL(tmpl_key, key);
				%{}={}%
				if (use_pp_ydb_octo_expr) {
					%{}{{ PP_YDB_OCTO_EXPR }}{}%
				} else {
					%{}{{ PP_YDB_OCTO_ZKEYFIX }}({{ key->unique_id|%d }},{{ cur_key|%d }}){}%
				}
				need_tmpl_key_finish = TRUE;
				/* The "tmpl_key_source" function call below would result in an M gvn.
				 * If the `fixed_to_value` is `$ZYSQLNULL`, we have to skip doing the gvn reference
				 * with `$ZYSQLNULL` as a subscript (as it causes a ZYSQLNULLNOTVALID error currently).
				 * Hence the need for a `$ZYISSQLNULL` check below (in the generated M code).
				 *
				 * But we do not want to do this in case the key is fixed to a IS_NULL_LITERAL value type.
				 * This is because in that case, we will generate the empty string instead of $ZYSQLNULL
				 * in "tmpl_key_source" and "tmpl_key_advance" thereby avoiding ZYSQLNULLNOTVALID errors.
				 * And having a `$ZYISSQLNULL` check in this case would skip the entire block of code
				 * which is not right (as we do want to loop through the xref). Hence the "IS_NULL_FIXED_VALUE"
				 * macro check below.
				 *
				 * Finally, even if the key is fixed to a IS_NULL_LITERAL value type, if the key corresponds
				 * to a key column, then we want to skip doing the gvn reference as the primary key can never
				 * take on a NULL value (even if the xref global does contain "" subscripts for the key columns).
				 * Hence the "is_key_column" check below.
				 */
				is_key_column = ((NULL != key->column) && IS_KEY_COLUMN(key->column));
				if (is_key_column || !IS_NULL_FIXED_VALUE(key->fixed_to_value) ) {
					%{} IF '$ZYISSQLNULL({}%
					TMPL(tmpl_key, key);
					%{}){}%
				}
				%{} IF $DATA({}%
				TMPL(tmpl_key_source, pplan, key, EmitSourceForm_Value);
				if (key->is_cross_reference_key) {
					fixed_xref_key = key;	/* Note down this key for later "tmpl_key_advance" call */
				}
				%{}){}%
				if (NULL != limit_keyword) {
					TMPL(tmpl_limit_check, limit_keyword, "&", ">" PP_YDB_OCTO_ZLIMIT);
						/* Note: literal concatenation in last parameter above */
					(*buffer_index)--;	/* Remove the trailing ")" from "tmpl_limit_check" call above */
					%{}({{ pplan->outputKey->unique_id|%d }}){}%	/* Add subscript based on output key */
					%{}){}%	/* Add back the trailing ")" from "tmpl_limit_check" call above */
				}
			} else {
				/* If fixed_to_value is NULL, then there is no output from this key fix.
				 * So skip entire DO block (that will get generated later). Generate M code accordingly.
				 */
				TMPL(tmpl_print_dots, dot_count);
				%{}; Note: The below IF 0 check skips the entire DO block and is intentional{}%
				%{}`n{{ PLAN_LINE_START }}{}%
				TMPL(tmpl_print_dots, dot_count);
				%{}; as it is not straightforward to skip generating the M code that follows{}%
				%{}`n{{ PLAN_LINE_START }}{}%
				TMPL(tmpl_print_dots, dot_count);
				%{}IF 0{}%
			}
			%{} DO{}%
			%{}`n{{ PLAN_LINE_START }}{}%
			dot_count++;
			continue;
		}
		if (key->is_cross_reference_key && right_join_second_half) {
			continue;
		}
		if (right_join_second_half && (NULL != key->cross_reference_output_key)) {
			/* Temporarily save cross-reference output key and clear it to generate correct key loop
			 * for second half of the right join.
			 */
			save_key = key->cross_reference_output_key;
			key->cross_reference_output_key = NULL;
		} else {
			save_key = NULL;
		}
		TMPL(tmpl_print_dots, dot_count);
		TMPL(tmpl_key_start, key);
		need_tmpl_key_finish = TRUE;
		%{}`n{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);
		/* If STARTINCLUDE/ENDPOINT was specified for this key column, include the starting value also in the FOR loop.
		 * Do this only if there is a table associated with the key (nested queries correspond to temporary tables
		 * and so should skip this).
		 */
		SqlOptionalKeyword	*keyword = NULL;
		assert((NULL != key->table) || (NULL == key->column));
		assert((NULL == key->table) || (NULL != key->column));
		if (NULL != key->table) {
			if (!key->emit_desc_order) {
				/* This key should have a FOR loop emitted in ascending order (most common case). */
				keyword = get_keyword(key->column, OPTIONAL_STARTINCLUDE);
			} else {
				/* This key should have a FOR loop emitted in descending order (possible for example if ORDER BY
				 * optimization of YDBOcto#959 is enabled etc.).
				 */
				assert(NULL == get_keyword(key->column, OPTIONAL_END));
				keyword = get_keyword(key->column, OPTIONAL_ENDPOINT);
			}
			if (NULL != keyword) {
				%{}DO:$DATA({}%
				if (NULL == fixed_xref_key) {
					TMPL(tmpl_key_source, pplan, key, EmitSourceForm_Value);
				} else {
					TMPL(tmpl_key_advance, pplan, key);
				}
				%{})  {}%
			}
		}
		%{}FOR  SET {}%
		TMPL(tmpl_key, key);
		%{}=$ORDER({}%
		TMPL(tmpl_key_advance, pplan, key);
		if (key->emit_desc_order) {
			%{},-1{}%
		}
		%{}) QUIT:({}%
		TMPL(tmpl_key_end, key);
		%{}){}%
		if (NULL != limit_keyword) {
			TMPL(tmpl_limit_check, limit_keyword, "!", "'>" PP_YDB_OCTO_ZLIMIT);
						/* Note: literal concatenation in last parameter above */
			(*buffer_index)--;	/* Remove the trailing ")" from `tmpl_limit_check` call */
			%{}({{ pplan->outputKey->unique_id|%d }}){}%	/* Add subscript based on output key */
			%{}){}%	/* Add back the trailing ")" from `tmpl_limit_check` call above */
		}
		%{}  DO`n{{ PLAN_LINE_START }}{}%
		if (NULL != save_key) {
			key->cross_reference_output_key = save_key;	/* Restore cross-reference output key */
		}
		dot_count++;
	}
	/* If this is a JOIN with an ON condition, generate an IF statement in M for doing the check */
	if (!IS_OUTER_JOIN(this_join_type)) {
		/* This is not an OUTER JOIN. In that case, generate the IF condition for the ON clause (if one exists).
		 * For an OUTER JOIN, we have later code that generates this if certain conditions are satisfied.
		 */
		TMPL(tmpl_tablejoin_on_condition, tablejoin, pplan, &dot_count);
	}
	int	save_dot_count;
#	ifndef NDEBUG
	boolean_t	save_emitting_octoLeftJoin_label;
#	endif
	save_dot_count = dot_count;
	if (this_join_is_left_join && !pplan->treat_key_as_null[left_table_id]) {
		TMPL(tmpl_tablejoin_on_condition, tablejoin, pplan, &dot_count);
		save_dot_count = dot_count;
		TMPL(tmpl_print_dots, dot_count);
		%{}SET {{ PP_YDB_OCTO_Z }}({}%
		if (pplan->key_lvn_can_be_zysqlnull) {
			%{}{{ left_table_id|%d }}{}%
		} else {
			%{}{{ key_start|%d }}{}%
		}
		%{})=1{}%
		%{}`n{}%
		if (pplan->key_lvn_can_be_zysqlnull) {
			/* We are now going to emit M code for the LEFT JOIN body. Note down the current offset of the
			 * emit buffer so once the LEFT JOIN body is emitted (in a recursive call), we can replace that
			 * M code with 2 "DO octoLeftJoinNN" calls in the emit buffer and emit the LEFT JOIN body under
			 * the label once all "octoPlanNN" emission is done.
			 */
			tablejoin->extra_detail.lp_table_join.left_join_save_buffer_index = *buffer_index;
			/* Since the LEFT JOIN body is finally moved under the "octoLeftJoinNN" label, we want to reset
			 * "dot_count" to 0 before emitting the LEFT JOIN body.
			 */
			dot_count = 0;
			DEBUG_ONLY(save_emitting_octoLeftJoin_label = pplan->emitting_octoLeftJoin_label);
			DEBUG_ONLY(pplan->emitting_octoLeftJoin_label = TRUE);
		}
		%{}{{ PLAN_LINE_START }}{}%
	}
	if ((RIGHT_JOIN == this_join_type) || (FULL_JOIN == this_join_type)) {
		if (!right_join_second_half) {
			if (!this_join_is_left_join) {
				TMPL(tmpl_tablejoin_on_condition, tablejoin, pplan, &dot_count);
			}
			/* Generate an M line to indicate a matched right table row ONLY if the current invocation of
			 * `tmpl_tablejoin` is not from the NO_MATCHING_RIGHT_TABLE_ROWS (search for occurrence below)
			 * code block. In that code block, we set `pplan->treat_key_as_null[table_id]` to TRUE and we
			 * passed FALSE as `this_join_is_left_join`. So that is what we check for below.
			 */
			if (!this_join_is_left_join || !pplan->treat_key_as_null[left_table_id]) {
				TMPL(tmpl_print_dots, dot_count);
				%{}SET {{ PP_YDB_OCTO_Z }}({}%
				TMPL(tmpl_rightjoin_key, pplan, key_start, cur_key);
				%{})=""`n{{ PLAN_LINE_START }}{}%
			}
		} else {
			/* Generate code for second half of RIGHT JOIN */
			/* First, if there are any cross-reference keys, generate code to set them based off the primary key.
			 * This is needed since we based the for loop for the second half of the RIGHT JOIN on the primary key
			 * only and so later references to the column corresponding to any cross-reference key for the same
			 * table need the cross-reference key value set properly (an optimization in "tmpl_column_reference"
			 * to generate the key instead of the column value relies on this).
			 */
			TMPL(tmpl_print_dots, dot_count);
			%{}DO:'$DATA({{ PP_YDB_OCTO_Z }}({}%
			TMPL(tmpl_rightjoin_key, pplan, key_start, cur_key);
			%{}))`n{{ PLAN_LINE_START }}{}%
			dot_count++;
		}
	}
	if (!nested_call) {
		/* Check if this is an UPDATE query and if at least one primary key column was specified in the SET clause
		 * OR if a cross reference key was generated. If so, we need to generate extra code to note down which
		 * rows have been already processed (to avoid duplicate processing).
		 */
		if (IS_UPDATE_PHYSICAL_PLAN(pplan) && is_update_keycol_or_xref(pplan)) {
			TMPL(tmpl_print_dots, dot_count);
			%{}DO:'$DATA({}%
			TMPL(tmpl_update_key_source, pplan, TRUE);
			%{}`n{{ PLAN_LINE_START }}{}%
			dot_count++;
		}
		TMPL(tmpl_tablejoin_body, pplan, dot_count, tableName, columnName);
	} else {
		assert(cur_key < total_keys);
		GET_LP(right_tablejoin, tablejoin, 1, LP_TABLE_JOIN);
		next_join_type = right_tablejoin->extra_detail.lp_table_join.cur_join_type;
		// Treat a FULL_JOIN as a LEFT_JOIN at this stage. It will be treated as a RIGHT JOIN at a later stage.
		if (FULL_JOIN == next_join_type) {
			next_join_type = LEFT_JOIN;
		}

		boolean_t	skip_right_tablejoin;
		skip_right_tablejoin = FALSE;
		if (LEFT_JOIN == next_join_type) {

			assert(key == pplan->iterKeys[cur_key]);
			if (!pplan->key_lvn_can_be_zysqlnull) {
				LogicalPlan	*fixed_to_value;

				fixed_to_value = key->fixed_to_value;
				if (NULL != fixed_to_value) {
					/* This is a LEFT JOIN. Check if the fixed value evaluates to a NULL. If so, we can
					 * skip the following call to "tmpl_tablejoin" and avoid a lot of unnecessary emitted
					 * M code (YDBOcto#1006).
					 */
					/* A NULL value is possible if the key is fixed to a NULL value or a IS NULL or a
					 * column alias that evaluates to a NULL because it is a column in the right table
					 * of the LEFT JOIN and so all columns have the value of NULL
					 * (i.e. "treat_key_as_null[right_table_id]" is TRUE).
					 */
					int 		unique_id;

					unique_id = 0;
					switch(fixed_to_value->type) {
					case LP_VALUE:;
						SqlValue	*value;

						value = fixed_to_value->v.lp_value.value;
						if (IS_NUL_VALUE(value->type) || (IS_NULL_LITERAL == value->type)) {
							unique_id = key->unique_id;
						}
						break;
					case LP_COLUMN_ALIAS:;
						LogicalPlan	*derived_column;

						derived_column = fixed_to_value->extra_detail.lp_column_alias.derived_column;
						if (NULL == derived_column) {
							SqlColumnAlias *column_alias;
							column_alias = fixed_to_value->v.lp_column_alias.column_alias;

							SqlTableAlias *table_alias;
							UNPACK_SQL_STATEMENT(table_alias, column_alias->table_alias_stmt,	\
								table_alias);
							unique_id = table_alias->unique_id;
						} else {
							LogicalPlan	*lp_key;
							GET_LP(lp_key, derived_column, 0, LP_KEY);

							SqlKey *sql_key = lp_key->v.lp_key.key;
							unique_id = sql_key->unique_id;
						}
						break;
					default:
						break;
					}
					if (pplan->treat_key_as_null[unique_id]) {
						skip_right_tablejoin = TRUE;
					}
				}
				if (!skip_right_tablejoin) {
					TMPL(tmpl_print_dots, dot_count);
					%{}SET {{ PP_YDB_OCTO_Z }}({{ cur_key|%d }})=0`n{{ PLAN_LINE_START }}{}%
				}
			} else {
				int	right_table_id;
				right_table_id = pplan->iterKeys[cur_key]->unique_id;
				TMPL(tmpl_print_dots, dot_count);
				%{}SET {{ PP_YDB_OCTO_Z }}({{ right_table_id|%d }})=0`n{{ PLAN_LINE_START }}{}%
			}
		}
		if (!skip_right_tablejoin) {
			TMPL(tmpl_tablejoin, pplan, right_tablejoin, cur_key, FALSE, dot_count, tableName, columnName);
		}
		if (LEFT_JOIN == next_join_type) {
			int	right_table_id;
			key = pplan->iterKeys[cur_key];
			right_table_id = key->unique_id;
			if (!pplan->key_lvn_can_be_zysqlnull) {
				if (!skip_right_tablejoin) {
					/* Generate M code to include rows from the left table where there is no matching
					 * right table rows (NO_MATCHING_RIGHT_TABLE_ROWS code block).
					 */
					%{}`n{{ PLAN_LINE_START }}{}%
					TMPL(tmpl_print_dots, dot_count);
					%{}DO:0={{ PP_YDB_OCTO_Z }}({{ cur_key|%d }})`n{{ PLAN_LINE_START }}{}%
					dot_count++;
				}
				/* Treat all keys in the right table as NULL and invoke nested joins (if needed) */
				pplan->treat_key_as_null[right_table_id] = TRUE;
				TMPL(tmpl_tablejoin, pplan, right_tablejoin, cur_key, FALSE, dot_count, tableName, columnName);
				/* Undo NULL-treating of keys in right table */
				assert(pplan->treat_key_as_null[right_table_id]);
				pplan->treat_key_as_null[right_table_id] = FALSE;
			} else {
				/* Generate M code to include rows from the left table where there is no matching right table rows
				 * (NO_MATCHING_RIGHT_TABLE_ROWS code block).
				 */
				/* Generate DO call for left table rows with non-matching right table rows */
				assert(NULL != right_tablejoin->extra_detail.lp_table_join.join_on_condition);
				%{}`n{{ PLAN_LINE_START }}{}%
				TMPL(tmpl_print_dots, dot_count);

				%{}DO:0={{ PP_YDB_OCTO_Z }}({{ right_table_id|%d }}){}%
				dot_count++;

				unsigned int	cur_key_copy;
				cur_key_copy = cur_key;
				for ( ; cur_key_copy < total_keys; cur_key_copy++) {
					key = pplan->iterKeys[cur_key_copy];
					if (key->unique_id != right_table_id) {
						break;
					}
					assert(!key->is_cross_reference_key || ((NULL != key->column) && (NULL != key->table)));
					%{}`n{{ PLAN_LINE_START }}{}%
					TMPL(tmpl_print_dots, dot_count);
					%{}SET {}%
					TMPL(tmpl_key, key);
					%{}=$ZYSQLNULL{}%
				}
				%{}`n{{ PLAN_LINE_START }}{}%
				TMPL(tmpl_print_dots, dot_count);

				char	dnf_num_str[INT32_TO_STRING_MAX];
				if (0 != pplan->dnf_num) {
					snprintf(dnf_num_str, sizeof(dnf_num_str), "D%d", pplan->dnf_num);
				} else {
					dnf_num_str[0] = '\0';
				}
				%{}DO {{ PP_OCTO_LEFT_JOIN }}{{ right_table_id|%d }}{{ dnf_num_str }}{}%
				dot_count--;
				cur_key_copy = cur_key;
				/* Generate the "tmpl_key_finish" calls now that BOTH calls to "DO octoLeftJoinNN" of the
				 * LEFT JOIN are done.
				 */
				for ( ; cur_key_copy < total_keys; cur_key_copy++) {
					key = pplan->iterKeys[cur_key_copy];
					if (key->unique_id != right_table_id) {
						break;
					}
					assert(!key->is_cross_reference_key || ((NULL != key->column) && (NULL != key->table)));
					%{}`n{{ PLAN_LINE_START }}{}%
					TMPL(tmpl_print_dots, dot_count);
					assert(0 < cur_key_copy);
					TMPL(tmpl_key_finish, key);
				}
			}
		}
	}
	if (pplan->key_lvn_can_be_zysqlnull && this_join_is_left_join) {
		uint64_t	idx[2], len;
		char		*tmp_buff;

		assert(!pplan->treat_key_as_null[left_table_id]);	/* as this is set to TRUE only for RIGHT/FULL JOIN
									 * and "pplan->key_lvn_can_be_zysqlnull" is TRUE in above
									 * "if" indicating there are no RIGHT/FULL joins.
									 */
		dot_count = save_dot_count;
		/* We are now done emitting M code corresponding to the LEFT JOIN body. Move the M code off to a buffer
		 * stored inside the corresponding "LpExtraTableJoin" structure that way we can emit this at a later point
		 * when emitting of all "octoPlan" plans is done.
		 */
		DEBUG_ONLY(pplan->emitting_octoLeftJoin_label = save_emitting_octoLeftJoin_label);
		idx[0] = tablejoin->extra_detail.lp_table_join.left_join_save_buffer_index;
		idx[1] = *buffer_index;
		len = idx[1] - idx[0];
		tmp_buff = octo_cmalloc(memory_chunks, len);
		memcpy(tmp_buff, *global_buffer + idx[0], len);
		*buffer_index = idx[0];
		tablejoin->extra_detail.lp_table_join.left_join_buffer = tmp_buff;
		tablejoin->extra_detail.lp_table_join.left_join_save_buffer_index = len;
		%{}{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);

		char	dnf_num_str[INT32_TO_STRING_MAX];
		if (0 != pplan->dnf_num) {
			snprintf(dnf_num_str, sizeof(dnf_num_str), "D%d", pplan->dnf_num);
		} else {
			dnf_num_str[0] = '\0';
		}
		%{}DO {{ PP_OCTO_LEFT_JOIN }}{{ left_table_id|%d }}{{ dnf_num_str }}{}%
		/* In this case, we will generate the "tmpl_key_finish" calls AFTER both calls to "DO octoLeftJoinNN"
		 * are done. This will be later done in the caller of this function (see "tmpl_key_finish" call above).
		 * Therefore, set the "need_tmpl_key_finish" variable to FALSE to avoid an unnecessary "tmpl_key_finish"
		 * call in the current function.
		 */
		need_tmpl_key_finish = FALSE;
	}
	if (need_tmpl_key_finish) {
		assert(cur_key > key_start);
		for ( ; cur_key > key_start; cur_key--) {
			key = pplan->iterKeys[cur_key - 1];
			if (key->is_cross_reference_key && (NULL == key->column) && (NULL != key->table)) {
				/* A cross reference key always has a non-NULL column and table (guaranteed by an assert in
				 * "lp_alloc_key.c". But this cross reference key has a NULL column and a non-NULL table.
				 * This is the case of a temporarily disabled xref key (i.e. it is processed using
				 * "tmpl_emit_source" and not using "tmpl_key") during the second half of a RIGHT JOIN.
				 * See comments in code further down below (search for "save_key_column") for how a recursive
				 * caller would have created this situation. So skip emitting M code for this disabled key as
				 * there is no lvn corresponding to this key that needs to be cleaned up (i.e. KILLed).
				 */
				continue;
			}
			%{}`n{{ PLAN_LINE_START }}{}%
			TMPL(tmpl_print_dots, orig_dot_count);
			assert(0 < cur_key);
			TMPL(tmpl_key_finish, key);
		}
	}
	if (pplan->tablejoin == tablejoin) {
		/* This is the outermost "tmpl_tablejoin" invocation. Do additional invocation for RIGHT JOINs (if any)
		 * to include rows from the right table where there is no matching left table rows.
		 * We do that by scanning the linked list of tablejoins and finding the first tablejoin that is a RIGHT JOIN,
		 * setting all keys for prior tablejoins to be NULL and invoking "tmpl_tablejoin". And redoing this for
		 * every other RIGHT JOIN until the end of the tablejoin linked list is reached.
		 */
		LogicalPlan	*this_table_join;
		int		num_tables = 0, cur_tables;
		boolean_t	key_nullified;

		this_table_join = tablejoin;
		cur_key = 0;
		key_nullified = FALSE;
		dot_count = 0;
		do {
			assert(LP_TABLE_JOIN == this_table_join->type);
			this_join_type = this_table_join->extra_detail.lp_table_join.cur_join_type;
			if ((RIGHT_JOIN == this_join_type) || (FULL_JOIN == this_join_type)) {
				int		right_join_table_id, this_table_id;
				unsigned int	right_join_cur_key;

				/* Set keys of all tables till now to NULL */
				assert(cur_key < total_keys);
				cur_tables = 0;
				do {
					this_table_id = pplan->iterKeys[cur_key]->unique_id;
					if (!pplan->treat_key_as_null[this_table_id]) {
						if (cur_tables == num_tables) {
							break;
						}
						pplan->treat_key_as_null[this_table_id] = TRUE;
						key_nullified = TRUE;
						cur_tables++;
					}
				} while (++cur_key < total_keys);
				assert(cur_key);
				%{}`n{{ PLAN_LINE_START }}{}%
				/* Assert that this is not the outermost "tmpl_tablejoin" invocation */
				assert(this_table_join != pplan->tablejoin);
				right_join_table_id = this_table_id;

				SqlColumn	*save_key_column;
				save_key_column = NULL;
				for (right_join_cur_key = cur_key; right_join_cur_key < total_keys; right_join_cur_key++) {
					key = pplan->iterKeys[right_join_cur_key];
					if (right_join_table_id == key->unique_id) {
						if (key->is_cross_reference_key) {
							/* Until now, we would have used "tmpl_key()" to emit code for "key".
							 * But now on, we need to use "tmpl_emit_source()" to emit different
							 * code for the second half of a RIGHT JOIN. Hence set "key->column"
							 * to NULL to ensure "tmpl_key()" does not get chosen. See comment in
							 * "tmpl_column_reference" (search for "key->column") for more details.
							 */
							assert(NULL != key->column);
							assert(NULL != key->table);
							assert(NULL == save_key_column);
							save_key_column = key->column;
							key->column = NULL;
						}
					} else {
						break;
					}
				}
				TMPL(tmpl_tablejoin, pplan, this_table_join, cur_key, TRUE, dot_count, tableName, columnName);
				for (right_join_cur_key = cur_key; right_join_cur_key < total_keys; right_join_cur_key++) {
					key = pplan->iterKeys[right_join_cur_key];
					if (right_join_table_id == key->unique_id) {
						if (key->is_cross_reference_key) {
							/* Until now, we would have used "tmpl_key()" to emit code for "key".
							 * But now on, we need to use "tmpl_emit_source()" to emit different
							 * code for the second half of a RIGHT JOIN. Hence set the below.
							 */
							assert(NULL == key->column);
							assert(NULL != save_key_column);
							key->column = save_key_column;
						}
					} else {
						break;
					}
				}
				num_tables = 1;	// include this table as first one for next round of RIGHT JOIN key nullification
			} else {
				num_tables++;
			}
			GET_LP_ALLOW_NULL(this_table_join, this_table_join, 1, LP_TABLE_JOIN);
		} while (NULL != this_table_join);
		if (key_nullified) {
			/* We nullified at least one key above for a RIGHT JOIN. Undo all of those. */
			for (cur_key = 0; cur_key < total_keys; cur_key++)
			{
				int	this_table_id;

				this_table_id = pplan->iterKeys[cur_key]->unique_id;
				pplan->treat_key_as_null[this_table_id] = FALSE;
			}
		}
	}
	return;
}
%{}
