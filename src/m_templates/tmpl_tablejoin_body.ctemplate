{}%
/****************************************************************
 *								*
 * Copyright (c) 2019-2021 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include "physical_plan.h"
#include "template_helpers.h"

TEMPLATE(tmpl_tablejoin_body, PhysicalPlan *plan, int dot_count, char *tableName, char *columnName) {
	boolean_t	distinct_processed, is_delete_from;

	is_delete_from = (LP_DELETE_FROM == plan->lp_select_query->type);
	assert((NULL != plan->outputKey) || is_delete_from);
	if (!is_delete_from && (plan->outputKey->is_cross_reference_key)) {
		/* Simplest case. Finish it first */
 		LogicalPlan		*col1, *col2_onwards;

		assert(NULL == plan->where->v.lp_default.operand[0]);
		assert(!plan->distinct_values);
		assert(!plan->emit_duplication_check);
		assert(NULL == plan->order_by);
		assert(NULL == plan->aggregate_options);
		TMPL(tmpl_print_dots, dot_count);
		%{}NEW {{ PP_XREF_COLUMN }}`n{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);
		%{}SET {{ PP_XREF_COLUMN }}={}%
		/* We want only the first column in the column list for the "tmpl_column_list_combine" call below so
		 * temporarily make the 2nd column onwards invisible.
		 */
		col1 = plan->projection;
		col2_onwards = col1->v.lp_default.operand[1];
		col1->v.lp_default.operand[1] = NULL;
		TMPL(tmpl_column_list_combine, col1, plan, ",", FALSE, 0, FALSE);
		%{}`n{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);
		%{}SET{}%
		%{} {{ plan->outputKey->xref_prefix }}{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}",{{ PP_XREF_COLUMN }},{}%
		TMPL(tmpl_column_list_combine, col2_onwards, plan, ",", FALSE, 0, FALSE);
		%{})=""`n{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);
		%{}IF $INCREMENT({{ plan->outputKey->xref_prefix }}{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}",{{ PP_XREF_COLUMN }})){}%
		%{}`n{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);
		%{}IF $INCREMENT({{ plan->outputKey->xref_prefix }}{{ config->global_names.raw_xref }}("{{ tableName }}","{{ columnName }}")){}%
		col1->v.lp_default.operand[1] = col2_onwards;	/* Make the 2nd column visible again */
		return;
	}
	// Apply the conditions for this statement
	TMPL(tmpl_print_dots, dot_count);
	%{}SET {{ PP_YDB_OCTO_EXPR }}=1{}%
	if (plan->where && plan->where->v.lp_default.operand[0]) {
		TMPL(tmpl_where_or_having_or_on, plan->where->v.lp_default.operand[0], plan, dot_count);
	} else {
		%{}`n{{ PLAN_LINE_START }}{}%
	}
	// DISTINCT value processing (if needed)
	distinct_processed = FALSE;
	if (plan->distinct_values) {
		/* If this plan has a GROUP BY, then we will do DISTINCT processing in `tmpl_group_by` so skip that here */
		if (!IS_GROUP_BY_PLAN(plan)) {
			TMPL(tmpl_print_dots, dot_count);
			%{}SET {{ PP_YDB_OCTO_EXPR }}={{ PP_YDB_OCTO_EXPR }}&{}%
			%{}('$DATA({{ PP_YDB_OCTO_ZDISTINCT }}({{ plan->outputKey->unique_id|%d }},{}%
			TMPL(tmpl_column_list_combine, plan->projection, plan, ",", FALSE, 0, FALSE);
			%{}))){}%
			%{}`n{{ PLAN_LINE_START }}{}%
			distinct_processed = TRUE;
		}
	}
	/* DUPLICATE value processing (if needed) i.e. OR was specified in WHERE clause.
	 * Note: This is usually not needed if DISTINCT value processing was already done above (since DISTINCT and DUPLICATE
	 * processing both avoid duplicates). But if GROUP BY has been specified, we would have skipped DISTINCT processing
	 * above in which case we DO need to check for DUPLICATE processing. Hence the check below.
	 */
	if (!distinct_processed && plan->emit_duplication_check) {
		// Ensure we don't emit duplicates
		TMPL(tmpl_print_dots, dot_count);
		%{}SET {{ PP_YDB_OCTO_EXPR }}={{ PP_YDB_OCTO_EXPR }}&{}%
		%{}('$DATA({}%
		TMPL(tmpl_duplication_check, plan);
		%{})){}%
		%{}`n{{ PLAN_LINE_START }}{}%
	}
	TMPL(tmpl_print_dots, dot_count);
	%{}IF {{ PP_YDB_OCTO_EXPR }} DO{}%
	/* If GROUP BY or HAVING have been specified and/or Aggregate functions have been used, invoke another function
	 * to do the M code generation as the flow is very different (more complicated).
	 */
	if (IS_GROUP_BY_PLAN(plan)) {
		TMPL(tmpl_tablejoin_body_group_by, plan, dot_count);
		return;
	}
	if (!is_delete_from) {
		// Populate records in the output key (i.e. SELECT column list)
		TMPL(tmpl_populate_output_key, plan, dot_count);
	} else {
		// Generate code to delete record from the table
		TMPL(tmpl_delete_record_from_table, plan, dot_count);
	}
	return;
}
%{}
