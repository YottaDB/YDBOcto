{}%
/****************************************************************
 *								*
 * Copyright (c) 2019-2021 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include "physical_plan.h"
#include "template_helpers.h"

TEMPLATE(tmpl_tablejoin_body_group_by, PhysicalPlan *pplan, int dot_count) {
	LogicalPlan	*af, *first_aggregate;

	assert(NULL != pplan->outputKey);
	assert(IS_GROUP_BY_PLAN(pplan));
	assert(!pplan->outputKey->is_cross_reference_key);	/* caller should have ensured this */
	/* At this point, M code for the WHERE clause has been emitted (in tmpl_tablejoin_body.ctemplate) */
	%{}`n{{ PLAN_LINE_START }}{}%
	dot_count++;
	/* Do not yet populate records in the output key (i.e. SELECT column list). First populate the GROUP BY related
	 * M lvn subtree. DISTINCT, ORDER BY, LIMIT etc. cannot be processed at this point. They will have to be deferred
	 * until later when GROUP BY processing is done.
	 */
	if ((NULL != pplan->aggregate_options) && (NULL != pplan->aggregate_options->v.lp_default.operand[0])) {
		LogicalPlan	*group_by;

		/* GROUP BY was specified. Emit the specified columns as the GROUP BY subscript */
		GET_LP(group_by, pplan->aggregate_options, 0, LP_GROUP_BY);
		TMPL(tmpl_column_list_combine, group_by->v.lp_default.operand[0], pplan, "_", TRUE, dot_count, FALSE);
	} else {
		/* GROUP BY was NOT specified. Emit "" as the GROUP BY subscript */
		TMPL(tmpl_print_dots, dot_count);
		%{}SET {{ PP_YDB_OCTO_EXPR }}=""{}%
		%{}`n{{ PLAN_LINE_START }}{}%
	}
	TMPL(tmpl_print_dots, dot_count);
	%{}SET {{ PP_YDB_OCTO_G }}={{ PP_YDB_OCTO_EXPR }}{}%
	%{}`n{{ PLAN_LINE_START }}{}%
	TMPL(tmpl_print_dots, dot_count);
	%{}SET {}%
	TMPL(tmpl_key, pplan->outputKey);
	(*buffer_index)--;
	%{},{{ PP_GROUP_BY }},{{ PP_YDB_OCTO_G }})=""{}%
	assert(LP_SELECT_QUERY == pplan->lp_select_query->type);
	first_aggregate = pplan->lp_select_query->extra_detail.lp_select_query.first_aggregate;
	for (af = first_aggregate; NULL != af; af = af->extra_detail.lp_aggregate_function.next_aggregate) {
		%{}`n{{ PLAN_LINE_START }}{}%
		if (LP_AGGREGATE_FUNCTION_COUNT_ASTERISK == af->type) {
			TMPL(tmpl_print_dots, dot_count);
			%{}SET {{ PP_YDB_OCTO_EXPR }}=""{}%
			%{}`n{{ PLAN_LINE_START }}{}%
		} else {
			LogicalPlan	*lp_column_list;
			LogicalPlan	*l_plan;

			lp_column_list = af->v.lp_default.operand[0];
			assert(LP_COLUMN_LIST == lp_column_list->type);
			l_plan = lp_column_list->v.lp_default.operand[0];
			assert(NULL != l_plan);
			if ((LP_AGGREGATE_FUNCTION_COUNT_TABLE_ASTERISK == af->type)
					|| (LP_AGGREGATE_FUNCTION_COUNT_DISTINCT_TABLE_ASTERISK == af->type)) {
				int	unique_id;

				if (LP_DERIVED_COLUMN == l_plan->type) {
					LogicalPlan	*lp_key;

					GET_LP(lp_key, l_plan, 0, LP_KEY);
					unique_id = lp_key->v.lp_key.key->unique_id;
				} else {
					SqlColumnAlias	*column_alias;
					SqlTableAlias	*table_alias;

					assert(LP_COLUMN_ALIAS == l_plan->type);
					column_alias = l_plan->v.lp_column_alias.column_alias;
					UNPACK_SQL_STATEMENT(table_alias, column_alias->table_alias_stmt, table_alias);
					unique_id = table_alias->unique_id;
				}
				if (pplan->treat_key_as_null[unique_id]) {
					TMPL(tmpl_print_dots, dot_count);
					%{}SET {{ PP_YDB_OCTO_EXPR }}=$ZYSQLNULL{}%
					%{}`n{{ PLAN_LINE_START }}{}%
				} else if (LP_AGGREGATE_FUNCTION_COUNT_TABLE_ASTERISK == af->type) {
					/* COUNT(TABLE.*) usage */
					TMPL(tmpl_print_dots, dot_count);
					%{}SET {{ PP_YDB_OCTO_EXPR }}=""{}%
					%{}`n{{ PLAN_LINE_START }}{}%
				} else {
					// COUNT(DISTINCT TABLE.*) usage
					TMPL(tmpl_column_list_combine, lp_column_list, pplan, "_", TRUE, dot_count, TRUE);
				}
			} else {
				TMPL(tmpl_print_expression, l_plan, pplan, dot_count, 0);
			}
		}
		TMPL(tmpl_print_dots, dot_count);
		%{}SET {{ PP_YDB_OCTO_P }}={{ PP_YDB_OCTO_EXPR }}{}%
		%{}`n{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);

		char	*m_func;
		int	aggregate_cnt;
		assert(IS_TYPE_LP_AGGREGATE(af->type));
		aggregate_cnt = af->extra_detail.lp_aggregate_function.aggregate_cnt;
		assert(aggregate_cnt);
		m_func = lp_get_aggregate_plan_helper_func_name(af->type);
		%{}DO {{ m_func }}^%%ydboctoplanhelpers({}%
		%{}{{pplan->outputKey->unique_id|%d }},{{ PP_YDB_OCTO_G }},{{ aggregate_cnt|%d }},{{ PP_YDB_OCTO_P }}{}%
		if ((LP_AGGREGATE_FUNCTION_MIN == af->type) || (LP_AGGREGATE_FUNCTION_MAX == af->type)) {
			/* Need to pass an additional parameter `isString` to know if the type of PP_YDB_OCTO_P is STRING or not */
			SqlValueType	param_type;
			boolean_t	isString;

			param_type = af->extra_detail.lp_aggregate_function.param_type;
			assert(IS_LITERAL_PARAMETER(param_type) || (NUL_VALUE == param_type));
			isString = (STRING_LITERAL == param_type) ? TRUE : FALSE;
			%{},{{ isString|%d }}{}%
		}
		%{}){}%
	}
	TMPL(tmpl_set_duplication_check, pplan, dot_count);
	return;
}
%{}
