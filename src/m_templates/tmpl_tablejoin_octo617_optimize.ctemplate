{}%
/****************************************************************
 *								*
 * Copyright (c) 2024 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include "physical_plan.h"
#include "template_helpers.h"

TEMPLATE(tmpl_tablejoin_octo617_optimize, PhysicalPlan *pplan, int dot_count) {
	LogicalPlan	*af, *first_aggregate;
	assert(pplan->is_octo617_optimized);
	first_aggregate = pplan->lp_select_query->extra_detail.lp_select_query.first_aggregate;
	/* Emit M code for the YDBOcto#617 optimization. */
	for (af = first_aggregate; NULL != af; af = af->extra_detail.lp_aggregate_function.next_aggregate) {
		assert((LP_AGGREGATE_FUNCTION_MIN == af->type) || (LP_AGGREGATE_FUNCTION_MAX == af->type));

		LogicalPlan		*lp_column_list;
		LogicalPlan		*l_plan;
		LPActionType		af_type;
		SqlKey			*key;
		SqlOptionalKeyword	*keyword;
		SqlValue		*value;
		char			*str;

		if (af != first_aggregate) {
			%{}`n{{ PLAN_LINE_START }}{}%
		}
		GET_LP(lp_column_list, af, 0, LP_COLUMN_LIST);
		l_plan = lp_column_list->v.lp_default.operand[0];

		SqlColumn *key_column, *aggr_column;
		key = pplan->iterKeys[0];
		key_column = key->column;
		TMPL(tmpl_print_dots, dot_count);
		if (LP_VALUE == l_plan->type) {
			%{}SET {}%
			%{}{{ PP_YDB_OCTO_EXPR }}(1)={}%
			TMPL(tmpl_print_expression, l_plan, pplan, dot_count, 0);
			%{}`n{{ PLAN_LINE_START }}{}%
			TMPL(tmpl_print_dots, dot_count);
			af_type = LP_AGGREGATE_FUNCTION_MIN;
			aggr_column = NULL;
		} else {
			assert(LP_COLUMN_ALIAS == l_plan->type);
			assert(column_STATEMENT == l_plan->v.lp_column_alias.column_alias->column->type);
			aggr_column = l_plan->v.lp_column_alias.column_alias->column->v.column;
			af_type = af->type;
			if (aggr_column == key_column) {
				if (LP_AGGREGATE_FUNCTION_MIN != af_type) {
					keyword = get_keyword(key_column, OPTIONAL_ENDPOINT);
					if (NULL != keyword) {
						UNPACK_SQL_STATEMENT(value, keyword->v, value);
						str = value->v.string_literal;
						%{}SET {}%
						%{}{{ PP_YDB_OCTO_EXPR }}={}%
						%{}{{ str }}{}%
						%{}`n{{ PLAN_LINE_START }}{}%
						TMPL(tmpl_print_dots, dot_count);
						%{}IF '$DATA({}%
						TMPL(tmpl_key_source, pplan, key, EmitSourceForm_Octo617);
						%{}) {}%
					}
				}
			}
		}
		char	*columnName, *tableName;
		if ((NULL != aggr_column) && (aggr_column != key_column)) {
			UNPACK_SQL_STATEMENT(value, aggr_column->columnName, value);
			columnName = value->v.reference;
			UNPACK_SQL_STATEMENT(value, key->table->tableName, value);
			tableName = value->v.reference;
		} else {
			columnName = tableName = NULL;	/* not needed but in case some compiler throws an uninitialized warning */
		}

		boolean_t		is_non_key_column = FALSE;
		char			*direction;
		enum EmitSourceForm	emit_type;
		if (LP_AGGREGATE_FUNCTION_MIN == af_type) {
			emit_type = EmitSourceForm_Octo617Min;
			direction = "1";
		} else {
			emit_type = EmitSourceForm_Octo617Max;
			direction = "-1";
		}
		%{}SET {}%
		%{}{{ PP_YDB_OCTO_EXPR }}=$ORDER({}%
		if ((NULL == aggr_column) || (aggr_column == key_column)) {
			TMPL(tmpl_key_source, pplan, key, emit_type);
		} else {
			is_non_key_column = TRUE;
			TMPL(tmpl_key_source_aim, tableName, columnName);
			%{},""){}%
		}
		%{},{{ direction }}){}%
		%{}`n{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);
		if (is_non_key_column) {
			%{}SET:$DATA({}%
			TMPL(tmpl_key_source_aim, tableName, columnName);
			%{},{{ PP_YDB_OCTO_EXPR }}))&(""={}%
			if (IS_COLUMN_STRING_TYPE(aggr_column)) {
				%{}$$aimsubs2strcolval^%%ydboctoplanhelpers({}%
			}
			%{}{{ PP_YDB_OCTO_EXPR }}{}%
			if (IS_COLUMN_STRING_TYPE(aggr_column)) {
				%{}){}%
			}
			%{}) {{ PP_YDB_OCTO_EXPR }}=$ORDER({}%
			TMPL(tmpl_key_source_aim, tableName, columnName);
			%{},{{ PP_YDB_OCTO_EXPR }}),{{ direction }}){}%
			%{}`n{{ PLAN_LINE_START }}{}%
			TMPL(tmpl_print_dots, dot_count);
			if (IS_COLUMN_STRING_TYPE(aggr_column)) {
				%{}SET {{ PP_YDB_OCTO_EXPR }}(1)={}%
				%{}$$aimsubs2strcolval^%%ydboctoplanhelpers({{ PP_YDB_OCTO_EXPR }}){}%
				%{}`n{{ PLAN_LINE_START }}{}%
				TMPL(tmpl_print_dots, dot_count);
			}
		}
		%{}SET:$DATA({}%
		if (!is_non_key_column) {
			TMPL(tmpl_key_source, pplan, key, EmitSourceForm_Octo617);
		} else {
			TMPL(tmpl_key_source_aim, tableName, columnName);
			%{},{{ PP_YDB_OCTO_EXPR }}){}%
		}
		%{}){}%
		if (!is_non_key_column) {
			keyword = get_keyword(key_column,
					(LP_AGGREGATE_FUNCTION_MIN != af_type) ? OPTIONAL_START : OPTIONAL_ENDPOINT);
			if (NULL != keyword) {
				UNPACK_SQL_STATEMENT(value, keyword->v, value);
				str = value->v.string_literal;
			} else {
				str = NULL;
			}
			if (NULL != str) {
				boolean_t	is_string;

				is_string = is_keycol_type_string(key);
				%{}&({{ PP_YDB_OCTO_EXPR }}{}%
				if (LP_AGGREGATE_FUNCTION_MIN == af_type) {
					if (!is_string) {
						%{}<={}%
					} else {
						%{}']{}%
					}
				} else {
					if (!is_string) {
						%{}>{}%
					} else {
						%{}]{}%
					}
				}
				%{}{{ str }}){}%
			}
		} else if (!IS_COLUMN_STRING_TYPE(aggr_column)) {
			%{}&(""'={{ PP_YDB_OCTO_EXPR }}){}%
		}
		%{} {}%
		TMPL(tmpl_key, pplan->outputKey);
		(*buffer_index)--;
		%{},{{ PP_GROUP_BY }},"",{}%

		int	aggregate_cnt;

		aggregate_cnt = af->extra_detail.lp_aggregate_function.aggregate_cnt;
		%{}{{ aggregate_cnt|%d }}{}%
		%{})={{ PP_YDB_OCTO_EXPR }}{}%
		if ((NULL == aggr_column) || ((aggr_column != key_column) && IS_COLUMN_STRING_TYPE(aggr_column))) {
			%{}(1){}%
		}
	}
	return;
}
%{}
