{}%
/****************************************************************
 *								*
 * Copyright (c) 2021-2023 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

#include "octo_types.h"

#include "physical_plan.h"
#include "template_helpers.h"

TEMPLATE(tmpl_update_record_in_table, PhysicalPlan *pplan, int dot_count) {
	LogicalPlan		*lp_update;
	SqlTableAlias		*src_table_alias;
	SqlStatement		*table_stmt;
	SqlTable		*table;

	lp_update = pplan->lp_select_query;
	assert(LP_UPDATE == lp_update->type);
	dot_count++;
	src_table_alias = lp_update->extra_detail.lp_select_query.root_table_alias;
	table_stmt = src_table_alias->table;
	UNPACK_SQL_STATEMENT(table, table_stmt, create_table);

	SqlKey		*key;
	assert(0 < pplan->total_iter_keys);
	key = pplan->iterKeys[pplan->total_iter_keys - 1];

	/* Define the local variable name under which we will store column numbers that have PP_COL(i) initialized.
	 * This will later help us determine list of remaining table columns whose PP_COL(i) has not been initialized.
	 */
	ydb_buffer_t ydboctoTblConstraint;
	YDB_LITERAL_TO_BUFFER(OCTOLIT_YDBOCTOTBLCONSTRAINT, &ydboctoTblConstraint);

	int status;
	status = ydb_delete_s(&ydboctoTblConstraint, 0, NULL, YDB_DEL_TREE);	/* Remove any leftover lvn nodes just in case */
	assert(YDB_OK == status);
	UNUSED(status);	/* needed to avoid [-Wunused-but-set-variable] warning from compiler */

	LogicalPlan *lp_column_list;
	lp_column_list = lp_get_update_column_list(lp_update);

	%{}`n{{ PLAN_LINE_START }}{}%
	TMPL(tmpl_print_dots, dot_count);
	%{}NEW {{ PP_COL }}{}%

	int	num_key_cols_in_set_clause, node_value_fetched;
	num_key_cols_in_set_clause = 0;
	node_value_fetched = FALSE;
	do {
		LogicalPlan	*lp_upd_col_value, *lp_column, *lp_value;
		SqlColumn	*cur_column;
		SqlValue	*piece_value;
		char		*columnName;

		/* ------------------------------------------------------------------------------------
		 * First generate M code to store the post-update column value in lvn PP_COL(column_number)
		 */
		%{}`n{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);
		GET_LP(lp_upd_col_value, lp_column_list, 0, LP_UPD_COL_VALUE);
		GET_LP(lp_column, lp_upd_col_value, 0, LP_COLUMN);
		cur_column = lp_column->v.lp_column.column;
		assert(!cur_column->is_hidden_keycol);

		SqlValue	*colname_value;
		UNPACK_SQL_STATEMENT (colname_value, cur_column->columnName, value);
		columnName = colname_value->v.reference;
		%{}SET {{ PP_COL }}({{ cur_column->column_number|%d }})={}%

		/* Check if the column has size/precision/scale specified. If so, do checks/conversions as appropriate.
		 * Currently the only 2 types that honor the size/precision/scale are STRING_TYPE and NUMERIC_TYPE.
		 * So check for those below (similar code exists in "tmpl_insert_into.ctemplate").
		 */
		/* Generate the size/precision/scale prefix code first */
		switch(cur_column->data_type_struct.data_type) {
		case NUMERIC_TYPE:
		case STRING_TYPE:
			if (SIZE_OR_PRECISION_UNSPECIFIED != cur_column->data_type_struct.size_or_precision) {
				if (NUMERIC_TYPE == cur_column->data_type_struct.data_type) {
					%{}$$Cast2NUMERICWithPrecision^%%ydboctoplanhelpers({}%
				} else {
					%{}$$SizeCheckVARCHAR^%%ydboctoplanhelpers({}%
				}
			}
			break;
		case INTEGER_TYPE:
		case NUL_TYPE:
		case BOOLEAN_TYPE:
			/* No checks are currently done/deemed-necessary for these types. Will add them as the need arises. */
			break;
		default:
			assert(FALSE);
			break;
		}
		/* ------------------------------------------------------------------------------------
		 * Next generate M code that evaluates the specified value for the current column (right side of the store)
		 */
		lp_value = lp_upd_col_value->v.lp_default.operand[1];
		if (LP_KEYWORDS == lp_value->type) {
			if (OPTIONAL_DEFAULT == lp_value->v.lp_keywords.keywords->keyword) {
				/* This is a DEFAULT value assignment. At present this is only allowed for IDENTITY columns.
				 * Parser ensures that this is an IDENTITY column. Go ahead and fetch the auto-incrementing value.
				 */
				assert(IS_COLUMN_IDENTITY(cur_column));
				TMPL(tmpl_identity_column, cur_column);
			}
		} else {
			TMPL(tmpl_print_expression, lp_value, pplan, 0, 0);
		}
		/* Finish emitting the size/precision check suffix for non-key columns */
		switch(cur_column->data_type_struct.data_type) {
		case NUMERIC_TYPE:
		case STRING_TYPE:
			if (SIZE_OR_PRECISION_UNSPECIFIED != cur_column->data_type_struct.size_or_precision) {
				%{},{{ cur_column->data_type_struct.size_or_precision|%d }}{}%
				if (SCALE_UNSPECIFIED != cur_column->data_type_struct.scale) {
					assert(NUMERIC_TYPE == cur_column->data_type_struct.data_type);
					%{},{{ cur_column->data_type_struct.scale|%d }}{}%
				}
				%{}){}%
			}
			break;
		default:
			break;
		}
		SET_TBL_CONSTRAINT_LVN(&ydboctoTblConstraint, cur_column->column_number); /* Note down that this PP_COL(i)
											   * has been initialized.
											   */
		/* Check if column value is NULL and has a NOT NULL constraint. If so issue an error */
		if (IS_COLUMN_NOT_NULL(cur_column)) {
			%{}`n{{ PLAN_LINE_START }}{}%
			TMPL(tmpl_print_dots, dot_count);
			%{}DO:$ZYISSQLNULL({{ PP_COL }}({{ cur_column->column_number|%d }})){}%
			%{} NullColValue^%%ydboctoplanhelpers("{{ columnName }}"){}%
		}
		/* ------------------------------------------------------------------------------------
		 * Do additional processing of the post-update value (check various constraints etc.)
		 */
		if (!IS_KEY_COLUMN(cur_column)) {
			%{}`n{{ PLAN_LINE_START }}{}%
			TMPL(tmpl_print_dots, dot_count);
			/* This is a non-key column */
			%{}SET {}%
			/* Check PIECE number of column (could be missing in non-key columns that have DELIM of "") */
			SqlOptionalKeyword	*keyword;
			keyword = get_keyword(cur_column, OPTIONAL_PIECE);
			if (NULL != keyword) {
				boolean_t	is_dollar_char;
				char		*delim, *piece;

				if (!node_value_fetched) {
					/* This is the first non-key column that has a PIECE number and is in the SET clause.
					 * Before determining the post-update value of this column fetch the entire node value
					 * in the unsubscripted PP_YDB_OCTO_UPD variable in the hope that it will be used
					 * for multiple non-key column updates (saves unnecessary multiple global references).
					 * Note that we do not do a "$GET" before the "tmpl_key_source" call because this is
					 * the UPDATE command and we are guaranteed this runs in TP. In the case of other
					 * callers like "tmpl_column_reference.ctemplate", they could be invoked even for a SELECT
					 * query in which case they are not guaranteed TP and hence need the "$GET" to avoid
					 * GVUNDEF errors.
					 */
					%{}{{ PP_YDB_OCTO_UPD }}={}%
					TMPL(tmpl_key_source, pplan, key, EmitSourceForm_Value);
					node_value_fetched = TRUE;
					%{}`n{{ PLAN_LINE_START }}{}%
					TMPL(tmpl_print_dots, dot_count);
					%{}SET {}%
				}
				UNPACK_SQL_STATEMENT(piece_value, keyword->v, value);
				piece = piece_value->v.string_literal;
				%{}$PIECE({{ PP_YDB_OCTO_UPD }},{}%
				SET_DELIM_AND_IS_DOLLAR_CHAR(table, cur_column, FALSE, delim, is_dollar_char);
					/* sets "delim" and "is_dollar_char" */
				if (is_dollar_char) {
					%{}{{ delim }},{{ piece }})={}%
				} else {
					%{}"{{ delim }}",{{ piece }})={}%
				}
			} else {
				%{}{{ PP_YDB_OCTO_UPD }}={}%
				/* This non-key column does not have a PIECE number so we are going to fetch the current
				 * value directly into PP_YDB_OCTO_UPD local variable. So update tracking variable accordingly.
				 */
				node_value_fetched = TRUE;
			}
			/* Need to convert column value (which could be $ZYQSLNULL) to a piece value (i.e. "") before it can
			 * be used as the entire value or a piece of a global variable node (to avoid ZYSQLNULLNOTVALID errors).
			 */
			%{}$$colvalue2piecevalue^%%ydboctoplanhelpers({}%
			%{}{{ PP_COL }}({{ cur_column->column_number|%d }}){}%
			%{}){}%	/* closing paren for $$colvalue2piecevalue^%ydboctoplanhelpers invocation above */
		} else {
			/* This is a key column. Column value is already available in the desired lvn. */
			num_key_cols_in_set_clause++;
		}
		GET_LP_ALLOW_NULL(lp_column_list, lp_column_list, 1, LP_COLUMN_LIST);
	} while (NULL != lp_column_list);

	if (num_key_cols_in_set_clause) {
		/* UPDATE is modifying at least one key column */
		if (!node_value_fetched) {
			/* Node value is not yet fetched into unsubscripted local variable. So fetch pre-update node value from
			 * global. Needed to set the post-update value of the node. Since this code path is reachable only if
			 * no non-key columns are updated in the SET clause, the pre-update and post-update node values are not
			 * going to be any different so the fetched value is going to be fed directly into the SET command
			 * a few steps later to set the global variable node corresponding to the output row.
			 * See comment in similar block above for why "$GET" is not needed before the "tmpl_key_source" call.
			 */
			%{}`n{{ PLAN_LINE_START }}{}%
			TMPL(tmpl_print_dots, dot_count);
			%{}SET {{ PP_YDB_OCTO_UPD }}=$GET({}%
			TMPL(tmpl_key_source, pplan, key, EmitSourceForm_Value);
			%{}){}%
			node_value_fetched = TRUE;
		}
	}
	/* ------------------------------------------------------------------------------------
	 * If any CHECK constraints are defined for the table, generate code to verify they are met. If not issue error.
	 */
	%{}`n{{ PLAN_LINE_START }}{}%
	LogicalPlan	*lp_constraint, *lp_update_options;
	GET_LP(lp_update_options, lp_update, 1, LP_UPDATE_OPTIONS);
	GET_LP_ALLOW_NULL(lp_constraint, lp_update_options, 1, LP_CONSTRAINT);
	TMPL(tmpl_constraint, pplan, lp_constraint, table, dot_count);
	status = ydb_delete_s(&ydboctoTblConstraint, 0, NULL, YDB_DEL_TREE); /* Remove lvn nodes that tracked PP_COL(i) */
	assert(YDB_OK == status);
	UNUSED(status);	/* needed to avoid [-Wunused-but-set-variable] warning from compiler */

	assert(num_key_cols_in_set_clause == get_num_key_cols_in_set_clause(pplan));
	if (num_key_cols_in_set_clause) {
		/* UPDATE is modifying at least one key column */
		TMPL(tmpl_print_dots, dot_count);
		%{}KILL {}%
		TMPL(tmpl_key_source, pplan, key, EmitSourceForm_Value);
		%{}`n{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);
		%{}SET {}%
		TMPL(tmpl_key_source, pplan, key, EmitSourceForm_UpdateKeyCol);
	} else {
		/* UPDATE is only modifying non-key column(s). Don't need to do as many checks as for key columns. */
		TMPL(tmpl_print_dots, dot_count);
		%{}SET {}%
		TMPL(tmpl_key_source, pplan, key, EmitSourceForm_Value);
	}
	%{}={{ PP_YDB_OCTO_UPD }}{}%
	if (is_update_keycol_or_xref(pplan)) {
		%{}`n{{ PLAN_LINE_START }}{}%
		TMPL(tmpl_print_dots, dot_count);
		%{}SET {}%
		TMPL(tmpl_update_key_source, pplan, FALSE);
		%{}=""{}%
	}
	TMPL(tmpl_set_duplication_check, pplan, dot_count);
	%{}`n{{ PLAN_LINE_START }}{}%
	TMPL(tmpl_print_dots, dot_count);
	%{}IF $INCREMENT({}%
	%{}{{ config->global_names.cursor }}(cursorId,{{ PP_ROW_COUNT }}){}%
	%{}) ; Increment count of updated records{}%
}
%{}
