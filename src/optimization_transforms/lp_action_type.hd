/****************************************************************
 *								*
 * Copyright (c) 2019-2021 YottaDB LLC and/or its subsidiaries.	*
 * All rights reserved.						*
 *								*
 *	This source code contains the intellectual property	*
 *	of its copyright holder(s), and is made available	*
 *	under a license.  If you do not know the terms of	*
 *	the license, please stop and do not read further.	*
 *								*
 ****************************************************************/

LP_ACTION_TYPE(LP_INVALID_ACTION)	// Start with this as it will take the 0 value of enum (default value after octo_cmalloc)
LP_ACTION_TYPE(LP_SELECT_QUERY)		// Used to select data from a table; including temporary tables
LP_ACTION_TYPE(LP_INSERT_INTO)		// Used to insert data into a table
LP_ACTION_TYPE(LP_INSERT_INTO_OPTIONS)	// Used to store more INSERT related information in logical plan
LP_ACTION_TYPE(LP_DELETE_FROM)		// Used to DELETE data from a table
LP_ACTION_TYPE(LP_UPDATE)		// Used to UPDATE data in a table
LP_ACTION_TYPE(LP_SET_OPERATION)	// Used to perform SET operations on logical plans
LP_ACTION_TYPE(LP_TABLE)
LP_ACTION_TYPE(LP_TABLE_JOIN)
LP_ACTION_TYPE(LP_TABLE_VALUE)
LP_ACTION_TYPE(LP_TABLE_DATA)
LP_ACTION_TYPE(LP_ROW_VALUE)
LP_ACTION_TYPE(LP_COLUMN)
LP_ACTION_TYPE(LP_COLUMN_ALIAS)
LP_ACTION_TYPE(LP_COLUMN_LIST_ALIAS)
// This is similiar to ALIAS, but for values from derived tables
//  Gets followed by a KEY and a LP_VALUE indicating the piece num
LP_ACTION_TYPE(LP_DERIVED_COLUMN)
LP_ACTION_TYPE(LP_PIECE_NUMBER)
LP_ACTION_TYPE(LP_VALUE)
LP_ACTION_TYPE(LP_PROJECT)
LP_ACTION_TYPE(LP_SELECT)
LP_ACTION_TYPE(LP_SELECT_OPTIONS)
LP_ACTION_TYPE(LP_SELECT_MORE_OPTIONS)
LP_ACTION_TYPE(LP_AGGREGATE_OPTIONS)
LP_ACTION_TYPE(LP_GROUP_BY)
LP_ACTION_TYPE(LP_HAVING)
LP_ACTION_TYPE(LP_KEYWORDS)
LP_ACTION_TYPE(LP_ARRAY)
// Start of the where subtree
LP_ACTION_TYPE(LP_WHERE)
LP_ACTION_TYPE(LP_CRITERIA)
LP_ACTION_TYPE(LP_OUTPUT)
// Start of the key subtree
LP_ACTION_TYPE(LP_KEYS)
// Each key is one of the below; the LP_KEY type is the start of a
//  unique subkey
LP_ACTION_TYPE(LP_KEY)
LP_ACTION_TYPE(LP_KEY_FIX)
LP_ACTION_TYPE(LP_KEY_ADVANCE)
// These are different way of combining keys
LP_ACTION_TYPE(LP_SET_UNION)
LP_ACTION_TYPE(LP_SET_UNION_ALL)
LP_ACTION_TYPE(LP_SET_DNF)		// LP_SET_UNION_ALL constructed by a Disjunctive Normal Form Expansion
LP_ACTION_TYPE(LP_SET_EXCEPT)
LP_ACTION_TYPE(LP_SET_EXCEPT_ALL)
LP_ACTION_TYPE(LP_SET_INTERSECT)
LP_ACTION_TYPE(LP_SET_INTERSECT_ALL)
// Items for SET_OPERATION
LP_ACTION_TYPE(LP_PLANS)
LP_ACTION_TYPE(LP_SET_OPTION)
// Functions
LP_ACTION_TYPE(LP_FUNCTION_CALL) /* Marks the beginning of a section related to function calls. Has to be start of this section
				  * as there is code that does boolean checks on this (e.g. `LP_FUNCTION_CALL <= type` etc.).
				  * assuming this is the first. Such checks will otherwise break.
				  */
LP_ACTION_TYPE(LP_GREATEST)
LP_ACTION_TYPE(LP_LEAST)
LP_ACTION_TYPE(LP_NULL_IF)
LP_ACTION_TYPE(LP_COALESCE_CALL)
LP_ACTION_TYPE(LP_CASE)
// Note: The order of the below LP_AGGREGATE_FUNCTION_* types should be kept in sync with order of types in `enum SqlAggregateType`
LP_ACTION_TYPE(LP_AGGREGATE_FUNCTION_COUNT_ASTERISK)
LP_ACTION_TYPE(LP_AGGREGATE_FUNCTION_COUNT)
LP_ACTION_TYPE(LP_AGGREGATE_FUNCTION_SUM)
LP_ACTION_TYPE(LP_AGGREGATE_FUNCTION_AVG)
LP_ACTION_TYPE(LP_AGGREGATE_FUNCTION_MIN)
LP_ACTION_TYPE(LP_AGGREGATE_FUNCTION_MAX)
LP_ACTION_TYPE(LP_AGGREGATE_FUNCTION_COUNT_DISTINCT)
LP_ACTION_TYPE(LP_AGGREGATE_FUNCTION_SUM_DISTINCT)
LP_ACTION_TYPE(LP_AGGREGATE_FUNCTION_AVG_DISTINCT)
LP_ACTION_TYPE(LP_AGGREGATE_FUNCTION_COUNT_DISTINCT_TABLE_ASTERISK)
LP_ACTION_TYPE(LP_AGGREGATE_FUNCTION_COUNT_TABLE_ASTERISK)
LP_ACTION_TYPE(LP_AGGREGATE_LAST)
// The order of these must be kept in sync with `enum BinaryOperations` in `src/octo_types.h`
LP_ACTION_TYPE(LP_ADDITION)	/* Marks the beginning of binary/unary/boolean operations. Has to be start of this section
				 * as there is code that does boolean checks on this (e.g. `LP_ADDITION <= type` etc.).
				 * assuming this is the first. Such checks will otherwise break.
				 */
LP_ACTION_TYPE(LP_SUBTRACTION)
LP_ACTION_TYPE(LP_DIVISION)
LP_ACTION_TYPE(LP_MULTIPLICATION)
LP_ACTION_TYPE(LP_MODULO)
LP_ACTION_TYPE(LP_CONCAT)
LP_ACTION_TYPE(LP_BOOLEAN_OR)
LP_ACTION_TYPE(LP_BOOLEAN_AND)
LP_ACTION_TYPE(LP_BOOLEAN_IS)
LP_ACTION_TYPE(LP_BOOLEAN_EQUALS)
LP_ACTION_TYPE(LP_BOOLEAN_NOT_EQUALS)
LP_ACTION_TYPE(LP_BOOLEAN_LESS_THAN)
LP_ACTION_TYPE(LP_BOOLEAN_GREATER_THAN)
LP_ACTION_TYPE(LP_BOOLEAN_LESS_THAN_OR_EQUALS)
LP_ACTION_TYPE(LP_BOOLEAN_GREATER_THAN_OR_EQUALS)
LP_ACTION_TYPE(LP_BOOLEAN_REGEX_SENSITIVE)
LP_ACTION_TYPE(LP_BOOLEAN_REGEX_INSENSITIVE)
LP_ACTION_TYPE(LP_BOOLEAN_REGEX_SENSITIVE_LIKE)
LP_ACTION_TYPE(LP_BOOLEAN_REGEX_INSENSITIVE_LIKE)
LP_ACTION_TYPE(LP_BOOLEAN_REGEX_SENSITIVE_SIMILARTO)
LP_ACTION_TYPE(LP_BOOLEAN_REGEX_INSENSITIVE_SIMILARTO)

LP_ACTION_TYPE(LP_BOOLEAN_IN)
LP_ACTION_TYPE(LP_BOOLEAN_NOT_IN)
LP_ACTION_TYPE(LP_BOOLEAN_ANY_EQUALS)
LP_ACTION_TYPE(LP_BOOLEAN_ANY_NOT_EQUALS)
LP_ACTION_TYPE(LP_BOOLEAN_ANY_LESS_THAN)
LP_ACTION_TYPE(LP_BOOLEAN_ANY_GREATER_THAN)
LP_ACTION_TYPE(LP_BOOLEAN_ANY_LESS_THAN_OR_EQUALS)
LP_ACTION_TYPE(LP_BOOLEAN_ANY_GREATER_THAN_OR_EQUALS)
LP_ACTION_TYPE(LP_BOOLEAN_ALL_EQUALS)
LP_ACTION_TYPE(LP_BOOLEAN_ALL_NOT_EQUALS)
LP_ACTION_TYPE(LP_BOOLEAN_ALL_LESS_THAN)
LP_ACTION_TYPE(LP_BOOLEAN_ALL_GREATER_THAN)
LP_ACTION_TYPE(LP_BOOLEAN_ALL_LESS_THAN_OR_EQUALS)
LP_ACTION_TYPE(LP_BOOLEAN_ALL_GREATER_THAN_OR_EQUALS)
LP_ACTION_TYPE(LP_BOOLEAN_LAST)	/* Marks the end of boolean operations. Any new boolean opcode should be added BEFORE this.
				 * This is because there is code that does boolean checks on this (e.g. `LP_BOOLEAN_LAST > type`)
				 * assuming this is the last of the boolean operations. Such checks will otherwise break.
				 */
// The order of these must be kept in sync with `enum UnaryOperations` in `src/octo_types.h`
LP_ACTION_TYPE(LP_FORCE_NUM)	/* Marks the beginning of unary operations. Has to be start of this section
				 * as there is code that does boolean checks on this (e.g. `LP_FORCE_NUM <= type` etc.).
				 * assuming this is the first. Such checks will otherwise break.
				 */
LP_ACTION_TYPE(LP_NEGATIVE)
LP_ACTION_TYPE(LP_BOOLEAN_NOT)
LP_ACTION_TYPE(LP_BOOLEAN_EXISTS)
LP_ACTION_TYPE(LP_BOOLEAN_NOT_EXISTS)
LP_ACTION_TYPE(LP_BOOLEAN_IS_NULL)
LP_ACTION_TYPE(LP_BOOLEAN_IS_NOT_NULL)
LP_ACTION_TYPE(LP_COERCE_TYPE)	/* There is code that relies on LP_COERCE_TYPE being placed in this unary operations section
				 * (i.e. after LP_FORCE_NUM and before LP_UNARY_LAST) even though there is no parallel
				 * `COERCE_TYPE` definition in the `enum UnaryOperations` list in `src/octo_types.h`.
				 */
LP_ACTION_TYPE(LP_UNARY_LAST)	/* Marks the end of unary operations. Any new unary operation opcode should be added BEFORE this.
				 * This is because there is code that does boolean checks on this (e.g. `LP_UNARY_LAST > type`)
				 * assuming this is the last of the unary operations. Such checks will otherwise break.
				 */
/* The below section is placed AFTER the LP_ADDITION section of binary/unary/boolean operations as this is relied upon by a check
 * (`(LP_ADDITION > type)`) in `lp_apply_not()` function in `src/optimization_transforms/lp_make_normal_disjunctive_form.c`.
 */
LP_ACTION_TYPE(LP_COLUMN_LIST)
LP_ACTION_TYPE(LP_ORDER_BY)
LP_ACTION_TYPE(LP_CASE_STATEMENT)
LP_ACTION_TYPE(LP_CASE_BRANCH)
LP_ACTION_TYPE(LP_CASE_BRANCH_STATEMENT)
LP_ACTION_TYPE(LP_UPD_COL_VALUE)
