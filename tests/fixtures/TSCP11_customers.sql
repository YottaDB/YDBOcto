#################################################################
#								#
# Copyright (c) 2021-2024 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

-- TABLENAME.ASTERISK in Group By
select count(n1.*) from customers as n1 group by n1.*;
select count(n1.*), n1.customer_id from customers as n1 group by n1.*,n1.customer_id;
select count(n1.*) from customers as n1 group by n1.* having (count (n1.*)>1);
select count(n1.customer_id) from customers as n1 group by n1.* having (count (n1.*)=1);
select count(n1.customer_id) from customers as n1 group by n1.*;
select count(n1.customer_id) from customers as n1;
select count(n1.*) from customers as n1;

-- Group BY having reference to parent table `alias1` in exists clause (generated by `QueryGenerator.m`)
SELECT alias1.*, alias1.last_name FROM customers  CROSS JOIN (SELECT DISTINCT alias1.last_name FROM customers alias1 ORDER BY alias1.last_name) AS alias1 INNER JOIN (SELECT alias3.last_name, alias3.email FROM customers alias3 ORDER BY alias3.email, alias3.last_name) AS alias3 ON (((alias1.last_name <= alias3.last_name) AND NOT (alias1.last_name > ALL (SELECT ALL alias4.first_name FROM customers alias4 ORDER BY alias4.first_name LIMIT 1)))) WHERE NOT EXISTS (SELECT MAX(ALL alias6.email) as email, alias6.last_name FROM customers alias6 GROUP BY alias6.last_name, alias1.*, alias1.last_name HAVING MIN(alias6.email) LIKE '%uwl%#' ORDER BY MAX(ALL alias6.email), alias6.last_name) ORDER BY alias1.*, alias1.last_name;

-- Generated by QueryGenerator and failed as NullRows were not processed correctly in the physical plan
SELECT alias1.city,COUNT(alias1.*) FROM orders  LEFT JOIN customers AS alias1 ON (((orders.customer_id = alias1.customer_id)) AND NOT (orders.order_amount = alias1.state)) GROUP BY alias1.*, alias1.city ORDER BY COUNT(alias1.*), alias1.city LIMIT 84;
SELECT ALL COUNT(customers.*) FROM customers  RIGHT JOIN orders AS alias1 ON (((customers.customer_id = alias1.customer_id))) INNER JOIN orders AS alias2 ON (((4 = 3)) OR NOT (alias1.customer_id <= alias2.customer_id)) GROUP BY customers.*, alias2.order_date ORDER BY COUNT(customers.*), alias2.order_date;

-- Following queries are generated by QueryGenerator and failed as NullRows with COUNT DISTINCT usage were not processed correctly in the physical plan
-- A simple query which tests count(DISTINCT table.*) with all columns of alias1 table having artificial null values
SELECT count(DISTINCT alias1.*) FROM orders  LEFT JOIN orders AS alias1 ON (orders.order_date::varchar = alias1.order_amount);
-- Others
SELECT orders.order_date,COUNT(alias1.*) FROM orders  LEFT JOIN orders AS alias1 ON ((orders.order_date::varchar = alias1.order_amount) AND NOT ((orders.customer_id > alias1.customer_id) AND NOT (orders.order_amount < alias1.order_date::varchar))) WHERE ((3 > 1) OR ((orders.order_date = date'09-03-1790'))) GROUP BY alias1.*, orders.order_date HAVING COUNT(DISTINCT alias1.*) IN (1);
SELECT DISTINCT (SELECT DISTINCT alias4.email FROM customers alias4 ORDER BY alias4.email LIMIT 1) AS alias4,COUNT(alias1.*) FROM customers  LEFT JOIN (SELECT ALL alias1.order_amount, alias1.customer_id, alias1.order_date FROM orders alias1 ORDER BY alias1.customer_id, alias1.order_amount, alias1.order_date) AS alias1 ON ((customers.last_name < alias1.order_amount) OR NOT (customers.first_name >= alias1.order_amount) OR NOT ((customers.first_name > SOME (SELECT ALL alias2.last_name FROM customers alias2 ORDER BY alias2.last_name LIMIT 1)))) WHERE customers.address != SOME (SELECT DISTINCT alias5.last_name FROM customers alias5 ORDER BY alias5.last_name LIMIT 1) GROUP BY alias1.* HAVING COUNT(DISTINCT alias1.*) IN (1) ORDER BY COUNT(alias1.*), alias4;
SELECT alias1.address,COUNT(alias2.*) FROM orders  RIGHT JOIN customers AS alias1 ON (((orders.order_amount = alias1.address) AND NOT (orders.order_date::varchar = alias1.first_name)) OR (orders.order_id != 4)) LEFT OUTER JOIN orders AS alias2 ON ((('Charlottesville' < '09/03/1790'))) WHERE orders.order_date BETWEEN date'05-23-1784' AND date'05-23-1784' GROUP BY alias2.*, alias1.address HAVING COUNT(DISTINCT alias2.*) NOT IN (1) ORDER BY COUNT(alias2.*), alias1.address;
SELECT ALL alias6.first_name,COUNT(alias6.*) FROM orders  RIGHT JOIN (SELECT alias1.city, alias1.zipcode, alias1.last_name FROM customers alias1) AS alias1 ON (((orders.order_amount < SOME (SELECT DISTINCT alias2.order_amount FROM orders alias2 ORDER BY alias2.order_amount LIMIT 1))) OR NOT (orders.customer_id != ANY (SELECT DISTINCT alias3.customer_id FROM customers alias3 ORDER BY alias3.customer_id LIMIT 1)) OR NOT (orders.order_date::varchar = ANY (SELECT DISTINCT alias4.address FROM customers alias4 ORDER BY alias4.address LIMIT 1))) RIGHT JOIN (SELECT alias6.email, alias6.first_name, alias6.zipcode FROM customers alias6) AS alias6 ON (((orders.customer_id = ANY (SELECT DISTINCT alias7.order_id FROM orders alias7 ORDER BY alias7.order_id LIMIT 1))) AND NOT (orders.order_amount != alias6.email) AND NOT (orders.order_date::varchar != ALL (SELECT DISTINCT alias8.order_amount FROM orders alias8 ORDER BY alias8.order_amount LIMIT 1))) RIGHT JOIN orders AS alias10 ON ((orders.order_id != alias10.order_id)) WHERE (NOT (3 < 2)) GROUP BY alias6.*, alias6.first_name HAVING COUNT(DISTINCT alias6.*) BETWEEN 1 AND 6;
