#################################################################
#								#
# Copyright (c) 2022 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
}

@test "HDB01 : Can load data into MySQL database/tables and communicate with the MySQL server" {
	for db in mysql postgres
	do
		if [[ "mysql" == $db ]]; then
			echo "SHOW TABLES;" > listdb.sql
		else
			# Delete various temporary tables from Postgres in case they were created by prior test runs
			# and those tests failed before they could delete those temporary tables.
			# Not deleting these could cause this test to fail due to presence of additional tables that
			# this reference file is not aware of. But it is possible the database does not exist at all
			# so check for that first.
			if postgres_database_exists "names"; then
				psql names -c 'DROP TABLE IF EXISTS TDFT01;' >& postgres.drop_table_TDFT01.out
				psql names -c 'DROP TABLE IF EXISTS TDFT08;' >& postgres.drop_table_TDFT08.out
				psql names -c 'DROP TABLE IF EXISTS TUT002; DROP TABLE IF EXISTS TUT002B' >& postgres.drop_table_TUT002.out
				psql names -c 'DROP TABLE IF EXISTS TUT007' >& postgres.drop_table_TUT007.out
				psql names -c 'DROP TABLE IF EXISTS TUT008' >& postgres.drop_table_TUT008.out
				psql names -c 'DROP TABLE IF EXISTS TUT009;' >& postgres.drop_table_TUT009.out
				psql names -c 'drop table if exists TTA005A; drop table if exists TTA005B;' >& postgres.drop_table_TTA005.out
			fi
			if postgres_database_exists "composite"; then
				psql composite -c 'DROP TABLE IF EXISTS TUT010' >& postgres.drop_table_TUT010.out
			fi
			echo "\d" > listdb.sql
		fi

		for schema in $schema_list
		do
			# If the database and/or table already exists, the `create_{mysql,postgres}_database` or
			# `load_{mysql,postgres}_fixture` function invocations might return with a non-zero exit status due to the
			# database being created by a different userid (implying current userid does not have permissions to run
			# CREATE DATABASE) OR due to `\set ON_ERROR_STOP on` usage in the .sql script used by the
			# `load_{mysql,postgres}_fixture` function etc.. Do not consider these as real errors hence the use of the `run`
			# command below to avoid bats from treating this as an error.
			create_${db}_database $schema &> $schema.${db}.create || true
			load_${db}_fixture $schema ${db}-$schema.sql $schema.${db}.load || true
			# Do minimal check of database contents after {mysql,postgres} load
			# First find list of table names in this database/schema
			if [[ "mysql" == $db ]]; then
				run_mysql $schema listdb.sql | grep -v Tables_in | sort >& tables_$schema.txt
			else
				psql $schema -f listdb.sql | grep public | awk '{print $3}' >& tables_$schema.txt
			fi
			declare -a tablearray
			readarray -t tablearray < tables_$schema.txt
			i=0
			while (( ${#tablearray[@]} > i )); do
				tablename=${tablearray[i++]}
				inputfile="input_${schema}_${tablename}.sql"
				outputfile="output_${schema}_${tablename}.txt"
				if [[ "mysql" == $db ]]; then
					if [[ $schema == "sqllogic4" && $tablename == "t1" ]]; then
						echo "select * from $tablename order by id;" > $inputfile
					else
						echo "select * from $tablename;" > $inputfile
					fi
					run_mysql $schema $inputfile >& $outputfile
					# Replace NULL with empty string to match Postgres behavior
					sed -i 's/NULL//g;' $outputfile
				else
					echo "select * from $tablename;" > $inputfile
					psql --no-align $schema -f $inputfile >& $outputfile
				fi
				echo "#######################################################################" >> output.txt
				if [[ "mysql" == $db ]]; then
					echo "# Listing first 3 lines and last 3 lines of [SCHEMA : $schema] [TABLE : $(echo $tablename | tr '[:upper:]' '[:lower:]')]" >> output.txt
				else
					echo "# Listing first 3 lines and last 3 lines of [SCHEMA : $schema] [TABLE : $tablename]" >> output.txt
				fi
				echo "#######################################################################" >> output.txt
				head -1 $outputfile | tr '[:upper:]' '[:lower:]' >> output.txt 2>&1
				sed -n '2,4p' $outputfile | sort >> output.txt 2>&1
				echo "..." >> output.txt
				echo "..." >> output.txt
				if [[ "mysql" == $db ]]; then
					if [[ $tablename == "Shippers" ]]; then
						# Since there are only 3 rows in this table, taking `tail -4`
						# yields the 3 rows plus the column headings at the end,
						# thereby duplicating those taken by `head -1` above.
						tail -3 $outputfile | sort >> output.txt 2>&1
					else
						tail -4 $outputfile | sort >> output.txt 2>&1
					fi
				else
					if [[ $tablename == "shippers" ]]; then
						tail -4 $outputfile | grep -v rows | sort >> output.txt 2>&1
					else
						tail -5 $outputfile | grep -v rows | sort >> output.txt 2>&1
					fi
				fi
			done
		done
		export disable_escape_sequence_sanitize=1
		# Format output to ensure common format across database emulations
		if [[ "mysql" == $db ]]; then
			# Replace tabs with | to match Postgres column delimiter
			sed -i 's/\t/|/g;' output.txt
			# Replace 0.00 with 0 to match Postgres behavior
			# sed -i 's/0\.00/0/g;' output.txt
			# Replace special case where MySQL rounds a 2-decimal place NUMERIC to 0 decimal places
			sed -i 's/bottles|8/bottles|7.75/g;' output.txt
		else
			sed -i 's/|t|/|1|/g;' output.txt
			sed -i 's/|f|/|0|/g;' output.txt
			sed -i 's/|t$/|1/g;' output.txt
			sed -i 's/|f$/|0/g;' output.txt
		fi
		verify_output HDB01 output.txt
		mv output.txt output-$db.txt
	done
}
