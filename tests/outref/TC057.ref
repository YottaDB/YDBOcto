
create table test1 (id int generated by default as identity, name text);
create table test2 (name text, id int generated always as identity);
create table test3 (name text, id int generated by default as identity check (id<3));
create table test4 (name text, id int generated always as identity constraint constr_name check (id<3));
update test4 set id = default; -- This query is used to verify that DEFAULT is seen in Octo log
insert into test3 overriding user value values('first',1); -- Do not expect to see OVERRIDING USER VALUE in insert logical plan
insert into test4(name) overriding system value values('first'); -- Do not expect to see OVERRIDING SYSTEM VALUE in insert logical plan
[ INFO] PATH:LINENUM DATE TIME: INFO_RECORDING_ENV_VARS: # Recording pertinent ydb_* env var values at process startup
[ INFO] PATH:LINENUM DATE TIME: INFO_PARSING_DONE: Parsing done for SQL command [create table test1 (id int generated by default as identity, name text);]
[ INFO] PATH:LINENUM DATE TIME: INFO_CURSOR: Generating SQL for CURSOR_NUM
[ INFO] PATH:LINENUM DATE TIME: INFO_TEXT_REPRESENTATION: CREATE TABLE `TEST1` (`ID` INTEGER GENERATED BY DEFAULT AS IDENTITY PIECE 1, `NAME` VARCHAR PIECE 2) GLOBAL "^%ydboctoDAWV47YRlkCKwacoRVzPt6F(keys(""%YO_KEYCOL""))" DELIM "|" READWRITE;
CREATE TABLE
[ INFO] PATH:LINENUM DATE TIME: INFO_PARSING_DONE: Parsing done for SQL command [create table test2 (name text, id int generated always as identity);]
[ INFO] PATH:LINENUM DATE TIME: INFO_CURSOR: Generating SQL for CURSOR_NUM
[ INFO] PATH:LINENUM DATE TIME: INFO_TEXT_REPRESENTATION: CREATE TABLE `TEST2` (`NAME` VARCHAR PIECE 1, `ID` INTEGER GENERATED ALWAYS AS IDENTITY PIECE 2) GLOBAL "^%ydboctoDFSrMKn3Lwj21xlneHKQWKC(keys(""%YO_KEYCOL""))" DELIM "|" READWRITE;
CREATE TABLE
[ INFO] PATH:LINENUM DATE TIME: INFO_PARSING_DONE: Parsing done for SQL command [create table test3 (name text, id int generated by default as identity check (id<3));]
[ INFO] PATH:LINENUM DATE TIME: INFO_CURSOR: Generating SQL for CURSOR_NUM
[ INFO] PATH:LINENUM DATE TIME: INFO_TEXT_REPRESENTATION: CREATE TABLE `TEST3` (`NAME` VARCHAR PIECE 1, `ID` INTEGER GENERATED BY DEFAULT AS IDENTITY CONSTRAINT TEST3_ID_CHECK CHECK ((ID < 3)) PIECE 2) GLOBAL "^%ydboctoD8ln5Sg9vm1fjrZjMRwXTE0(keys(""%YO_KEYCOL""))" DELIM "|" READWRITE;
CREATE TABLE
[ INFO] PATH:LINENUM DATE TIME: INFO_PARSING_DONE: Parsing done for SQL command [create table test4 (name text, id int generated always as identity constraint constr_name check (id<3));]
[ INFO] PATH:LINENUM DATE TIME: INFO_CURSOR: Generating SQL for CURSOR_NUM
[ INFO] PATH:LINENUM DATE TIME: INFO_TEXT_REPRESENTATION: CREATE TABLE `TEST4` (`NAME` VARCHAR PIECE 1, `ID` INTEGER GENERATED ALWAYS AS IDENTITY CONSTRAINT CONSTR_NAME CHECK ((ID < 3)) PIECE 2) GLOBAL "^%ydboctoDePaDthGUXiUN9RcBaMAk6B(keys(""%YO_KEYCOL""))" DELIM "|" READWRITE;
CREATE TABLE
[ INFO] PATH:LINENUM DATE TIME: INFO_PARSING_DONE: Parsing done for SQL command [update test4 set id = default;]
[ INFO] PATH:LINENUM DATE TIME: INFO_CURSOR: Generating SQL for CURSOR_NUM
[ INFO] PATH:LINENUM DATE TIME: INFO_M_PLAN: Generating M file [$PWD/_ydboctoP*.m] (to execute SQL query)
[DEBUG] PATH:LINENUM DATE TIME: INFO_CURPLAN: LOGICAL_PLAN BEFORE optimize_logical_plan() follows 
LP_UPDATE: 
  LP_PROJECT: 
    LP_SELECT: 
      LP_TABLE_JOIN: 
        LP_TABLE: TEST4(1)
      LP_CRITERIA: 
        LP_KEYS: 
        LP_SELECT_OPTIONS: 
          LP_WHERE: 
          LP_SELECT_MORE_OPTIONS: 
            LP_KEYWORDS: 
  LP_UPDATE_OPTIONS: 
    LP_COLUMN_LIST: 
      LP_UPD_COL_VALUE: 
        LP_COLUMN: ID
        LP_KEYWORDS:  DEFAULT;
    LP_CONSTRAINT: 
      LP_CHECK_CONSTRAINT: CONSTR_NAME
        LP_WHERE: 
          LP_BOOLEAN_LESS_THAN: 
            LP_UPDATE_COL: TEST4(1).ID
            LP_VALUE: '3'

[DEBUG] PATH:LINENUM DATE TIME: INFO_CURPLAN: LOGICAL_PLAN AFTER optimize_logical_plan() follows 
LP_UPDATE: 
  LP_PROJECT: 
    LP_SELECT: 
      LP_TABLE_JOIN: 
        LP_TABLE: TEST4(1)
      LP_CRITERIA: 
        LP_KEYS: 
          LP_KEY: 
          - table_name: TEST4
          - column_name: %YO_KEYCOL
          - unique_id: 1
          - method: LP_KEY_ADVANCE
          - xref_key: false
          - uses_xref_key: false
        LP_SELECT_OPTIONS: 
          LP_WHERE: 
          LP_SELECT_MORE_OPTIONS: 
            LP_KEYWORDS: 
  LP_UPDATE_OPTIONS: 
    LP_COLUMN_LIST: 
      LP_UPD_COL_VALUE: 
        LP_COLUMN: ID
        LP_KEYWORDS:  DEFAULT;
    LP_CONSTRAINT: 
      LP_CHECK_CONSTRAINT: CONSTR_NAME
        LP_WHERE: 
          LP_BOOLEAN_LESS_THAN: 
            LP_UPDATE_COL: TEST4(1).ID
            LP_VALUE: '3'

[ INFO] PATH:LINENUM DATE TIME: INFO_ENTERING_FUNCTION: Entering print_temporary_table
UPDATE 0
[ INFO] PATH:LINENUM DATE TIME: INFO_PARSING_DONE: Parsing done for SQL command [-- This query is used to verify that DEFAULT is seen in Octo log
insert into test3 overriding user value values('first',1);]
[ INFO] PATH:LINENUM DATE TIME: INFO_CURSOR: Generating SQL for CURSOR_NUM
[ INFO] PATH:LINENUM DATE TIME: INFO_M_PLAN: Generating M file [$PWD/_ydboctoP*.m] (to execute SQL query)
[DEBUG] PATH:LINENUM DATE TIME: INFO_CURPLAN: LOGICAL_PLAN BEFORE optimize_logical_plan() follows 
LP_INSERT_INTO: 
  LP_TABLE: TEST3(2)
  LP_INSERT_INTO_OPTIONS: 
    LP_INSERT_INTO_MORE_OPTIONS: 
      LP_TABLE_VALUE: 
        LP_TABLE_DATA: 
          LP_COLUMN_LIST: 
            LP_WHERE: 
              LP_COLUMN_ALIAS: (1).COLUMN1
              LP_COLUMN_LIST_ALIAS: 
              - type: STRING_LITERAL
              - alias: COLUMN1
            LP_WHERE: 
              LP_COLUMN_ALIAS: (1).COLUMN2
              LP_COLUMN_LIST_ALIAS: 
              - type: INTEGER_LITERAL
              - alias: COLUMN2
          LP_ROW_VALUE: 
            LP_COLUMN_LIST: 
              LP_VALUE: 'first'
              LP_VALUE: '1'
        LP_OUTPUT: 
          LP_KEY: 
          - table_name: 
          - column_name: 
          - unique_id: 1
          - method: LP_KEY_ADVANCE
          - xref_key: false
          - uses_xref_key: false
      LP_CONSTRAINT: 
        LP_CHECK_CONSTRAINT: TEST3_ID_CHECK
          LP_WHERE: 
            LP_BOOLEAN_LESS_THAN: 
              LP_INSERT_INTO_COL: TEST3(2).ID
              LP_VALUE: '3'

[DEBUG] PATH:LINENUM DATE TIME: INFO_CURPLAN: LOGICAL_PLAN AFTER optimize_logical_plan() follows 
LP_INSERT_INTO: 
  LP_TABLE: TEST3(2)
  LP_INSERT_INTO_OPTIONS: 
    LP_INSERT_INTO_MORE_OPTIONS: 
      LP_TABLE_VALUE: 
        LP_TABLE_DATA: 
          LP_COLUMN_LIST: 
            LP_WHERE: 
              LP_COLUMN_ALIAS: (1).COLUMN1
              LP_COLUMN_LIST_ALIAS: 
              - type: STRING_LITERAL
              - alias: COLUMN1
            LP_WHERE: 
              LP_COLUMN_ALIAS: (1).COLUMN2
              LP_COLUMN_LIST_ALIAS: 
              - type: INTEGER_LITERAL
              - alias: COLUMN2
          LP_ROW_VALUE: 
            LP_COLUMN_LIST: 
              LP_VALUE: 'first'
              LP_VALUE: '1'
        LP_OUTPUT: 
          LP_KEY: 
          - table_name: 
          - column_name: 
          - unique_id: 1
          - method: LP_KEY_ADVANCE
          - xref_key: false
          - uses_xref_key: false
      LP_CONSTRAINT: 
        LP_CHECK_CONSTRAINT: TEST3_ID_CHECK
          LP_WHERE: 
            LP_BOOLEAN_LESS_THAN: 
              LP_INSERT_INTO_COL: TEST3(2).ID
              LP_VALUE: '3'

[ INFO] PATH:LINENUM DATE TIME: INFO_ENTERING_FUNCTION: Entering print_temporary_table
INSERT 0 1
[ INFO] PATH:LINENUM DATE TIME: INFO_PARSING_DONE: Parsing done for SQL command [-- Do not expect to see OVERRIDING USER VALUE in insert logical plan
insert into test4(name) overriding system value values('first');]
[ INFO] PATH:LINENUM DATE TIME: INFO_CURSOR: Generating SQL for CURSOR_NUM
[ INFO] PATH:LINENUM DATE TIME: INFO_M_PLAN: Generating M file [$PWD/_ydboctoP*.m] (to execute SQL query)
[DEBUG] PATH:LINENUM DATE TIME: INFO_CURPLAN: LOGICAL_PLAN BEFORE optimize_logical_plan() follows 
LP_INSERT_INTO: 
  LP_TABLE: TEST4(2)
  LP_INSERT_INTO_OPTIONS: 
    LP_COLUMN_LIST: 
      LP_COLUMN: NAME
    LP_INSERT_INTO_MORE_OPTIONS: 
      LP_TABLE_VALUE: 
        LP_TABLE_DATA: 
          LP_COLUMN_LIST: 
            LP_WHERE: 
              LP_COLUMN_ALIAS: (1).COLUMN1
              LP_COLUMN_LIST_ALIAS: 
              - type: STRING_LITERAL
              - alias: COLUMN1
          LP_ROW_VALUE: 
            LP_COLUMN_LIST: 
              LP_VALUE: 'first'
        LP_OUTPUT: 
          LP_KEY: 
          - table_name: 
          - column_name: 
          - unique_id: 1
          - method: LP_KEY_ADVANCE
          - xref_key: false
          - uses_xref_key: false
      LP_CONSTRAINT: 
        LP_CHECK_CONSTRAINT: CONSTR_NAME
          LP_WHERE: 
            LP_BOOLEAN_LESS_THAN: 
              LP_INSERT_INTO_COL: TEST4(2).ID
              LP_VALUE: '3'

[DEBUG] PATH:LINENUM DATE TIME: INFO_CURPLAN: LOGICAL_PLAN AFTER optimize_logical_plan() follows 
LP_INSERT_INTO: 
  LP_TABLE: TEST4(2)
  LP_INSERT_INTO_OPTIONS: 
    LP_COLUMN_LIST: 
      LP_COLUMN: NAME
    LP_INSERT_INTO_MORE_OPTIONS: 
      LP_TABLE_VALUE: 
        LP_TABLE_DATA: 
          LP_COLUMN_LIST: 
            LP_WHERE: 
              LP_COLUMN_ALIAS: (1).COLUMN1
              LP_COLUMN_LIST_ALIAS: 
              - type: STRING_LITERAL
              - alias: COLUMN1
          LP_ROW_VALUE: 
            LP_COLUMN_LIST: 
              LP_VALUE: 'first'
        LP_OUTPUT: 
          LP_KEY: 
          - table_name: 
          - column_name: 
          - unique_id: 1
          - method: LP_KEY_ADVANCE
          - xref_key: false
          - uses_xref_key: false
      LP_CONSTRAINT: 
        LP_CHECK_CONSTRAINT: CONSTR_NAME
          LP_WHERE: 
            LP_BOOLEAN_LESS_THAN: 
              LP_INSERT_INTO_COL: TEST4(2).ID
              LP_VALUE: '3'

[ INFO] PATH:LINENUM DATE TIME: INFO_ENTERING_FUNCTION: Entering print_temporary_table
INSERT 0 1
[ INFO] PATH:LINENUM DATE TIME: INFO_PARSING_DONE: Parsing done for SQL command [-- Do not expect to see OVERRIDING SYSTEM VALUE in insert logical plan]
