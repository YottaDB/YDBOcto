
-- TCT011 : OCTO304 : Type cast operator (`::`) does not work
CREATE FUNCTION DOLLARZWRITE(INTEGER) RETURNS VARCHAR AS $ZWRITE;

select id::integer,ABS(2) from names;
select id::integer,(ABS(2)::text || id::text) from names;
select id::integer,(ABS(2)::numeric + id) from names;
select id::text || id::text,ABS(2)::numeric * id from names;
select id from (select * from names UNION select 6.5::integer,'A','B');
select firstname::integer from names;
select * from names where firstname::integer = id;
select id-2*(id/2::integer) from names;
select id-2*((id/2)::integer) from names;
select DOLLARZWRITE(id)::integer from names;

-- Test typecast to boolean. Occasionally test that `bool` is equivalent to `boolean`
select id::boolean,(ABS(2)::boolean || id::bool) from names;
select id::boolean,(ABS(2)::bool + id) from names;
select id::boolean || id::boolean,ABS(2)::numeric * id from names;
select id::boolean || id::boolean,ABS(2)::boolean * id from names;
select id from (select * from names UNION select 6.5::bool,'A','B');
select * from names where firstname::boolean = id;
select id-2*(id/2::bool) from names;
select id-2*((id/2)::boolean) from names;

CREATE FUNCTION
ID|ABS
0|2
1|2
2|2
3|2
4|2
5|2
(6 rows)
ID|ABS
0|20
1|21
2|22
3|23
4|24
5|25
(6 rows)
ID|ABS
0|2
1|3
2|4
3|5
4|6
5|7
(6 rows)
ID|ABS
00|0
11|2
22|4
33|6
44|8
55|10
(6 rows)
ID
0
1
2
3
4
5
6
(7 rows)
FIRSTNAME
0
0
0
0
0
0
(6 rows)
ID|FIRSTNAME|LASTNAME
0|Zero|Cool
(1 row)
ID
0
0
0
0
0
0
(6 rows)
ID
0
1
0
1
0
1
(6 rows)
DOLLARZWRITE
0
1
2
3
4
5
(6 rows)
[ERROR] PATH:LINENUM DATE TIME : ERR_TYPE_NOT_COMPATIBLE : Type BOOLEAN not compatible for || operator
[ERROR] PATH:LINENUM DATE TIME : ERR_TYPE_NOT_COMPATIBLE : Type BOOLEAN not compatible for || operator
[ERROR] PATH:LINENUM DATE TIME : ERR_PARSING_COMMAND : Error parsing statement: select id::boolean,(ABS(2)::boolean || id::bool) from names;
[ERROR] PATH:LINENUM DATE TIME : ERR_TYPE_NOT_COMPATIBLE : Type BOOLEAN not compatible for arithmetic operations
[ERROR] PATH:LINENUM DATE TIME : ERR_PARSING_COMMAND : Error parsing statement: select id::boolean,(ABS(2)::bool + id) from names;
[ERROR] PATH:LINENUM DATE TIME : ERR_TYPE_NOT_COMPATIBLE : Type BOOLEAN not compatible for || operator
[ERROR] PATH:LINENUM DATE TIME : ERR_TYPE_NOT_COMPATIBLE : Type BOOLEAN not compatible for || operator
[ERROR] PATH:LINENUM DATE TIME : ERR_PARSING_COMMAND : Error parsing statement: select id::boolean || id::boolean,ABS(2)::numeric * id from names;
[ERROR] PATH:LINENUM DATE TIME : ERR_TYPE_NOT_COMPATIBLE : Type BOOLEAN not compatible for || operator
[ERROR] PATH:LINENUM DATE TIME : ERR_TYPE_NOT_COMPATIBLE : Type BOOLEAN not compatible for || operator
[ERROR] PATH:LINENUM DATE TIME : ERR_TYPE_NOT_COMPATIBLE : Type BOOLEAN not compatible for arithmetic operations
[ERROR] PATH:LINENUM DATE TIME : ERR_PARSING_COMMAND : Error parsing statement: select id::boolean || id::boolean,ABS(2)::boolean * id from names;
[ERROR] PATH:LINENUM DATE TIME : ERR_SETOPER_TYPE_MISMATCH : UNION types INTEGER and BOOLEAN cannot be matched
Error with syntax near (line 1, column 24):

select id from (select * from names UNION select 6.5::bool,'A','B');
                       ^
Error with syntax near (line 1, column 50):

select id from (select * from names UNION select 6.5::bool,'A','B');
                                                 ^^^^^^^^^
[ERROR] PATH:LINENUM DATE TIME : ERR_PARSING_COMMAND : Error parsing statement: select id from (select * from names UNION select 6.5::bool,'A','B');
[ERROR] PATH:LINENUM DATE TIME : ERR_TYPE_MISMATCH : Type mismatch: left BOOLEAN, right INTEGER
Error with syntax near (line 1, column 48):

select * from names where firstname::boolean = id;
                                               ^^
[ERROR] PATH:LINENUM DATE TIME : ERR_PARSING_COMMAND : Error parsing statement: select * from names where firstname::boolean = id;
[ERROR] PATH:LINENUM DATE TIME : ERR_TYPE_NOT_COMPATIBLE : Type BOOLEAN not compatible for arithmetic operations
[ERROR] PATH:LINENUM DATE TIME : ERR_PARSING_COMMAND : Error parsing statement: select id-2*(id/2::bool) from names;
[ERROR] PATH:LINENUM DATE TIME : ERR_TYPE_NOT_COMPATIBLE : Type BOOLEAN not compatible for arithmetic operations
[ERROR] PATH:LINENUM DATE TIME : ERR_PARSING_COMMAND : Error parsing statement: select id-2*((id/2)::boolean) from names;
;; This is a generated file; do not modify. Generated M code corresponds to below SQL query
;; ---------------------------------------------------------
;  select id-2*((id/2)::integer) from names;
;; ---------------------------------------------------------

octoPlan0(cursorId,wrapInTp)
    NEW %ydboctog,%ydboctop,%ydboctoexpr
    TSTART:wrapInTp ():(serial)
    DO octoPlan1(cursorId)
    TCOMMIT:wrapInTp
    QUIT

octoPlan1(cursorId)
    NEW %ydboctoz,%ydboctoexpr KILL %ydboctocursor(cursorId,"keys",3,"","")
    SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=""
    FOR  SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=$ORDER(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"NAMES","ID")="")  DO
    . SET %ydboctoexpr=1
    . IF %ydboctoexpr DO
    . . SET:1&$INCREMENT(%ydboctocursor(cursorId,"keys",3,"","")) %ydboctoz=42
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . . SET %ydboctoexpr(1)=%ydboctoexpr
    . . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",1))
    . . SET %ydboctoexpr(2)=%ydboctoexpr
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . . SET %ydboctoexpr(4)=%ydboctoexpr
    . . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",2))
    . . SET %ydboctoexpr=%ydboctoexpr(4)/%ydboctoexpr
    . . SET %ydboctoexpr=((%ydboctoexpr)\1)
    . . SET %ydboctoexpr=%ydboctoexpr(2)*%ydboctoexpr
    . . SET %ydboctoexpr=%ydboctoexpr(1)-%ydboctoexpr
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctocursor(cursorId,"keys",3,"","",%ydboctocursor(cursorId,"keys",3,"",""))=%ydboctoexpr
    QUIT
;; This is a generated file; do not modify. Generated M code corresponds to below SQL query
;; ---------------------------------------------------------
;  select DOLLARZWRITE(id)::integer from names;
;; ---------------------------------------------------------

octoPlan0(cursorId,wrapInTp)
    NEW %ydboctog,%ydboctop,%ydboctoexpr
    TSTART:wrapInTp ():(serial)
    DO octoPlan1(cursorId)
    TCOMMIT:wrapInTp
    QUIT

octoPlan1(cursorId)
    NEW %ydboctoz,%ydboctoexpr KILL %ydboctocursor(cursorId,"keys",3,"","")
    SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=""
    FOR  SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=$ORDER(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"NAMES","ID")="")  DO
    . SET %ydboctoexpr=1
    . IF %ydboctoexpr DO
    . . SET:1&$INCREMENT(%ydboctocursor(cursorId,"keys",3,"","")) %ydboctoz=42
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . . SET %ydboctoexpr(2,0)=%ydboctoexpr
    . . SET %ydboctoexpr=$ZWRITE(%ydboctoexpr(2,0))
    . . SET %ydboctoexpr=((%ydboctoexpr)\1)
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctocursor(cursorId,"keys",3,"","",%ydboctocursor(cursorId,"keys",3,"",""))=%ydboctoexpr
    QUIT
;; This is a generated file; do not modify. Generated M code corresponds to below SQL query
;; ---------------------------------------------------------
;  select firstname::integer from names;
;; ---------------------------------------------------------

octoPlan0(cursorId,wrapInTp)
    NEW %ydboctog,%ydboctop,%ydboctoexpr
    TSTART:wrapInTp ():(serial)
    DO octoPlan1(cursorId)
    TCOMMIT:wrapInTp
    QUIT

octoPlan1(cursorId)
    NEW %ydboctoz,%ydboctoexpr KILL %ydboctocursor(cursorId,"keys",3,"","")
    SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=""
    FOR  SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=$ORDER(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"NAMES","ID")="")  DO
    . SET %ydboctoexpr=1
    . IF %ydboctoexpr DO
    . . SET:1&$INCREMENT(%ydboctocursor(cursorId,"keys",3,"","")) %ydboctoz=42
    . . SET %ydboctoexpr=$PIECE($GET(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))),"|",1) SET:(""=%ydboctoexpr) %ydboctoexpr=$ZYSQLNULL
    . . SET %ydboctoexpr=((%ydboctoexpr)\1)
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctocursor(cursorId,"keys",3,"","",%ydboctocursor(cursorId,"keys",3,"",""))=%ydboctoexpr
    QUIT
;; This is a generated file; do not modify. Generated M code corresponds to below SQL query
;; ---------------------------------------------------------
;  select id::text || id::text,ABS(2)::numeric * id from names;
;; ---------------------------------------------------------

octoPlan0(cursorId,wrapInTp)
    NEW %ydboctog,%ydboctop,%ydboctoexpr
    TSTART:wrapInTp ():(serial)
    DO octoPlan1(cursorId)
    TCOMMIT:wrapInTp
    QUIT

octoPlan1(cursorId)
    NEW %ydboctoz,%ydboctoexpr KILL %ydboctocursor(cursorId,"keys",3,"","")
    SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=""
    FOR  SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=$ORDER(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"NAMES","ID")="")  DO
    . SET %ydboctoexpr=1
    . IF %ydboctoexpr DO
    . . SET:1&$INCREMENT(%ydboctocursor(cursorId,"keys",3,"","")) %ydboctoz=42
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . . SET %ydboctoexpr=(%ydboctoexpr)
    . . SET %ydboctoexpr(1)=%ydboctoexpr
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . . SET %ydboctoexpr=(%ydboctoexpr)
    . . SET %ydboctoexpr=%ydboctoexpr(1)_%ydboctoexpr
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr(0)=%ydboctoexpr
    . . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",1))
    . . SET %ydboctoexpr(3,0)=%ydboctoexpr
    . . SET %ydboctoexpr=$$ABS^%ydboctosqlfunctions(%ydboctoexpr(3,0))
    . . SET %ydboctoexpr=($$ForceNumeric^%ydboctoplanhelpers(%ydboctoexpr))
    . . SET %ydboctoexpr(1)=%ydboctoexpr
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . . SET %ydboctoexpr=%ydboctoexpr(1)*%ydboctoexpr
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr=%ydboctoexpr(0)_%ydboctoexpr
    . . SET %ydboctocursor(cursorId,"keys",3,"","",%ydboctocursor(cursorId,"keys",3,"",""))=%ydboctoexpr
    QUIT
;; This is a generated file; do not modify. Generated M code corresponds to below SQL query
;; ---------------------------------------------------------
;  select id::integer,(ABS(2)::numeric + id) from names;
;; ---------------------------------------------------------

octoPlan0(cursorId,wrapInTp)
    NEW %ydboctog,%ydboctop,%ydboctoexpr
    TSTART:wrapInTp ():(serial)
    DO octoPlan1(cursorId)
    TCOMMIT:wrapInTp
    QUIT

octoPlan1(cursorId)
    NEW %ydboctoz,%ydboctoexpr KILL %ydboctocursor(cursorId,"keys",3,"","")
    SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=""
    FOR  SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=$ORDER(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"NAMES","ID")="")  DO
    . SET %ydboctoexpr=1
    . IF %ydboctoexpr DO
    . . SET:1&$INCREMENT(%ydboctocursor(cursorId,"keys",3,"","")) %ydboctoz=42
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . . SET %ydboctoexpr=((%ydboctoexpr)\1)
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr(0)=%ydboctoexpr
    . . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",1))
    . . SET %ydboctoexpr(3,0)=%ydboctoexpr
    . . SET %ydboctoexpr=$$ABS^%ydboctosqlfunctions(%ydboctoexpr(3,0))
    . . SET %ydboctoexpr=($$ForceNumeric^%ydboctoplanhelpers(%ydboctoexpr))
    . . SET %ydboctoexpr(1)=%ydboctoexpr
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . . SET %ydboctoexpr=%ydboctoexpr(1)+%ydboctoexpr
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr=%ydboctoexpr(0)_%ydboctoexpr
    . . SET %ydboctocursor(cursorId,"keys",3,"","",%ydboctocursor(cursorId,"keys",3,"",""))=%ydboctoexpr
    QUIT
;; This is a generated file; do not modify. Generated M code corresponds to below SQL query
;; ---------------------------------------------------------
;  select id from (select * from names UNION select 6.5::integer,'A','B');
;; ---------------------------------------------------------

octoPlan0(cursorId,wrapInTp)
    NEW %ydboctog,%ydboctop,%ydboctoexpr
    TSTART:wrapInTp ():(serial)
    DO octoPlan1(cursorId)
    DO octoPlan2(cursorId)
    DO UNION^%ydboctoplanhelpers(7,8,9)
    DO octoPlan3(cursorId)
    TCOMMIT:wrapInTp
    QUIT

octoPlan1(cursorId)
    NEW %ydboctoz,%ydboctoexpr KILL %ydboctocursor(cursorId,"keys",7,"","")
    SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=""
    FOR  SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=$ORDER(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"NAMES","ID")="")  DO
    . SET %ydboctoexpr=1
    . IF %ydboctoexpr DO
    . . SET:1&$INCREMENT(%ydboctocursor(cursorId,"keys",7,"","")) %ydboctoz=42
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr(0)=%ydboctoexpr
    . . SET %ydboctoexpr=$PIECE($GET(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))),"|",1) SET:(""=%ydboctoexpr) %ydboctoexpr=$ZYSQLNULL
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr=%ydboctoexpr(0)_%ydboctoexpr
    . . SET %ydboctoexpr(0)=%ydboctoexpr
    . . SET %ydboctoexpr=$PIECE($GET(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))),"|",2) SET:(""=%ydboctoexpr) %ydboctoexpr=$ZYSQLNULL
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr=%ydboctoexpr(0)_%ydboctoexpr
    . . SET %ydboctocursor(cursorId,"keys",7,"","",%ydboctocursor(cursorId,"keys",7,"",""))=%ydboctoexpr
    QUIT

octoPlan2(cursorId)
    NEW %ydboctoz,%ydboctoexpr KILL %ydboctocursor(cursorId,"keys",8,"","")
    SET %ydboctocursor(cursorId,"keys",3,"OCTOONEROWTABLE","ID")=""
    FOR  SET %ydboctocursor(cursorId,"keys",3,"OCTOONEROWTABLE","ID")=$ORDER(^%ydboctoocto("tables","octoOneRow",%ydboctocursor(cursorId,"keys",3,"OCTOONEROWTABLE","ID"))) QUIT:(%ydboctocursor(cursorId,"keys",3,"OCTOONEROWTABLE","ID")="")  DO
    . SET %ydboctoexpr=1
    . IF %ydboctoexpr DO
    . . SET:1&$INCREMENT(%ydboctocursor(cursorId,"keys",8,"","")) %ydboctoz=42
    . . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",1))
    . . SET %ydboctoexpr=((%ydboctoexpr)\1)
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr(0)=%ydboctoexpr
    . . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",2))
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr=%ydboctoexpr(0)_%ydboctoexpr
    . . SET %ydboctoexpr(0)=%ydboctoexpr
    . . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",3))
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr=%ydboctoexpr(0)_%ydboctoexpr
    . . SET %ydboctocursor(cursorId,"keys",8,"","",%ydboctocursor(cursorId,"keys",8,"",""))=%ydboctoexpr
    QUIT

octoPlan3(cursorId)
    NEW %ydboctoz,%ydboctoexpr KILL %ydboctocursor(cursorId,"keys",6,"","")
    SET %ydboctocursor(cursorId,"keys",9,"","")=""
    FOR  SET %ydboctocursor(cursorId,"keys",9,"","")=$ORDER(%ydboctocursor(cursorId,"keys",9,"","",%ydboctocursor(cursorId,"keys",9,"",""))) QUIT:(%ydboctocursor(cursorId,"keys",9,"","")="")  DO
    . SET %ydboctoexpr=1
    . IF %ydboctoexpr DO
    . . SET:1&$INCREMENT(%ydboctocursor(cursorId,"keys",6,"","")) %ydboctoz=42
    . . SET %ydboctoexpr=$$mval2str^%ydboctoplanhelpers($$mvalPiece^%ydboctoplanhelpers(%ydboctocursor(cursorId,"keys",9,"","",%ydboctocursor(cursorId,"keys",9,"","")),1))
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctocursor(cursorId,"keys",6,"","",%ydboctocursor(cursorId,"keys",6,"",""))=%ydboctoexpr
    QUIT
;; This is a generated file; do not modify. Generated M code corresponds to below SQL query
;; ---------------------------------------------------------
;  select id::integer,(ABS(2)::text || id::text) from names;
;; ---------------------------------------------------------

octoPlan0(cursorId,wrapInTp)
    NEW %ydboctog,%ydboctop,%ydboctoexpr
    TSTART:wrapInTp ():(serial)
    DO octoPlan1(cursorId)
    TCOMMIT:wrapInTp
    QUIT

octoPlan1(cursorId)
    NEW %ydboctoz,%ydboctoexpr KILL %ydboctocursor(cursorId,"keys",3,"","")
    SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=""
    FOR  SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=$ORDER(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"NAMES","ID")="")  DO
    . SET %ydboctoexpr=1
    . IF %ydboctoexpr DO
    . . SET:1&$INCREMENT(%ydboctocursor(cursorId,"keys",3,"","")) %ydboctoz=42
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . . SET %ydboctoexpr=((%ydboctoexpr)\1)
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr(0)=%ydboctoexpr
    . . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",1))
    . . SET %ydboctoexpr(3,0)=%ydboctoexpr
    . . SET %ydboctoexpr=$$ABS^%ydboctosqlfunctions(%ydboctoexpr(3,0))
    . . SET %ydboctoexpr=(%ydboctoexpr)
    . . SET %ydboctoexpr(1)=%ydboctoexpr
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . . SET %ydboctoexpr=(%ydboctoexpr)
    . . SET %ydboctoexpr=%ydboctoexpr(1)_%ydboctoexpr
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr=%ydboctoexpr(0)_%ydboctoexpr
    . . SET %ydboctocursor(cursorId,"keys",3,"","",%ydboctocursor(cursorId,"keys",3,"",""))=%ydboctoexpr
    QUIT
;; This is a generated file; do not modify. Generated M code corresponds to below SQL query
;; ---------------------------------------------------------
;  select id-2*(id/2::integer) from names;
;; ---------------------------------------------------------

octoPlan0(cursorId,wrapInTp)
    NEW %ydboctog,%ydboctop,%ydboctoexpr
    TSTART:wrapInTp ():(serial)
    DO octoPlan1(cursorId)
    TCOMMIT:wrapInTp
    QUIT

octoPlan1(cursorId)
    NEW %ydboctoz,%ydboctoexpr KILL %ydboctocursor(cursorId,"keys",3,"","")
    SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=""
    FOR  SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=$ORDER(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"NAMES","ID")="")  DO
    . SET %ydboctoexpr=1
    . IF %ydboctoexpr DO
    . . SET:1&$INCREMENT(%ydboctocursor(cursorId,"keys",3,"","")) %ydboctoz=42
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . . SET %ydboctoexpr(1)=%ydboctoexpr
    . . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",1))
    . . SET %ydboctoexpr(2)=%ydboctoexpr
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . . SET %ydboctoexpr(3)=%ydboctoexpr
    . . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",2))
    . . SET %ydboctoexpr=((%ydboctoexpr)\1)
    . . SET %ydboctoexpr=%ydboctoexpr(3)/%ydboctoexpr
    . . SET %ydboctoexpr=%ydboctoexpr(2)*%ydboctoexpr
    . . SET %ydboctoexpr=%ydboctoexpr(1)-%ydboctoexpr
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctocursor(cursorId,"keys",3,"","",%ydboctocursor(cursorId,"keys",3,"",""))=%ydboctoexpr
    QUIT
;; This is a generated file; do not modify. Generated M code corresponds to below SQL query
;; ---------------------------------------------------------
;  select * from names where firstname::integer = id;
;; ---------------------------------------------------------

octoPlan0(cursorId,wrapInTp)
    NEW %ydboctog,%ydboctop,%ydboctoexpr
    TSTART:wrapInTp ():(serial)
    DO octoPlan1(cursorId)
    TCOMMIT:wrapInTp
    QUIT

octoPlan1(cursorId)
    NEW %ydboctoz,%ydboctoexpr KILL %ydboctocursor(cursorId,"keys",3,"","")
    SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=""
    FOR  SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=$ORDER(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"NAMES","ID")="")  DO
    . SET %ydboctoexpr=1
    . SET %ydboctoexpr=$PIECE($GET(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))),"|",1) SET:(""=%ydboctoexpr) %ydboctoexpr=$ZYSQLNULL
    . SET %ydboctoexpr=((%ydboctoexpr)\1)
    . SET %ydboctoexpr(1)=$$ForceNumeric^%ydboctoplanhelpers(%ydboctoexpr)
    . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . SET %ydboctoexpr=$$ForceNumeric^%ydboctoplanhelpers(%ydboctoexpr)
    . SET %ydboctoexpr=%ydboctoexpr(1)=%ydboctoexpr
    . IF %ydboctoexpr DO
    . . SET:1&$INCREMENT(%ydboctocursor(cursorId,"keys",3,"","")) %ydboctoz=42
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr(0)=%ydboctoexpr
    . . SET %ydboctoexpr=$PIECE($GET(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))),"|",1) SET:(""=%ydboctoexpr) %ydboctoexpr=$ZYSQLNULL
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr=%ydboctoexpr(0)_%ydboctoexpr
    . . SET %ydboctoexpr(0)=%ydboctoexpr
    . . SET %ydboctoexpr=$PIECE($GET(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))),"|",2) SET:(""=%ydboctoexpr) %ydboctoexpr=$ZYSQLNULL
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr=%ydboctoexpr(0)_%ydboctoexpr
    . . SET %ydboctocursor(cursorId,"keys",3,"","",%ydboctocursor(cursorId,"keys",3,"",""))=%ydboctoexpr
    QUIT
;; This is a generated file; do not modify. Generated M code corresponds to below SQL query
;; ---------------------------------------------------------
;  select id::integer,ABS(2) from names;
;; ---------------------------------------------------------

octoPlan0(cursorId,wrapInTp)
    NEW %ydboctog,%ydboctop,%ydboctoexpr
    TSTART:wrapInTp ():(serial)
    DO octoPlan1(cursorId)
    TCOMMIT:wrapInTp
    QUIT

octoPlan1(cursorId)
    NEW %ydboctoz,%ydboctoexpr KILL %ydboctocursor(cursorId,"keys",3,"","")
    SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=""
    FOR  SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=$ORDER(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"NAMES","ID")="")  DO
    . SET %ydboctoexpr=1
    . IF %ydboctoexpr DO
    . . SET:1&$INCREMENT(%ydboctocursor(cursorId,"keys",3,"","")) %ydboctoz=42
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . . SET %ydboctoexpr=((%ydboctoexpr)\1)
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr(0)=%ydboctoexpr
    . . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",1))
    . . SET %ydboctoexpr(1,0)=%ydboctoexpr
    . . SET %ydboctoexpr=$$ABS^%ydboctosqlfunctions(%ydboctoexpr(1,0))
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr=%ydboctoexpr(0)_%ydboctoexpr
    . . SET %ydboctocursor(cursorId,"keys",3,"","",%ydboctocursor(cursorId,"keys",3,"",""))=%ydboctoexpr
    QUIT
