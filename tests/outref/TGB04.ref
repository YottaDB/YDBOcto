
-- TGB04 : OCTO55 : Test octo -vv and logical plan output for sample GROUP BY query

SELECT DISTINCT 1 + COUNT(n1.id * 2),n1.firstname from names n1 where n1.id IN (SELECT DISTINCT MAX((n2.id % 3) + 4) from names n2 GROUP BY n2.firstname) GROUP BY n1.firstname ORDER BY 2, 1;

-- OCTO412 : Test that we do not generate M code to unnecessarily compute duplicate aggregate function usage.
-- In the below query, currently COUNT(id) in the SELECT column list and ORDER BY 2 are treated as 1 aggregate function
--	and COUNT(id) in the ORDER BY column list is treated as a 2nd aggregate function use so we expect to see
--	2 aggregate function counts generated in the physical plan. When #414 is fixed, we will see only 1 aggregate function count.
SELECT firstname,COUNT(id) FROM names GROUP BY firstname ORDER BY 2,COUNT(id);

[ INFO] PATH:LINENUM DATE TIME: INFO_RECORDING_ENV_VARS: # Recording pertinent ydb_* env var values at process startup
[ INFO] PATH:LINENUM DATE TIME: INFO_PARSING_DONE: Parsing done for SQL command [SELECT DISTINCT 1 + COUNT(n1.id * 2),n1.firstname from names n1 where n1.id IN (SELECT DISTINCT MAX((n2.id % 3) + 4) from names n2 GROUP BY n2.firstname) GROUP BY n1.firstname ORDER BY 2, 1;]
[ INFO] PATH:LINENUM DATE TIME: INFO_CURSOR: Generating SQL for CURSOR_NUM
[ INFO] PATH:LINENUM DATE TIME: INFO_M_PLAN: Generating M file [$PWD/_ydboctoP*.m] (to execute SQL query)
[DEBUG] PATH:LINENUM DATE TIME: INFO_CURPLAN: LOGICAL_PLAN BEFORE optimize_logical_plan() follows 
LP_SELECT_QUERY: 
  LP_PROJECT: 
    LP_COLUMN_LIST: 
      LP_WHERE: 
        LP_ADDITION: 
          LP_VALUE: '1'
          LP_AGGREGATE_FUNCTION_COUNT: 
            LP_COLUMN_LIST: 
              LP_MULTIPLICATION: 
                LP_COLUMN_ALIAS: N1(1).ID
                LP_VALUE: '2'
        LP_COLUMN_LIST_ALIAS: 
        - type: INTEGER_LITERAL
        - alias: COUNT
      LP_WHERE: 
        LP_COLUMN_ALIAS: N1(1).FIRSTNAME
        LP_COLUMN_LIST_ALIAS: 
        - type: STRING_LITERAL
        - alias: FIRSTNAME
    LP_SELECT: 
      LP_TABLE_JOIN: 
        LP_TABLE: N1
      LP_CRITERIA: 
        LP_KEYS: 
        LP_SELECT_OPTIONS: 
          LP_WHERE: 
            LP_BOOLEAN_IN: 
              LP_COLUMN_ALIAS: N1(1).ID
              LP_SELECT_QUERY: 
                LP_PROJECT: 
                  LP_COLUMN_LIST: 
                    LP_WHERE: 
                      LP_AGGREGATE_FUNCTION_MAX: 
                        LP_COLUMN_LIST: 
                          LP_ADDITION: 
                            LP_MODULO: 
                              LP_COLUMN_ALIAS: N2(2).ID
                              LP_VALUE: '3'
                            LP_VALUE: '4'
                      LP_COLUMN_LIST_ALIAS: 
                      - type: INTEGER_LITERAL
                      - alias: MAX
                  LP_SELECT: 
                    LP_TABLE_JOIN: 
                      LP_TABLE: N2
                    LP_CRITERIA: 
                      LP_KEYS: 
                        LP_KEY: 
                        - table_name: NAMES
                        - column_name: ID
                        - unique_id: 2
                        - method: LP_KEY_ADVANCE
                        - xref_key: false
                        - uses_xref_key: false
                      LP_SELECT_OPTIONS: 
                        LP_WHERE: 
                        LP_SELECT_MORE_OPTIONS: 
                          LP_AGGREGATE_OPTIONS: 
                            LP_GROUP_BY: 
                              LP_COLUMN_LIST: 
                                LP_WHERE: 
                                  LP_COLUMN_ALIAS: N2(2).FIRSTNAME
                                  LP_COLUMN_LIST_ALIAS: 
                                  - type: STRING_LITERAL
                          LP_KEYWORDS:  DISTINCT;
                LP_OUTPUT: 
                  LP_KEY: 
                  - table_name: 
                  - column_name: 
                  - unique_id: 5
                  - method: LP_KEY_ADVANCE
                  - xref_key: false
                  - uses_xref_key: false
          LP_SELECT_MORE_OPTIONS: 
            LP_AGGREGATE_OPTIONS: 
              LP_GROUP_BY: 
                LP_COLUMN_LIST: 
                  LP_WHERE: 
                    LP_COLUMN_ALIAS: N1(1).FIRSTNAME
                    LP_COLUMN_LIST_ALIAS: 
                    - type: STRING_LITERAL
            LP_KEYWORDS:  DISTINCT;
  LP_OUTPUT: 
    LP_KEY: 
    - table_name: 
    - column_name: 
    - unique_id: 6
    - method: LP_KEY_ADVANCE
    - xref_key: false
    - uses_xref_key: false
    LP_ORDER_BY: ORDER BY ASC: 
      LP_COLUMN_LIST: 
        LP_WHERE: 
          LP_COLUMN_ALIAS: N1(1).FIRSTNAME
          LP_COLUMN_LIST_ALIAS: 
          - type: STRING_LITERAL
          - alias: FIRSTNAME
      LP_ORDER_BY: ORDER BY ASC: 
        LP_COLUMN_LIST: 
          LP_WHERE: 
            LP_ADDITION: 
              LP_VALUE: '1'
              LP_AGGREGATE_FUNCTION_COUNT: 
                LP_COLUMN_LIST: 
                  LP_MULTIPLICATION: 
                    LP_COLUMN_ALIAS: N1(1).ID
                    LP_VALUE: '2'
            LP_COLUMN_LIST_ALIAS: 
            - type: INTEGER_LITERAL
            - alias: COUNT

[DEBUG] PATH:LINENUM DATE TIME: INFO_CURPLAN: LOGICAL_PLAN AFTER optimize_logical_plan() follows 
LP_SELECT_QUERY: 
  LP_PROJECT: 
    LP_COLUMN_LIST: 
      LP_WHERE: 
        LP_ADDITION: 
          LP_VALUE: '1'
          LP_AGGREGATE_FUNCTION_COUNT: 
            LP_COLUMN_LIST: 
              LP_MULTIPLICATION: 
                LP_COLUMN_ALIAS: N1(1).ID
                LP_VALUE: '2'
        LP_COLUMN_LIST_ALIAS: 
        - type: INTEGER_LITERAL
        - alias: COUNT
      LP_WHERE: 
        LP_COLUMN_ALIAS: N1(1).FIRSTNAME
        LP_COLUMN_LIST_ALIAS: 
        - type: STRING_LITERAL
        - alias: FIRSTNAME
    LP_SELECT: 
      LP_TABLE_JOIN: 
        LP_TABLE: N1
      LP_CRITERIA: 
        LP_KEYS: 
          LP_KEY: 
          - table_name: NAMES
          - column_name: ID
          - unique_id: 1
          - method: LP_KEY_ADVANCE
          - xref_key: false
          - uses_xref_key: false
        LP_SELECT_OPTIONS: 
          LP_WHERE: 
            LP_BOOLEAN_IN: 
              LP_COLUMN_ALIAS: N1(1).ID
              LP_SELECT_QUERY: 
                LP_PROJECT: 
                  LP_COLUMN_LIST: 
                    LP_WHERE: 
                      LP_AGGREGATE_FUNCTION_MAX: 
                        LP_COLUMN_LIST: 
                          LP_ADDITION: 
                            LP_MODULO: 
                              LP_COLUMN_ALIAS: N2(2).ID
                              LP_VALUE: '3'
                            LP_VALUE: '4'
                      LP_COLUMN_LIST_ALIAS: 
                      - type: INTEGER_LITERAL
                      - alias: MAX
                  LP_SELECT: 
                    LP_TABLE_JOIN: 
                      LP_TABLE: N2
                    LP_CRITERIA: 
                      LP_KEYS: 
                        LP_KEY: 
                        - table_name: NAMES
                        - column_name: ID
                        - unique_id: 2
                        - method: LP_KEY_ADVANCE
                        - xref_key: false
                        - uses_xref_key: false
                      LP_SELECT_OPTIONS: 
                        LP_WHERE: 
                        LP_SELECT_MORE_OPTIONS: 
                          LP_AGGREGATE_OPTIONS: 
                            LP_GROUP_BY: 
                              LP_COLUMN_LIST: 
                                LP_WHERE: 
                                  LP_COLUMN_ALIAS: N2(2).FIRSTNAME
                                  LP_COLUMN_LIST_ALIAS: 
                                  - type: STRING_LITERAL
                          LP_KEYWORDS:  DISTINCT;
                LP_OUTPUT: 
                  LP_KEY: 
                  - table_name: 
                  - column_name: 
                  - unique_id: 5
                  - method: LP_KEY_ADVANCE
                  - xref_key: false
                  - uses_xref_key: false
          LP_SELECT_MORE_OPTIONS: 
            LP_AGGREGATE_OPTIONS: 
              LP_GROUP_BY: 
                LP_COLUMN_LIST: 
                  LP_WHERE: 
                    LP_COLUMN_ALIAS: N1(1).FIRSTNAME
                    LP_COLUMN_LIST_ALIAS: 
                    - type: STRING_LITERAL
            LP_KEYWORDS:  DISTINCT;
  LP_OUTPUT: 
    LP_KEY: 
    - table_name: 
    - column_name: 
    - unique_id: 6
    - method: LP_KEY_ADVANCE
    - xref_key: false
    - uses_xref_key: false
    LP_ORDER_BY: ORDER BY ASC: 
      LP_COLUMN_LIST: 
        LP_WHERE: 
          LP_COLUMN_ALIAS: N1(1).FIRSTNAME
          LP_COLUMN_LIST_ALIAS: 
          - type: STRING_LITERAL
          - alias: FIRSTNAME
      LP_ORDER_BY: ORDER BY ASC: 
        LP_COLUMN_LIST: 
          LP_WHERE: 
            LP_ADDITION: 
              LP_VALUE: '1'
              LP_AGGREGATE_FUNCTION_COUNT: 
                LP_COLUMN_LIST: 
                  LP_MULTIPLICATION: 
                    LP_COLUMN_ALIAS: N1(1).ID
                    LP_VALUE: '2'
            LP_COLUMN_LIST_ALIAS: 
            - type: INTEGER_LITERAL
            - alias: COUNT

[ INFO] PATH:LINENUM DATE TIME: INFO_ENTERING_FUNCTION: Entering print_temporary_table
COUNT|FIRSTNAME
2|Joey
2|Zero
(2 rows)
[ INFO] PATH:LINENUM DATE TIME: INFO_PARSING_DONE: Parsing done for SQL command [--	and COUNT(id) in the ORDER BY column list is treated as a 2nd aggregate function use so we expect to see
--	2 aggregate function counts generated in the physical plan. When #414 is fixed, we will see only 1 aggregate function count.
SELECT firstname,COUNT(id) FROM names GROUP BY firstname ORDER BY 2,COUNT(id);]
[ INFO] PATH:LINENUM DATE TIME: INFO_CURSOR: Generating SQL for CURSOR_NUM
[ INFO] PATH:LINENUM DATE TIME: INFO_M_PLAN: Generating M file [$PWD/_ydboctoP*.m] (to execute SQL query)
[DEBUG] PATH:LINENUM DATE TIME: INFO_CURPLAN: LOGICAL_PLAN BEFORE optimize_logical_plan() follows 
LP_SELECT_QUERY: 
  LP_PROJECT: 
    LP_COLUMN_LIST: 
      LP_WHERE: 
        LP_COLUMN_ALIAS: NAMES(1).FIRSTNAME
        LP_COLUMN_LIST_ALIAS: 
        - type: STRING_LITERAL
        - alias: FIRSTNAME
      LP_WHERE: 
        LP_AGGREGATE_FUNCTION_COUNT: 
          LP_COLUMN_LIST: 
            LP_COLUMN_ALIAS: NAMES(1).ID
        LP_COLUMN_LIST_ALIAS: 
        - type: INTEGER_LITERAL
        - alias: COUNT
    LP_SELECT: 
      LP_TABLE_JOIN: 
        LP_TABLE: NAMES
      LP_CRITERIA: 
        LP_KEYS: 
        LP_SELECT_OPTIONS: 
          LP_WHERE: 
          LP_SELECT_MORE_OPTIONS: 
            LP_AGGREGATE_OPTIONS: 
              LP_GROUP_BY: 
                LP_COLUMN_LIST: 
                  LP_WHERE: 
                    LP_COLUMN_ALIAS: NAMES(1).FIRSTNAME
                    LP_COLUMN_LIST_ALIAS: 
                    - type: STRING_LITERAL
            LP_KEYWORDS: 
  LP_OUTPUT: 
    LP_KEY: 
    - table_name: 
    - column_name: 
    - unique_id: 3
    - method: LP_KEY_ADVANCE
    - xref_key: false
    - uses_xref_key: false
    LP_ORDER_BY: ORDER BY ASC: 
      LP_COLUMN_LIST: 
        LP_WHERE: 
          LP_AGGREGATE_FUNCTION_COUNT: 
            LP_COLUMN_LIST: 
              LP_COLUMN_ALIAS: NAMES(1).ID
          LP_COLUMN_LIST_ALIAS: 
          - type: INTEGER_LITERAL
          - alias: COUNT
      LP_ORDER_BY: ORDER BY ASC: 
        LP_COLUMN_LIST: 
          LP_WHERE: 
            LP_AGGREGATE_FUNCTION_COUNT: 
              LP_COLUMN_LIST: 
                LP_COLUMN_ALIAS: NAMES(1).ID
            LP_COLUMN_LIST_ALIAS: 
            - type: INTEGER_LITERAL

[DEBUG] PATH:LINENUM DATE TIME: INFO_CURPLAN: LOGICAL_PLAN AFTER optimize_logical_plan() follows 
LP_SELECT_QUERY: 
  LP_PROJECT: 
    LP_COLUMN_LIST: 
      LP_WHERE: 
        LP_COLUMN_ALIAS: NAMES(1).FIRSTNAME
        LP_COLUMN_LIST_ALIAS: 
        - type: STRING_LITERAL
        - alias: FIRSTNAME
      LP_WHERE: 
        LP_AGGREGATE_FUNCTION_COUNT: 
          LP_COLUMN_LIST: 
            LP_COLUMN_ALIAS: NAMES(1).ID
        LP_COLUMN_LIST_ALIAS: 
        - type: INTEGER_LITERAL
        - alias: COUNT
    LP_SELECT: 
      LP_TABLE_JOIN: 
        LP_TABLE: NAMES
      LP_CRITERIA: 
        LP_KEYS: 
          LP_KEY: 
          - table_name: NAMES
          - column_name: ID
          - unique_id: 1
          - method: LP_KEY_ADVANCE
          - xref_key: false
          - uses_xref_key: false
        LP_SELECT_OPTIONS: 
          LP_WHERE: 
          LP_SELECT_MORE_OPTIONS: 
            LP_AGGREGATE_OPTIONS: 
              LP_GROUP_BY: 
                LP_COLUMN_LIST: 
                  LP_WHERE: 
                    LP_COLUMN_ALIAS: NAMES(1).FIRSTNAME
                    LP_COLUMN_LIST_ALIAS: 
                    - type: STRING_LITERAL
            LP_KEYWORDS: 
  LP_OUTPUT: 
    LP_KEY: 
    - table_name: 
    - column_name: 
    - unique_id: 3
    - method: LP_KEY_ADVANCE
    - xref_key: false
    - uses_xref_key: false
    LP_ORDER_BY: ORDER BY ASC: 
      LP_COLUMN_LIST: 
        LP_WHERE: 
          LP_AGGREGATE_FUNCTION_COUNT: 
            LP_COLUMN_LIST: 
              LP_COLUMN_ALIAS: NAMES(1).ID
          LP_COLUMN_LIST_ALIAS: 
          - type: INTEGER_LITERAL
          - alias: COUNT
      LP_ORDER_BY: ORDER BY ASC: 
        LP_COLUMN_LIST: 
          LP_WHERE: 
            LP_AGGREGATE_FUNCTION_COUNT: 
              LP_COLUMN_LIST: 
                LP_COLUMN_ALIAS: NAMES(1).ID
            LP_COLUMN_LIST_ALIAS: 
            - type: INTEGER_LITERAL

[ INFO] PATH:LINENUM DATE TIME: INFO_ENTERING_FUNCTION: Entering print_temporary_table
FIRSTNAME|COUNT
Acid|1
Joey|1
Lord|1
Cereal|1
Zero|2
(5 rows)
[ INFO] PATH:LINENUM DATE TIME: INFO_PARSING_DONE: Parsing done for SQL command []
;; This is a generated file; do not modify. Generated M code corresponds to below SQL query
;; ---------------------------------------------------------
;  SELECT DISTINCT 1 + COUNT(n1.id * 2),n1.firstname from names n1 where n1.id IN (SELECT DISTINCT MAX((n2.id % 3) + 4) from names n2 GROUP BY n2.firstname) GROUP BY n1.firstname ORDER BY 2, 1;
;; ---------------------------------------------------------

octoPlan0(cursorId,wrapInTp)
    NEW %ydboctop,%ydboctoexpr
    TSTART:wrapInTp ():(serial)
    DO octoPlan1(cursorId)
    DO octoPlan2(cursorId)
    TCOMMIT:wrapInTp
    QUIT

octoPlan1(cursorId)
    NEW %ydboctoz,%ydboctoexpr,%ydboctog KILL %ydboctocursor(cursorId,"keys",5,"","")
    SET %ydboctocursor(cursorId,"keys",2,"NAMES","ID")=""
    FOR  SET %ydboctocursor(cursorId,"keys",2,"NAMES","ID")=$ORDER(^names(%ydboctocursor(cursorId,"keys",2,"NAMES","ID"))) QUIT:(%ydboctocursor(cursorId,"keys",2,"NAMES","ID")="")  DO
    . SET %ydboctoexpr=1
    . DO:%ydboctoexpr
    . . SET %ydboctoexpr=$PIECE($GET(^names(%ydboctocursor(cursorId,"keys",2,"NAMES","ID"))),"|",1) SET:(""=%ydboctoexpr) %ydboctoexpr=$ZYSQLNULL
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctog=%ydboctoexpr
    . . SET %ydboctocursor(cursorId,"keys",5,"","","GroupBy",%ydboctog)=""
    . . SET %ydboctocursor(cursorId,"keys",5,"","","GroupBy")=%ydboctog
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",2,"NAMES","ID")
    . . SET %ydboctoexpr(2)=%ydboctoexpr
    . . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",3))
    . . SET %ydboctoexpr=%ydboctoexpr(2)#%ydboctoexpr
    . . SET %ydboctoexpr(1)=%ydboctoexpr
    . . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",4))
    . . SET %ydboctoexpr=%ydboctoexpr(1)+%ydboctoexpr
    . . SET %ydboctop=%ydboctoexpr
    . . DO Max^%ydboctoplanhelpers(5,%ydboctog,1,%ydboctop,0)
    ZKILL %ydboctocursor(cursorId,"keys",2,"NAMES","ID")
    SET %ydboctog=""
    FOR  DO:$DATA(%ydboctocursor(cursorId,"keys",5,"","","GroupBy",%ydboctog))  SET %ydboctog=$ORDER(%ydboctocursor(cursorId,"keys",5,"","","GroupBy",%ydboctog)) QUIT:(""=%ydboctog)
    . SET %ydboctoexpr=1
    . SET %ydboctocursor(cursorId,"keys",5,"","","GroupBy")=%ydboctog
    . SET %ydboctoexpr=%ydboctoexpr&('$DATA(%ydboctozdistinct(5,$GET(%ydboctocursor(cursorId,"keys",5,"","","GroupBy",%ydboctocursor(cursorId,"keys",5,"","","GroupBy"),1),$ZYSQLNULL))))
    . DO:%ydboctoexpr
    . . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"keys",5,"","","GroupBy",%ydboctocursor(cursorId,"keys",5,"","","GroupBy"),1),$ZYSQLNULL)
    . . IF $INCREMENT(%ydboctocursor(cursorId,"keys",5,"","",%ydboctoexpr))
    . . SET:1 %ydboctozdistinct(5,$GET(%ydboctocursor(cursorId,"keys",5,"","","GroupBy",%ydboctocursor(cursorId,"keys",5,"","","GroupBy"),1),$ZYSQLNULL))=""
    KILL %ydboctocursor(cursorId,"keys",5,"","","GroupBy")
    KILL %ydboctozdistinct(5)
    QUIT

octoPlan2(cursorId)
    NEW %ydboctoz,%ydboctoexpr,%ydboctog KILL %ydboctocursor(cursorId,"keys",6,"","")
    SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=""
    FOR  SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=$ORDER(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"NAMES","ID")="")  DO
    . SET %ydboctoexpr=1
    . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . SET %ydboctoexpr(1)=%ydboctoexpr
    . SET %ydboctoexpr=$SELECT($ZYISSQLNULL(%ydboctoexpr(1)):$ZYSQLNULL,$DATA(%ydboctocursor(cursorId,"keys",5,"","",%ydboctoexpr(1))):1,$DATA(%ydboctocursor(cursorId,"keys",5,"","",$ZYSQLNULL)):$ZYSQLNULL,1:0)
    . DO:%ydboctoexpr
    . . SET %ydboctoexpr=$PIECE($GET(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))),"|",1) SET:(""=%ydboctoexpr) %ydboctoexpr=$ZYSQLNULL
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctog=%ydboctoexpr
    . . SET %ydboctocursor(cursorId,"keys",6,"","","GroupBy",%ydboctog)=""
    . . SET %ydboctocursor(cursorId,"keys",6,"","","GroupBy")=%ydboctog
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . . SET %ydboctoexpr(1)=%ydboctoexpr
    . . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",2))
    . . SET %ydboctoexpr=%ydboctoexpr(1)*%ydboctoexpr
    . . SET %ydboctop=%ydboctoexpr
    . . DO Count^%ydboctoplanhelpers(6,%ydboctog,1,%ydboctop)
    ZKILL %ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    SET %ydboctog=""
    FOR  DO:$DATA(%ydboctocursor(cursorId,"keys",6,"","","GroupBy",%ydboctog))  SET %ydboctog=$ORDER(%ydboctocursor(cursorId,"keys",6,"","","GroupBy",%ydboctog)) QUIT:(""=%ydboctog)
    . SET %ydboctoexpr=1
    . SET %ydboctocursor(cursorId,"keys",6,"","","GroupBy")=%ydboctog
    . SET %ydboctoexpr=%ydboctoexpr&('$DATA(%ydboctozdistinct(6,($GET(%ydboctocursor(cursorId,"parameters",1))+$GET(%ydboctocursor(cursorId,"keys",6,"","","GroupBy",%ydboctocursor(cursorId,"keys",6,"","","GroupBy"),1),0)),$$mval2str^%ydboctoplanhelpers($$mvalPiece^%ydboctoplanhelpers(%ydboctog,1)))))
    . DO:%ydboctoexpr
    . . SET:1&$INCREMENT(%ydboctocursor(cursorId,"keys",6,"","")) %ydboctoz=42
    . . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",1))
    . . SET %ydboctoexpr(1)=%ydboctoexpr
    . . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"keys",6,"","","GroupBy",%ydboctocursor(cursorId,"keys",6,"","","GroupBy"),1),0)
    . . SET %ydboctoexpr=%ydboctoexpr(1)+%ydboctoexpr
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr(0)=%ydboctoexpr
    . . SET %ydboctoexpr=$$mval2str^%ydboctoplanhelpers($$mvalPiece^%ydboctoplanhelpers(%ydboctog,1))
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr=%ydboctoexpr(0)_%ydboctoexpr
    . . SET %ydboctocursor(cursorId,"keys",6,"","","OrderBy","Z"_$$mval2str^%ydboctoplanhelpers($$mvalPiece^%ydboctoplanhelpers(%ydboctog,1)),$$ForceNumeric^%ydboctoplanhelpers(($GET(%ydboctocursor(cursorId,"parameters",1))+$GET(%ydboctocursor(cursorId,"keys",6,"","","GroupBy",%ydboctocursor(cursorId,"keys",6,"","","GroupBy"),1),0))),%ydboctocursor(cursorId,"keys",6,"",""))=%ydboctoexpr
    . . SET:1 %ydboctozdistinct(6,($GET(%ydboctocursor(cursorId,"parameters",1))+$GET(%ydboctocursor(cursorId,"keys",6,"","","GroupBy",%ydboctocursor(cursorId,"keys",6,"","","GroupBy"),1),0)),$$mval2str^%ydboctoplanhelpers($$mvalPiece^%ydboctoplanhelpers(%ydboctog,1)))=""
    KILL %ydboctocursor(cursorId,"keys",6,"","","GroupBy")
    NEW %ydboctoi  SET %ydboctoi(0)=1
    SET %ydboctoi(1)="" FOR  DO:$DATA(%ydboctocursor(cursorId,"keys",6,"","","OrderBy",%ydboctoi(1)))  SET %ydboctoi(1)=$ORDER(%ydboctocursor(cursorId,"keys",6,"","","OrderBy",%ydboctoi(1)),1)  QUIT:(%ydboctoi(1)="")
    . SET %ydboctoi(2)="" FOR  DO:$DATA(%ydboctocursor(cursorId,"keys",6,"","","OrderBy",%ydboctoi(1),%ydboctoi(2)))  SET %ydboctoi(2)=$ORDER(%ydboctocursor(cursorId,"keys",6,"","","OrderBy",%ydboctoi(1),%ydboctoi(2)),1)  QUIT:(%ydboctoi(2)="")
    . . SET %ydboctoi(3)="" FOR  SET %ydboctoi(3)=$ORDER(%ydboctocursor(cursorId,"keys",6,"","","OrderBy",%ydboctoi(1),%ydboctoi(2),%ydboctoi(3))) QUIT:(%ydboctoi(3)="")  DO
    . . . SET %ydboctocursor(cursorId,"keys",6,"","",%ydboctoi(0))=%ydboctocursor(cursorId,"keys",6,"","","OrderBy",%ydboctoi(1),%ydboctoi(2),%ydboctoi(3))
    . . . IF $INCREMENT(%ydboctoi(0))
    KILL %ydboctocursor(cursorId,"keys",6,"","","OrderBy")
    SET %ydboctocursor(cursorId,"keys",6,"","")=%ydboctoi(0)-1
    KILL %ydboctozdistinct(6)
    QUIT
;; This is a generated file; do not modify. Generated M code corresponds to below SQL query
;; ---------------------------------------------------------
;  --	and COUNT(id) in the ORDER BY column list is treated as a 2nd aggregate function use so we expect to see
;  --	2 aggregate function counts generated in the physical plan. When #414 is fixed, we will see only 1 aggregate function count.
;  SELECT firstname,COUNT(id) FROM names GROUP BY firstname ORDER BY 2,COUNT(id);
;; ---------------------------------------------------------

octoPlan0(cursorId,wrapInTp)
    NEW %ydboctop,%ydboctoexpr
    TSTART:wrapInTp ():(serial)
    DO octoPlan1(cursorId)
    TCOMMIT:wrapInTp
    QUIT

octoPlan1(cursorId)
    NEW %ydboctoz,%ydboctoexpr,%ydboctog KILL %ydboctocursor(cursorId,"keys",3,"","")
    SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=""
    FOR  SET %ydboctocursor(cursorId,"keys",1,"NAMES","ID")=$ORDER(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"NAMES","ID")="")  DO
    . SET %ydboctoexpr=1
    . DO:%ydboctoexpr
    . . SET %ydboctoexpr=$PIECE($GET(^names(%ydboctocursor(cursorId,"keys",1,"NAMES","ID"))),"|",1) SET:(""=%ydboctoexpr) %ydboctoexpr=$ZYSQLNULL
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctog=%ydboctoexpr
    . . SET %ydboctocursor(cursorId,"keys",3,"","","GroupBy",%ydboctog)=""
    . . SET %ydboctocursor(cursorId,"keys",3,"","","GroupBy")=%ydboctog
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . . SET %ydboctop=%ydboctoexpr
    . . DO Count^%ydboctoplanhelpers(3,%ydboctog,2,%ydboctop)
    . . SET %ydboctoexpr=%ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    . . SET %ydboctop=%ydboctoexpr
    . . DO Count^%ydboctoplanhelpers(3,%ydboctog,1,%ydboctop)
    ZKILL %ydboctocursor(cursorId,"keys",1,"NAMES","ID")
    SET %ydboctog=""
    FOR  DO:$DATA(%ydboctocursor(cursorId,"keys",3,"","","GroupBy",%ydboctog))  SET %ydboctog=$ORDER(%ydboctocursor(cursorId,"keys",3,"","","GroupBy",%ydboctog)) QUIT:(""=%ydboctog)
    . SET %ydboctoexpr=1
    . SET %ydboctocursor(cursorId,"keys",3,"","","GroupBy")=%ydboctog
    . DO:%ydboctoexpr
    . . SET:1&$INCREMENT(%ydboctocursor(cursorId,"keys",3,"","")) %ydboctoz=42
    . . SET %ydboctoexpr=$$mval2str^%ydboctoplanhelpers($$mvalPiece^%ydboctoplanhelpers(%ydboctog,1))
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr(0)=%ydboctoexpr
    . . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"keys",3,"","","GroupBy",%ydboctocursor(cursorId,"keys",3,"","","GroupBy"),1),0)
    . . SET %ydboctoexpr=$$str2mval^%ydboctoplanhelpers(%ydboctoexpr)
    . . SET %ydboctoexpr=%ydboctoexpr(0)_%ydboctoexpr
    . . SET %ydboctocursor(cursorId,"keys",3,"","","OrderBy",$$ForceNumeric^%ydboctoplanhelpers($GET(%ydboctocursor(cursorId,"keys",3,"","","GroupBy",%ydboctocursor(cursorId,"keys",3,"","","GroupBy"),1),0)),$$ForceNumeric^%ydboctoplanhelpers($GET(%ydboctocursor(cursorId,"keys",3,"","","GroupBy",%ydboctocursor(cursorId,"keys",3,"","","GroupBy"),2),0)),%ydboctocursor(cursorId,"keys",3,"",""))=%ydboctoexpr
    KILL %ydboctocursor(cursorId,"keys",3,"","","GroupBy")
    NEW %ydboctoi  SET %ydboctoi(0)=1
    SET %ydboctoi(1)="" FOR  DO:$DATA(%ydboctocursor(cursorId,"keys",3,"","","OrderBy",%ydboctoi(1)))  SET %ydboctoi(1)=$ORDER(%ydboctocursor(cursorId,"keys",3,"","","OrderBy",%ydboctoi(1)),1)  QUIT:(%ydboctoi(1)="")
    . SET %ydboctoi(2)="" FOR  DO:$DATA(%ydboctocursor(cursorId,"keys",3,"","","OrderBy",%ydboctoi(1),%ydboctoi(2)))  SET %ydboctoi(2)=$ORDER(%ydboctocursor(cursorId,"keys",3,"","","OrderBy",%ydboctoi(1),%ydboctoi(2)),1)  QUIT:(%ydboctoi(2)="")
    . . SET %ydboctoi(3)="" FOR  SET %ydboctoi(3)=$ORDER(%ydboctocursor(cursorId,"keys",3,"","","OrderBy",%ydboctoi(1),%ydboctoi(2),%ydboctoi(3))) QUIT:(%ydboctoi(3)="")  DO
    . . . SET %ydboctocursor(cursorId,"keys",3,"","",%ydboctoi(0))=%ydboctocursor(cursorId,"keys",3,"","","OrderBy",%ydboctoi(1),%ydboctoi(2),%ydboctoi(3))
    . . . IF $INCREMENT(%ydboctoi(0))
    KILL %ydboctocursor(cursorId,"keys",3,"","","OrderBy")
    SET %ydboctocursor(cursorId,"keys",3,"","")=%ydboctoi(0)-1
    QUIT
