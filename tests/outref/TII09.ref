
-- TII09 : OCTO502 : Test that INSERT INTO correctly adds duplicate rows on table with no primary key columns

CREATE TABLE tmp1 (id INTEGER, firstname VARCHAR);
INSERT INTO tmp1 VALUES (1234, 'First'), (1234, 'First');
INSERT INTO tmp1 SELECT * FROM tmp1;
-- In addition to testing that duplicate rows are printed below, also test that hidden key column %YO_KEYCOL
-- is not printed in case of a SELECT *. Only user specified columns are selected in case * was specified.
SELECT * FROM tmp1;
-- Test that tablename.* syntax also skips hidden key column %YO_KEYCOL like * did above.
SELECT t1.* from tmp1 t1;

-- Test that "%YO_KEYCOL" column is hidden from the user (lower case or upper case names) if it was implicitly inserted by Octo.
-- Test of ERR_UNKNOWN_COLUMN_NAME
SELECT `%yo_keycol` FROM tmp1;
SELECT `%YO_KEYCOL` FROM tmp1;

-- Test that INSERT INTO cannot specify the hidden column by name in the list of columns that it is allowed to optionally specify.
-- Test of ERR_TABLE_UNKNOWN_COLUMN_NAME error
INSERT INTO tmp1(`%yo_keycol`, id) SELECT id, id from tmp1;
INSERT INTO tmp1(id, `%yo_keycol`) SELECT id, id from tmp1;

-- Test that "%YO_KEYCOL" is a column name that can be used in a CREATE TABLE as well as a SELECT if it was NOT an implicitly inserted column.
-- Create a READONLY table tmp2 that uses the same gvn created by the READWRITE table tmp1 so we can see the actual hidden column.
CREATE TABLE tmp2 (`%yo_keycol` INTEGER PRIMARY KEY, id INTEGER, firstname VARCHAR) READONLY GLOBAL "^%ydboctoDAgeMzpAgs346YlVTTNcBB6(keys(""%yo_keycol"")";
SELECT `%yo_keycol` from tmp2;
SELECT * from tmp2;
-- Test that tablename.* syntax produces same output as * did above;
-- i.e. tablename.* syntax includes key column %YO_KEYCOL since it is not a hidden column.
SELECT t2.* from tmp2 t2;

-- Test that cross references get built automatically using the hidden key column for queries that involve key fixing optimization.
CREATE TABLE tmp3 (firstName VARCHAR, lastName varchar) READWRITE;
INSERT INTO tmp3 VALUES (NULL, NULL);
INSERT INTO tmp3 VALUES (NULL, 'last1');
INSERT INTO tmp3 VALUES (NULL, 'last2');
INSERT INTO tmp3 VALUES ('first1', NULL);
INSERT INTO tmp3 VALUES ('first1', 'last1');
INSERT INTO tmp3 VALUES ('first1', 'last2');
INSERT INTO tmp3 VALUES ('first2', NULL);
INSERT INTO tmp3 VALUES ('first2', 'last1');
INSERT INTO tmp3 VALUES ('first2', 'last2');
SELECT * FROM tmp3 WHERE firstname = 'first1';
SELECT * FROM tmp3 WHERE lastname = 'last2';
SELECT * FROM tmp3 WHERE firstname IS NULL;
SELECT * FROM tmp3 WHERE lastname IS NULL;
-- Test that tablename.* syntax uses hidden key column for key fixing optimization where possible just like * did above.
SELECT t3.* FROM tmp3 t3 WHERE firstname = 'first1';
SELECT t3.* FROM tmp3 t3 WHERE lastname = 'last2';
SELECT t3.* FROM tmp3 t3 WHERE firstname IS NULL;
SELECT t3.* FROM tmp3 t3 WHERE lastname IS NULL;
OCTO> CREATE TABLE tmp1 (id INTEGER, firstname VARCHAR);
CREATE TABLE
OCTO> INSERT INTO tmp1 VALUES (1234, 'First'), (1234, 'First');
INSERT 0 2
OCTO> INSERT INTO tmp1 SELECT * FROM tmp1;
INSERT 0 2
OCTO> SELECT * FROM tmp1;
id|firstname
1234|First
1234|First
1234|First
1234|First
(4 rows)
OCTO> SELECT t1.* from tmp1 t1;
id|firstname
1234|First
1234|First
1234|First
1234|First
(4 rows)
[ERROR]: ERR_UNKNOWN_COLUMN_NAME: Unknown column: %yo_keycol
LINE 9:1: SELECT `%yo_keycol` FROM tmp1;
                 ^^^^^^^^^^^^
OCTO> SELECT `%yo_keycol` FROM tmp1;
[ERROR]: ERR_UNKNOWN_COLUMN_NAME: Unknown column: %yo_keycol
LINE 10:1: SELECT `%YO_KEYCOL` FROM tmp1;
                  ^^^^^^^^^^^^
OCTO> SELECT `%YO_KEYCOL` FROM tmp1;
[ERROR]: ERR_TABLE_UNKNOWN_COLUMN_NAME: Column "%yo_keycol" of table "tmp1" does not exist
LINE 12:1: INSERT INTO tmp1(`%yo_keycol`, id) SELECT id, id from tmp1;
                            ^^^^^^^^^^^^
OCTO> INSERT INTO tmp1(`%yo_keycol`, id) SELECT id, id from tmp1;
[ERROR]: ERR_TABLE_UNKNOWN_COLUMN_NAME: Column "%yo_keycol" of table "tmp1" does not exist
LINE 13:1: INSERT INTO tmp1(id, `%yo_keycol`) SELECT id, id from tmp1;
                                ^^^^^^^^^^^^
OCTO> INSERT INTO tmp1(id, `%yo_keycol`) SELECT id, id from tmp1;
OCTO> CREATE TABLE tmp2 (`%yo_keycol` INTEGER PRIMARY KEY, id INTEGER, firstname VARCHAR) READONLY GLOBAL "^%ydboctoDAgeMzpAgs346YlVTTNcBB6(keys(""%yo_keycol"")";
CREATE TABLE
OCTO> SELECT `%yo_keycol` from tmp2;
%yo_keycol
(0 rows)
OCTO> SELECT * from tmp2;
%yo_keycol|id|firstname
(0 rows)
OCTO> SELECT t2.* from tmp2 t2;
%yo_keycol|id|firstname
(0 rows)
OCTO> CREATE TABLE tmp3 (firstName VARCHAR, lastName varchar) READWRITE;
CREATE TABLE
OCTO> INSERT INTO tmp3 VALUES (NULL, NULL);
INSERT 0 1
OCTO> INSERT INTO tmp3 VALUES (NULL, 'last1');
INSERT 0 1
OCTO> INSERT INTO tmp3 VALUES (NULL, 'last2');
INSERT 0 1
OCTO> INSERT INTO tmp3 VALUES ('first1', NULL);
INSERT 0 1
OCTO> INSERT INTO tmp3 VALUES ('first1', 'last1');
INSERT 0 1
OCTO> INSERT INTO tmp3 VALUES ('first1', 'last2');
INSERT 0 1
OCTO> INSERT INTO tmp3 VALUES ('first2', NULL);
INSERT 0 1
OCTO> INSERT INTO tmp3 VALUES ('first2', 'last1');
INSERT 0 1
OCTO> INSERT INTO tmp3 VALUES ('first2', 'last2');
INSERT 0 1
OCTO> SELECT * FROM tmp3 WHERE firstname = 'first1';
firstname|lastname
first1|
first1|last1
first1|last2
(3 rows)
OCTO> SELECT * FROM tmp3 WHERE lastname = 'last2';
firstname|lastname
|last2
first1|last2
first2|last2
(3 rows)
OCTO> SELECT * FROM tmp3 WHERE firstname IS NULL;
firstname|lastname
|
|last1
|last2
(3 rows)
OCTO> SELECT * FROM tmp3 WHERE lastname IS NULL;
firstname|lastname
|
first1|
first2|
(3 rows)
OCTO> SELECT t3.* FROM tmp3 t3 WHERE firstname = 'first1';
firstname|lastname
first1|
first1|last1
first1|last2
(3 rows)
OCTO> SELECT t3.* FROM tmp3 t3 WHERE lastname = 'last2';
firstname|lastname
|last2
first1|last2
first2|last2
(3 rows)
OCTO> SELECT t3.* FROM tmp3 t3 WHERE firstname IS NULL;
firstname|lastname
|
|last1
|last2
(3 rows)
OCTO> SELECT t3.* FROM tmp3 t3 WHERE lastname IS NULL;
firstname|lastname
|
first1|
first2|
(3 rows)
OCTO> 
# Run [mupip extract run.ext]

# Additionally verify that hidden column is not emitted in the text table definition
# But also verify that the hidden column name shows up in the M gvn of the GLOBAL keyword
^%ydboctoschema("tmp1","text",0)="CREATE TABLE `tmp1` (`id` INTEGER PIECE 1, `firstname` VARCHAR PIECE 2) GLOBAL ""^%ydboctoDgVN6HfISi9gTi74HkBOPB4(keys(""""%yo_keycol""""))"" DELIM ""|"" READWRITE;"
# Additionally verify AIM Data got built and has correct contents
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6="^%ydboctoDWjzymDOCs5muUPMLP01DL6"
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(-2)=3
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(-2,"")=3
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(-2,"last1")=3
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(-2,"last2")=3
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(-1)=3
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(-1,"")=3
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(-1,"first1")=3
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(-1,"first2")=3
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(0)="*YottaDB*"
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(1)=1
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(1,"",1)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(1,"",2)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(1,"",3)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(1,"first1",4)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(1,"first1",5)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(1,"first1",6)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(1,"first2",7)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(1,"first2",8)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(1,"first2",9)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(2)="|"
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(2,"",1)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(2,"",4)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(2,"",7)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(2,"last1",2)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(2,"last1",5)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(2,"last1",8)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(2,"last2",3)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(2,"last2",6)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(2,"last2",9)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(3)="#11"
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(4)="#11"
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(5)=""
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(6)="+^%ydboctoDWjzymDOCs5muUPMLP01DL6(sub1=*) -command=set -name=%ydbFMHeFKgBkcA3pvSAg11TA6S -xecute=<<"_$C(10)_" set inccnt=0"_$C(10)_" for i=1,2 set p=$piece($ztoldval,""|"",i),q=$piece($ztvalue,""|"",i),j=-i do"_$C(10)_" . if p'=q do"_$C(10)_" . . if $data(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(i,p,sub1))#10 zkill ^(sub1) set inccnt=inccnt-1 if 1>$increment(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(j,p),-1) zkill ^(p) if 1>$increment(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(j),-1) zkill ^(j)"_$C(10)_" . . if '($data(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(i,q,sub1))#10) set ^(sub1)="""" set inccnt=inccnt+1 if (1=$increment(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(j,q))),$increment(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(j))"_$C(10)_" . else  if '$zlength(q),'($data(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(i,"""",sub1))#10) set ^(sub1)="""" set inccnt=inccnt+1 if (1=$increment(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(j,""""))),$increment(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(j))"_$C(10)_" if inccnt set inccnt=inccnt+^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(11),^(11)=$select(1>inccnt:0,1:inccnt)"_$C(10)
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(7)="+^%ydboctoDWjzymDOCs5muUPMLP01DL6(sub1=*) -command=kill -name=%ydbFMHeFKgBkcA3pvSAg11TA6K -xecute=<<"_$C(10)_" do dft($reference) quit"_$C(10)_" if ^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6"_$C(10)_"dft(var)"_$C(10)_" new sub,vard,vars,varsd,vsroot"_$C(10)_" set vard=$data(@var)"_$C(10)_" do:vard\10"_$C(10)_" . if $qlength(var) set vsroot=$zextract(var,1,$zlength(var)-1)_"","""_$C(10)_" . else  set vsroot=var_""("""_$C(10)_" . set vars=vsroot_""sub)"""_$C(10)_" . set sub="""" for  do  set sub=$order(@vars) quit:'$zlength(sub)"_$C(10)_" . . set varsd=$data(@vars)"_$C(10)_" . . if varsd\10 do dft(vsroot_$zwrite(sub)_"")"")"_$C(10)_" . . else  kill:varsd#10 @(vsroot_$zwrite(sub)_"")"")"_$C(10)_" zkill:vard#10 @var"_$C(10)_" quit"_$C(10)
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(8)="+^%ydboctoDWjzymDOCs5muUPMLP01DL6(sub1=*) -command=zkill -name=%ydbFMHeFKgBkcA3pvSAg11TA6Z -xecute=<<"_$C(10)_" set inccnt=0"_$C(10)_" for i=1,2 set j=-i,p=$piece($ztoldval,""|"",i) if $data(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(i,p,sub1)) zkill ^(sub1) set inccnt=inccnt-1 if 1>$increment(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(j,p),-1) zkill ^(p) zkill:1>$increment(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(j),-1) ^(j)"_$C(10)_" if inccnt set inccnt=inccnt+^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(11),^(11)=$select(1>inccnt:0,1:inccnt)"_$C(10)
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(9)=1
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(10)=2
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(11)=0
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(12)="+^%ydboctoDWjzymDOCs5muUPMLP01DL6 -command=kill -name=%ydbFMHeFKgBkcA3pvSAg11TA60 -xecute=<<"_$C(10)_" do dft($reference) quit"_$C(10)_" if ^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6"_$C(10)_"dft(var)"_$C(10)_" new sub,vard,vars,varsd,vsroot"_$C(10)_" set vard=$data(@var)"_$C(10)_" do:vard\10"_$C(10)_" . if $qlength(var) set vsroot=$zextract(var,1,$zlength(var)-1)_"","""_$C(10)_" . else  set vsroot=var_""("""_$C(10)_" . set vars=vsroot_""sub)"""_$C(10)_" . set sub="""" for  do  set sub=$order(@vars) quit:'$zlength(sub)"_$C(10)_" . . set varsd=$data(@vars)"_$C(10)_" . . if varsd\10 do dft(vsroot_$zwrite(sub)_"")"")"_$C(10)_" . . else  kill:varsd#10 @(vsroot_$zwrite(sub)_"")"")"_$C(10)_" zkill:vard#10 @var"_$C(10)_" quit"_$C(10)
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6("comment-1")="xref for table tmp3 column firstname"
^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6("comment-2")="xref for table tmp3 column lastname"
^%ydbAIMDxref("^%ydboctoDWjzymDOCs5muUPMLP01DL6","^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6")=""
# Verify key fixing optimization happened for = and IS NULL operators in WHERE clause
# Key fixed query will have a plan that does $ORDER(^%ydbAIMD*)
_ydboctoP*.m-;; ---------------------------------------------------------
_ydboctoP*.m:;  SELECT * FROM tmp1;
--
_ydboctoP*.m-;; ---------------------------------------------------------
_ydboctoP*.m:;  SELECT * FROM tmp3 WHERE firstname = 'first1';
--
_ydboctoP*.m-    . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",1))
_ydboctoP*.m:    SET %ydboctocursor(cursorId,"keys",1,"tmp3","firstname")=%ydboctoexpr IF '$ZYISSQLNULL(%ydboctocursor(cursorId,"keys",1,"tmp3","firstname")) IF $DATA(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(1,%ydboctocursor(cursorId,"keys",1,"tmp3","firstname"))) DO
_ydboctoP*.m-    . SET %ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")=""
_ydboctoP*.m:    . FOR  SET %ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")=$ORDER(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(1,%ydboctocursor(cursorId,"keys",1,"tmp3","firstname"),%ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")="")  DO
--
_ydboctoP*.m-;; ---------------------------------------------------------
_ydboctoP*.m:;  SELECT `%yo_keycol` from tmp2;
--
_ydboctoP*.m-;; ---------------------------------------------------------
_ydboctoP*.m:;  SELECT * FROM tmp3 WHERE lastname IS NULL;
--
_ydboctoP*.m-    . SET %ydboctoexpr=$ZYSQLNULL
_ydboctoP*.m:    SET %ydboctocursor(cursorId,"keys",1,"tmp3","lastname")=%ydboctoexpr IF $DATA(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(2,"")) DO
_ydboctoP*.m-    . SET %ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")=""
_ydboctoP*.m:    . FOR  SET %ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")=$ORDER(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(2,"",%ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")="")  DO
--
_ydboctoP*.m-;; ---------------------------------------------------------
_ydboctoP*.m:;  SELECT t3.* FROM tmp3 t3 WHERE lastname IS NULL;
--
_ydboctoP*.m-    . SET %ydboctoexpr=$ZYSQLNULL
_ydboctoP*.m:    SET %ydboctocursor(cursorId,"keys",1,"tmp3","lastname")=%ydboctoexpr IF $DATA(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(2,"")) DO
_ydboctoP*.m-    . SET %ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")=""
_ydboctoP*.m:    . FOR  SET %ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")=$ORDER(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(2,"",%ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")="")  DO
--
_ydboctoP*.m-;; ---------------------------------------------------------
_ydboctoP*.m:;  SELECT t2.* from tmp2 t2;
--
_ydboctoP*.m-;; ---------------------------------------------------------
_ydboctoP*.m:;  SELECT * FROM tmp3 WHERE lastname = 'last2';
--
_ydboctoP*.m-    . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",1))
_ydboctoP*.m:    SET %ydboctocursor(cursorId,"keys",1,"tmp3","lastname")=%ydboctoexpr IF '$ZYISSQLNULL(%ydboctocursor(cursorId,"keys",1,"tmp3","lastname")) IF $DATA(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(2,%ydboctocursor(cursorId,"keys",1,"tmp3","lastname"))) DO
_ydboctoP*.m-    . SET %ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")=""
_ydboctoP*.m:    . FOR  SET %ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")=$ORDER(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(2,%ydboctocursor(cursorId,"keys",1,"tmp3","lastname"),%ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")="")  DO
--
_ydboctoP*.m-;; ---------------------------------------------------------
_ydboctoP*.m:;  SELECT t3.* FROM tmp3 t3 WHERE lastname = 'last2';
--
_ydboctoP*.m-    . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",1))
_ydboctoP*.m:    SET %ydboctocursor(cursorId,"keys",1,"tmp3","lastname")=%ydboctoexpr IF '$ZYISSQLNULL(%ydboctocursor(cursorId,"keys",1,"tmp3","lastname")) IF $DATA(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(2,%ydboctocursor(cursorId,"keys",1,"tmp3","lastname"))) DO
_ydboctoP*.m-    . SET %ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")=""
_ydboctoP*.m:    . FOR  SET %ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")=$ORDER(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(2,%ydboctocursor(cursorId,"keys",1,"tmp3","lastname"),%ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")="")  DO
--
_ydboctoP*.m-;; ---------------------------------------------------------
_ydboctoP*.m:;  SELECT t3.* FROM tmp3 t3 WHERE firstname = 'first1';
--
_ydboctoP*.m-    . SET %ydboctoexpr=$GET(%ydboctocursor(cursorId,"parameters",1))
_ydboctoP*.m:    SET %ydboctocursor(cursorId,"keys",1,"tmp3","firstname")=%ydboctoexpr IF '$ZYISSQLNULL(%ydboctocursor(cursorId,"keys",1,"tmp3","firstname")) IF $DATA(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(1,%ydboctocursor(cursorId,"keys",1,"tmp3","firstname"))) DO
_ydboctoP*.m-    . SET %ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")=""
_ydboctoP*.m:    . FOR  SET %ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")=$ORDER(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(1,%ydboctocursor(cursorId,"keys",1,"tmp3","firstname"),%ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")="")  DO
--
_ydboctoP*.m-;; ---------------------------------------------------------
_ydboctoP*.m:;  SELECT * from tmp2;
--
_ydboctoP*.m-;; ---------------------------------------------------------
_ydboctoP*.m:;  SELECT t3.* FROM tmp3 t3 WHERE firstname IS NULL;
--
_ydboctoP*.m-    . SET %ydboctoexpr=$ZYSQLNULL
_ydboctoP*.m:    SET %ydboctocursor(cursorId,"keys",1,"tmp3","firstname")=%ydboctoexpr IF $DATA(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(1,"")) DO
_ydboctoP*.m-    . SET %ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")=""
_ydboctoP*.m:    . FOR  SET %ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")=$ORDER(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(1,"",%ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")="")  DO
--
_ydboctoP*.m-;; ---------------------------------------------------------
_ydboctoP*.m:;  SELECT * FROM tmp3 WHERE firstname IS NULL;
--
_ydboctoP*.m-    . SET %ydboctoexpr=$ZYSQLNULL
_ydboctoP*.m:    SET %ydboctocursor(cursorId,"keys",1,"tmp3","firstname")=%ydboctoexpr IF $DATA(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(1,"")) DO
_ydboctoP*.m-    . SET %ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")=""
_ydboctoP*.m:    . FOR  SET %ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")=$ORDER(^%ydbAIMDFMHeFKgBkcA3pvSAg11TA6(1,"",%ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol"))) QUIT:(%ydboctocursor(cursorId,"keys",1,"tmp3","%yo_keycol")="")  DO
--
_ydboctoP*.m-;; ---------------------------------------------------------
_ydboctoP*.m:;  INSERT INTO tmp1 SELECT * FROM tmp1;
--
_ydboctoP*.m-;; ---------------------------------------------------------
_ydboctoP*.m:;  SELECT t1.* from tmp1 t1;
