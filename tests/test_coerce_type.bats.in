#################################################################
#								#
# Copyright (c) 2019-2022 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  load_fixture names.sql
  load_fixture names.zwr
  test_port=$(start_rocto 1400 --allowschemachanges)
}

teardown() {
  stop_rocto
}

@test "TCT000: coerce string to INTEGER" {
  load_fixture TCT000.sql subtest novv
  verify_output TCT000 output.txt
}

@test "TCT001: coerce canonical number string to INTEGER" {
  load_fixture TCT001.sql subtest novv
  verify_output TCT001 output.txt
}

@test "TCT002: coerce NUMERIC type to INTEGER" {
  load_fixture TCT002.sql subtest novv
  verify_output TCT002 output.txt
}

@test "TCT003: coerce string to NUMERIC" {
  load_fixture TCT003.sql subtest novv
  verify_output TCT003 output.txt
}

@test "TCT004 : coerce canonical number string to NUMERIC" {
  load_fixture TCT004.sql subtest novv
  verify_output TCT004 output.txt
}

@test "TCT005 : coerce INTEGER type to INTEGER" {
  load_fixture TCT005.sql subtest novv
  verify_output TCT005 output.txt
}

@test "TCT006 : compare integer and numeric types" {
  load_fixture TCT006.sql subtest novv
  verify_output TCT006 output.txt
}

@test "TCT007 : test coerce of functions" {
  load_fixture TCT007.sql subtest novv
  verify_output TCT007 output.txt
}

@test "TCT008 : test 2 coerced functions generate different M files" {
  load_fixture TCT008.sql subtest novv
  echo "Listing of M files, should see 2" | tee -a output.txt
  ls -1 _ydboctoP*.m 2>&1 | tee -a output.txt
  verify_output TCT008 output.txt
}

@test "TCT009 : OCTO394 : Assertion failed in LP_VERIFY_STRUCTURE.C when UNARY + operator is used" {
  load_fixture TCT009.sql subtest novv
  verify_output TCT009 output.txt
}

@test "TCT010 : OCTO437 : DIVZERO error even though query that does no divide by 0 is run with and without :: (type cast operator)" {
  load_fixture TCT010.sql subtest novv
  # Include generated M code in reference file to also verify generated M code
  cat _ydboctoP*.m >> output.txt
  verify_output TCT010 output.txt
}

@test "TCT011 : OCTO304 : Type cast operator (`::`) does not work" {
  load_fixture TCT011.sql subtest novv
  # Include generated M code in reference file to also verify generated M code
  cat _ydboctoP*.m >> output.txt
  verify_output TCT011 output.txt
}

@test "TCT012 : OCTO300 : Octo uses right most type in calculated columns rather than highest precision type" {
  load_fixture TCT012.sql subtest novv
  # Include generated M code in reference file to also verify generated M code
  cat _ydboctoP*.m >> output.txt
  verify_output TCT012 output.txt
}

@test "TCT013 : OCTO235 : Rename INT data type to NUMERIC as we do also support floating-point/decimal numbers" {
  # This test has a few queries that use the Northwind schema so load that too.
  load_fixture northwind.sql
  load_fixture northwind.zwr
  load_fixture TCT013.sql subtest novv
  verify_output TCT013 output.txt
}

@test "TCT014 : OCTO556 : Implement CAST built-in function" {
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TCT014.sql
}

@test "TCT015 : OCTO475 : Multiple usages of the :: (typecast) operator should be accepted" {
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TCT015.sql
  load_fixture TCT015_errors.sql subtest novv
  verify_output TCT015_errors output.txt
}

@test "TCT016 : OCTO568 : Accept non-standard integer types" {
	# Pasted below is a comment from the commit message of da0fb7109b8c627293bd5e490923ee07247dc732 on "useocto" usage.
	# When executed with JDBC client, the queries in TCT016.sql don't have a result set returned in
	# `run_multiple_query_files.java`. As a result the test fails. On manual verification even on Octo
	# there is no row returned. So thought it would be best for now to `useocto` and have it execute as before.
	run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TCT016.sql useocto
}

@test "TCT017 : OCTO636 : SIZE specified in the VARCHAR type of the typecast operator (::) should be honored" {
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TCT017_no_utf8.sql
  if [[ $ydb_chset == "UTF-8" ]]; then
	# On RHEL7 (older version of Postgres) Postgres output is incorrect with UTF-8 characters.
	# So we use a reference file instead for this portion of the test.
	# First run queries that do not have UTF8
	load_fixture TCT017_utf8.sql subtest novv
	verify_output TCT017_utf8 output.txt
  fi
}

@test "TCT018 : OCTO636 : SIZE specified in the NUMERIC type of the typecast operator (::) should be honored" {
  echo "# Run queries from TCT018.sql (expected to run without any errors). Cross check output of Octo against Postgres" > output.txt
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TCT018.sql	# appends to output.txt
  echo "# Run queries that are expected to error out. Cross check against reference file" >> output.txt
  mv output.txt output1.txt
  load_fixture TCT018_errors.sql subtest novv
  mv output.txt output2.txt
  cat output1.txt output2.txt > output.txt
  verify_output TCT018 output.txt
}

@test "TCT019 : OCTO636 : SIZE/PRECISION and/or SCALE differences in typecast operator should not result in different plans" {
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TCT019.sql	# appends to output.txt
  load_fixture TCT019.sql subtest novv
  # Also verify that only a subset of of the above queries generates a unique plan and the rest of the queries map to one another
  # The easiest way to do this is to find out the query (in a commented section) from the _ydboctoP*.m file and add it to the
  # output so it can be compared against the reference file.
  # We expect one plan for just NUMERIC type.
  # We expect one plan when PRECISION is specified with NUMERIC.
  # We expect one plan for when SCALE and PRECISION are specified with NUMERIC.
  # For a total of 3 plans.
  echo "; Queries that have generated plans (expect 3 plans)" >> output.txt 2>&1
  echo "; --------------------------------------------------" >> output.txt 2>&1
  grep SELECT _ydboctoP*.m | cut -d";" -f 2 | sort_LC_ALL_C >> output.txt 2>&1
  verify_output TCT019 output.txt
}

@test "TCT020 : OCTO676 : Casting NULL values to INTEGER/NUMERIC/BOOLEAN type returns incorrect results in some cases" {
	run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TCT020.sql
}

@test "TCT021 : OCTO901 : Validate that type cast from numeric to integer ROUND's and not truncate the decimal part" {
	run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TCT021_names.sql
	load_fixture northwind.sql
	load_fixture northwind.zwr
	run_query_in_octo_and_postgres_and_crosscheck_multiple_queries northwind TCT021_northwind.sql
}
