#################################################################
#								#
# Copyright (c) 2023-2024 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
	init_test
	createdb
	load_fixture names.sql
	load_fixture names.zwr
	test_port=$(start_rocto 1344 --allowschemachanges)
}

teardown() {
	stop_rocto
	corecheck
}


@test "TCV044 : Run crosscheck between Octo and Postgres for queries using VIEW in NAMES dataset queries" {
	# Find list of queries in tests/fixtures/*.sql that are of the form SELECT * FROM NAMES.
	# Skip those queries that use M functions ($$) as they cause Postgres parse issues.
	# Skip those queries that use '' as they are handled differently (Postgres treats them as empty string, Octo treats them as NULL).
	# Skip those queries that are incorrectly terminated (we see such queries end with ",$"). Postgres parses this query and all remaining
	#	queries until the end of the file resulting in lots of queries getting swallowed whereas Octo moves on to the next query.
	# Skip those queries that use JOIN as a "*" from such a query will use more than 3 columns of names making names
	#	not easily substitutable by the view created as a result of this query.
	# Skip those queries that use LIMIT as they can cause crosscheck failures due to different rows being returned in that case
	#	when sub-queries are used with LIMIT
	# Skip those queries that use other views, this results in failure of other views related tests being executed in parallel.
	# 	The issue occurs when this test creates a view making use of other test views and when the other test tries to DROP its view,
	#	an error is seen in Postgres because of the dependency created by this test.
	# And then use [awk -f TCV044.awk] to use this list of queries to generate CREATE VIEW commands.
	# Change upper-case NAMES usage into lower-case names to help TCV044.awk work.
	grep -i '^select \* from \<names\>' @PROJECT_SOURCE_DIR@/tests/fixtures/*.sql | grep -v '\$\$' | grep -v "''" | grep -viE 'JOIN|LIMIT |TCV|,$' | sed 's/\<NAMES\>/names/g' | sed 's/.*.sql://;' >> create_view_queries.sql
	@PROJECT_SOURCE_DIR@/tests/fixtures/sqllogic/split_queries.py create_view_queries.sql "" "0.25"
	cat create_view_queries-*.sql | awk -f @PROJECT_SOURCE_DIR@/tests/fixtures/TCV044.awk > create_view_queries_final.sql

	# Run generated CREATE VIEW commands using Octo and Postgres.
	# Ignore any errors at multiple stages using "|| true" syntax below.
	octo -f create_view_queries_final.sql >& octo.out1 || true
	psql names --no-align -f create_view_queries_final.sql >& psql.out1 || true
	# Find out those views that got successfully created in both Octo AND Postgres.
	# It is possible some views get created in one but not in the other due to various Octo/Postgres differences.
	# Ignore them for now.
	grep '^View "' octo.out1 | sed 's/.* "//;s/"//;' | tr '[:upper:]' '[:lower:]' | sort > octo.viewlist
	grep '^View "' psql.out1 | sed 's/.* "//;s/"//;' | sed 's/public.//;' | sort > psql.viewlist
	join psql.viewlist octo.viewlist > common.viewlist
	common_viewlist=$(cat common.viewlist | grep -vE "d|e" | sed 's/^/CREATE VIEW /;s/$/ /;')
	viewgrep=$(echo "$common_viewlist " | sed 's/CREATE VIEW tcv044_[0-9a-z]* /&|/g;')
	grep -E "$viewgrep CREATE DUMMY" create_view_queries_final.sql > validview.sql
	# validview.sql at this point holds the CREATE VIEW commands corresponding to those views that got successfully created.

	# Determine underlying SELECT queries for those valid views. Store this in validselect.sql
	grep 'CREATE VIEW ' validview.sql | sed 's/^CREATE VIEW tcv044_[0-9a-z]* as //;' | sort -fu > validselect.sql

	# Run this list of SELECT queries through Postgres to determine those queries that issue errors.
	# Filter those queries out of validselect.sql. This filtered list is stored in validselect2.sql.
	psql names -f validselect.sql >& psql.out2 || true
	# It is possible for psql.line2 to be empty when there are no errors, nothing to skip in this case consider the whole file
	grep -i ERROR psql.out2 | sed 's/psql:validselect.sql://;s/:.*//;' > psql.line2
	if [[ -s psql.line2 ]]; then
		awk 'NR==FNR {a[$1]; next}; ! (FNR in a)' psql.line2 validselect.sql >& validselect2.sql
	else
		cp validselect.sql validselect2.sql
	fi
	# Use validselect2.sql to generate a list of transformed SELECT queries that randomly use any of the above VIEWS in place
	# of the names table in the SELECT queries. The M program TCV044.m helps generating this random query list.
	cat validselect2.sql | yottadb -run TCV044 > viewgenqueries.sql

	# Run this generated list of random SELECT queries that in turn use VIEWS in the FROM list through Postgres.
	# It is possible some of these queries issue errors because VIEWS are being actually used in SELECT queries.
	# Filter those queries out and store the filtered list in viewgenqueries2.sql
	psql names -f viewgenqueries.sql >& psql.out3 || true
	grep -i ERROR psql.out3 | sed 's/psql:viewgenqueries.sql://;s/:.*//;' > psql.line3
	# It is possible for psql.line3 to be empty when there are no errors, nothing to skip in this case test the whole file
	if [[ -s psql.line3 ]]; then
		awk 'NR==FNR {a[$1]; next}; ! (FNR in a)' psql.line3 viewgenqueries.sql >& viewgenqueries2.sql
	else
		cp viewgenqueries.sql viewgenqueries2.sql
	fi
	# Run this filtered list of SELECT queries against Postgres and Octo
	psql names -f viewgenqueries2.sql >& psql.out4
	octo -f viewgenqueries2.sql >& octo.out4 || true

	# It is possible that these queries still issue errors in Octo. So filter those queries out and store the
	# filtered list in viewgenqueries6.sql
	grep " row" psql.out4 > psql.out5
	grep -E " row|ERROR" octo.out4 > octo.out5
	grep -n ERROR octo.out5 | sed 's/:.*//;' > octo.line5
	awk 'NR==FNR {a[$1]; next}; ! (FNR in a)' octo.line5 viewgenqueries2.sql > viewgenqueries6.sql

	# It is possible the output order is different between Octo and Postgres since the queries need not use ORDER BY.
	# Also column names in the row header could be different (lower vs upper case).
	# Therefore only check the row count output.
	awk 'NR==FNR {a[$1]; next}; ! (FNR in a)' octo.line5 psql.out5 > psql.out6
	awk 'NR==FNR {a[$1]; next}; ! (FNR in a)' octo.line5 octo.out5 > octo.out6
	diff psql.out6 octo.out6

	# Drop all views in names schema in Postgres at the end of the test as we will otherwise cause issues for other tests.
	# Running dropview.sql will give us a list of SQL queries that drop the needed views.
	cat << CAT_EOF > dropview.sql
	SELECT 'DROP VIEW ' || table_name || ' CASCADE;' FROM information_schema.views
	WHERE table_schema NOT IN ('pg_catalog', 'information_schema') AND table_name !~ '^pg_' AND table_name ~ 'tcv044';
CAT_EOF
	psql names -f dropview.sql | grep -v 'column' | grep -v rows | psql names || true	# || true needed to avoid any errors while deleting views
}

# To add any new subtest refer to the comments at the end of test_create_view1_1.bats.in
