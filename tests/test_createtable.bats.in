#################################################################
#								#
# Copyright (c) 2019-2021 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
	init_test
	createdb
	# Below is at least needed by TC015 as it does a DROP TABLE and expects underlying M global ^names to not be deleted.
	# Below is also needed by TC037 as it does a CREATE TABLE without using READONLY but using keywords that are not
	# compatible with the default READWRITE.
	echo 'tabletype = "READONLY"' > octo.conf
	load_fixture names.sql
	load_fixture names.zwr
	# Start and stop rocto for all tests. This is needed because `stop_rocto` will not run when it is included in a test case
	# but that test case fails before reaching this call. Automatically doing it with `teardown` avoids this issue.
	test_port=$(start_rocto 1400 --allowschemachanges)
}

teardown() {
	stop_rocto
}

@test "TC001 : create a table so large it can't fit in the buffer" {
  # Generate a file with the mapping
  cat <<OCTO > table1.sql
CREATE TABLE table1 (
  id INTEGER PRIMARY KEY
  $(for i in $(seq 1 2000); do echo ", column$i VARCHAR"; done)
);
OCTO
  # Load the table schema into octo
  octo -f table1.sql >& output.txt
  # Verify that the table created above exists by doing a SELECT (will return no rows since it does not have data).
  octo <<OCTO 2>&1 | tee -a output.txt
SELECT * from table1;
OCTO
  verify_output TC001 output.txt noinfo nodebug
}

@test "TC001A : create table with key in extract" {
  octo <<OCTO 2>&1 | tee output.txt
CREATE TABLE namesE(
  id INTEGER PRIMARY KEY,
  firstName VARCHAR EXTRACT "^names(keys(""id""))",
  lastName VARCHAR
) GLOBAL "^names(keys(""id""))";
OCTO
  run octo <<OCTO
SELECT * FROM namesE;
OCTO
  [ "$status" -eq 0 ]
}

@test "TC001B : create multiple tables in sequence" {
  octo <<OCTO 2>&1 | tee output.txt
CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY);
CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY);
OCTO
  [ "$?" -eq 0 ]
}

@test "TC002 : create a table which has no keys" {
  octo <<OCTO 2>&1 | tee output.txt
create table names4 (id int, First char(20), Last char(30));
OCTO
  load_fixture names4.zwr
  verify_output TC002 output.txt noinfo nodebug
}

@test "TC003 : create a table which has no keys and select from it later" {
  load_fixture names4.zwr
  octo <<OCTO 2>&1 | tee output.txt
create table names4 (id int, First char(20), Last char(30));
select * from names4;
OCTO
  verify_output TC003 output.txt noinfo nodebug
}

@test "TC004 : recreate a cached table and check that the cached version is deleted" {
	# create a row that will change when more columns are added
	yottadb -run %XCMD 'set ^T1(1)="2|3|4"'
	load_fixture TC004.sql subtest novv
	verify_output TC004 output.txt noinfo nodebug
}

@test "TC005 : create a table with duplicate primary keys then select from it" {
  octo <<OCTO 2>&1 | tee output.txt
create table t1 (a int primary key, b int primary key);
select * from t1;
OCTO
  verify_output TC005 output.txt noinfo nodebug
}

@test "TC006 : create a table with duplicate key nums then select from it" {
  octo <<OCTO 2>&1 | tee output.txt
create table t1 (a int primary key, b int key num 1, c int key num 1);
select * from t1;
OCTO
  verify_output TC006 output.txt noinfo nodebug
}

@test "TC007 : create a table with gaps in key nums then select from it" {
  octo <<OCTO 2>&1 | tee output.txt
create table t1 (a int key num 10, b int key num 5, c int key num 7);
select * from t1;
OCTO
  verify_output TC007 output.txt noinfo nodebug
}

@test "TC008 : create a table with an INTEGER and NUMERIC columns with decimals and integers stored in both" {
  yottadb -run %XCMD 'kill ^T1 set ^T1(1,2.2,3.3)="1.1|2|3"'
  octo <<OCTO 2>&1 | tee output.txt
create table t1 (a int primary key, b int, c numeric, d numeric key num 1, e int, f int key num 2) global "^T1(keys(""a""),keys(""d""),keys(""f""))";
select * from t1;
drop table t1;
OCTO
  verify_output TC008 output.txt
}

@test "TC009 : create a table with INTEGER and NUMERIC column types with strings stored in both" {
  yottadb -run %XCMD 'kill ^T1 set ^T1("hello")="world"'
  octo <<OCTO 2>&1 | tee output.txt
create table t1(a int primary key, b numeric) global "^T1(keys(""a""))";
select * from t1;
drop table t1;
OCTO
  verify_output TC009 output.txt
}

@test "TC010 : OCTO381 : Allow DATE and TIME types to be specified in the Octo DDL but treated as strings internally" {
	yottadb -run TC010	# load ^datetime global
	load_fixture TC010.sql subtest novv
	# Do not use `verify_output` here as we do not want DATE/TIME substitutions to happen
	# but want to see the actual date/time strings from the ^datetime global displayed in the reference file.
	# That said, there are a few date/time usages that will show up in error message that we want taken out as they
	# correspond to non-deterministic output.
	cp output.txt clean_output.txt
	sed -i 's/[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}/DATE TIME/g' clean_output.txt
	filter_file_path
	# Strip config file loading message as it is irrelevant to the behavior under test and can cause failures depending on
	# installation configuration
	sed -i '/Loading config from/d' clean_output.txt
	diff @PROJECT_SOURCE_DIR@/tests/outref/TC010.ref clean_output.txt
}

@test "TC011 : OCTO411 : Add support for INTEGER precision specification to parser for CREATE TABLE statements" {
  load_fixture TC011.sql subtest novv
  verify_output TC011 output.txt
}

@test "TC012 : OCTO484 : PIECE numbers of non-primary-key columns specified in CREATE TABLE should start at 1 by default" {
  yottadb -dir << "END" 2>&1 | tee ydbsets.txt
set prefix="^%ydboctoD"
set @(prefix_$zysuffix("SIMPLE0"))@(1)=""
set @(prefix_$zysuffix("SIMPLE1"))@(1)="First"
set @(prefix_$zysuffix("SIMPLE2"))@(1)="First|Last"
END
  load_fixture TC012.sql subtest novv
  verify_output TC012 output.txt
}

@test "TC013 : OCTO439 : CREATE TABLE and SELECT can run concurrently without errors/assertions" {
  # This subtest no longer works because CREATE TABLE of an already existing table issues a ERR_CANNOT_CREATE_TABLE error
  # as part of OCTO669 changes. To fix that, we can do a DROP TABLE before the CREATE TABLE but that creates a small window
  # when the table does not exist (in between the DROP TABLE and CREATE TABLE commands) and if a concurrently running
  # SELECT references this table then it will issue an error. If we support transactions (i.e. BEGIN/END sql commands) then
  # we can get this test to work as the DROP TABLE and CREATE TABLE can be enclosed within a BEGIN/END transaction. Until
  # then, we have to skip this test.
  skip		# TODO : YDBOcto#610 : Remove this line once BEGIN/END are supported.
  export octo_dbg_drop_cache_expected=1	# needed to let Octo/Rocto know that concurrent DROP TABLE commands run in this test
  echo "# Populate ^lotsofcols globals and create ddl.sql containing lots of CREATE TABLE commands : yottadb -run init^TC013" > output.txt
  yottadb -run init^TC013
  echo "# Create LOTSOFCOLS table before starting concurrency test : octo -f ddl.sql" >> output.txt
  octo -f ddl.sql >& octo_ddl.out
  echo "# Run CREATE TABLE and SELECT commands concurrently : yottadb -run job^TC013" >> output.txt
  try=1
  while [ $try -le 10 ];
  do
	yottadb -run job^TC013 >> output.txt
	# We have seen that one or more of the 8 jobs occasionally produce the following error.
	#	[ERROR] /builds/YottaDB/DBMS/YDBOcto/src/run_query.c:443 2020-09-19 05:09:31 :
	#		ERR_YOTTADB : YottaDB error: ydb_lock_s()/ydb_lock_incr_s() call timed out.
	#		Another process with schema change rights, or a long-running query, is active.
	# Retry the test in this case. The hope is that the retry will not encounter this.
	# Fail the test if we don't see at least one successful try even after 10 retries.
	numerrs=`cat *.mje* | wc -l`
	if [[ $numerrs == 0 ]]; then
		break
	else
		# Move files from this iteration to make way for the next iteration
		mkdir round$try
		mv *.mje* *.mjo* round$try
		try=$[$try + 1]
	fi
  done
  echo "# Verify that the .mjo files contain what we expect them to : yottadb -run verify^TC013" >> output.txt
  yottadb -run verify^TC013 >> output.txt
  echo "# Verify that the .mje files do not have any errors : cat *.mje*" >> output.txt
  cat *.mje* >> output.txt
  verify_output TC013 output.txt
}

@test "TC014 : Test that CREATE and DROP TABLE do NOT time out if another process is at the OCTO> prompt" {
  (expect -d -f @PROJECT_SOURCE_DIR@/tests/fixtures/TC014.exp > expect.out) &> expect.dbg
  sed 's/\r//g;s/.*SHELL#/#/g;s/.*SHELL$/$/g;s/# .*/\n&/g;s/^# #/#/;' expect.out | grep -E '^# |^\[ERROR|^OCTO>|123456' | grep -vE 'PS1|^OCTO> (|exit)$' > output.txt
  verify_output TC014 output.txt
}

@test "TC015 : OCTO439 : Test that Octo/Rocto reload table from database after a concurrent CREATE or DROP TABLE" {
  export octo_dbg_drop_cache_expected=1	# needed to let Octo/Rocto know that concurrent DROP TABLE commands run in this test
  (expect -d -f @PROJECT_SOURCE_DIR@/tests/fixtures/TC015.exp > expect.out) &> expect.dbg
  # Remove <Ctrl-M> characters (carriage return, i.e. \r) from expect output.
  sed 's/\r//g;s/.*SHELL#/#/g;s/.*SHELL$/$/g;s/# .*/\n&/g;s/^# #/#/;' expect.out | grep -E "^# |^\[ERROR|^[0-5]" | grep -v PS1 > output.txt
  verify_output TC015 output.txt
}

@test "TC016 : OCTO483 : CREATE TABLE allows TAB characters in DELIM qualifier" {
	# Load fixture with rows delimited by non-printable characters (TAB)
	load_fixture TC016.zwr
	load_fixture TC016.sql subtest novv
	verify_output TC016 output.txt
}

@test "TC017 : OCTO483 : CREATE TABLE allows other non-printable characters in DELIM qualifier" {
	# Load fixture with rows delimited by non-printable characters (carriage return)
	load_fixture TC017.zwr
	load_fixture TC017.sql subtest novv
	verify_output TC017 output.txt
}

@test "TC018 : OCTO483 : CREATE TABLE works with regular characters as DELIM qualifier" {
	# Load fixture with rows delimited by regular characters
	load_fixture TC018U.zwr	# '_'-delimited
	load_fixture TC018P.zwr # '|'-delimited
	load_fixture TC018.sql subtest novv
	verify_output TC018 output.txt
}

@test "TC019 : OCTO483 : CREATE TABLE works with multiple characters as DELIM qualifier" {
	# Load fixture with rows delimited by multiple regular characters
	load_fixture TC019.zwr
	load_fixture TC019.sql subtest novv
	verify_output TC019 output.txt
}

@test "TC020 : OCTO483 : CREATE TABLE works with multiple characters as DELIM qualifier, including non-printable characters" {
	# Load fixture with rows delimited by multiple regular and non-printable characters
	load_fixture TC020.zwr
	load_fixture TC020.sql subtest novv
	verify_output TC020 output.txt
}

@test "TC021 : OCTO483 : CREATE TABLE works with more characters in the DELIM qualifier than is initially allocated (8)" {
	# Load fixture with rows delimited by multiple regular and non-printable characters
	load_fixture TC021.zwr
	load_fixture TC021.sql subtest novv
	verify_output TC021 output.txt
}

@test "TC022 : OCTO320 : Octo converts empty column values based on type when NOT NULL is specified in the DDL" {
	load_fixture nullnames.zwr
	load_fixture nullnames.sql
	run_query_in_octo_and_postgres_and_crosscheck_multiple_queries nullnames TC022.sql "trim_trailing_zeroes"
}

@test "TC023 : OCTO320 : Octo treats empty column values as NULL when NOT NULL is not specified in the DDL" {
	load_fixture nullnames.zwr
	load_fixture nullnames.sql
	run_query_in_octo_and_postgres_and_crosscheck_multiple_queries nullnames TC023.sql "trim_trailing_zeroes"
}

@test "TC024 : OCTO320 : Rocto converts empty column values based on type when NOT NULL is specified in the DDL" {
	load_fixture nullnames.zwr
	load_fixture nullnames.sql
	# No need for new fixture, just testing same functionality in Rocto
	run_query_in_octo_and_postgres_and_crosscheck_multiple_queries nullnames TC022.sql "trim_trailing_zeroes" "usejdbc"
}

@test "TC025 : OCTO320 : Rocto treats empty column values as NULL when NOT NULL is not specified in the DDL" {
	load_fixture nullnames.zwr
	load_fixture nullnames.sql
	# No need for new fixture, just testing same functionality in Rocto
	run_query_in_octo_and_postgres_and_crosscheck_multiple_queries nullnames TC023.sql "trim_trailing_zeroes" "usejdbc"
}

@test "TC026 : OCTO527 : Correct handling ASCII null-byte when NOT NULL is not specified" {
	$ydb_dist/yottadb -run %XCMD 'set ^names(6)="First|"_$char(0)'
	load_fixture TC026.sql subtest novv
	verify_output TC026 output.txt
}

@test "TC027 : OCTO527 : CREATE TABLE accepts user-defined NULL character and enforces correct precedence when used with NOT NULL" {
	# Load fixture with user-defined NULL character in DDL and NOT NULL column
	testname="TC027"
	load_fixture nullcharnames.sql
	load_fixture nullcharnames.zwr
	run_query_in_octo_and_postgres_and_crosscheck_multiple_queries nullcharnames $testname.sql
}

@test "TC029 : OCTO320 : Select a combination of populated and NULL/empty fields" {
	run_java run_query $test_port TC029 useextended &> output.txt
	verify_output TC029 output.txt
}

@test "TC030 : OCTO90 : Rerunning query after CREATE TABLE should recreate plans that relied on the recreated table" {
	# Note this test is mostly the same as the "test_drop_table/TDT04" subtest
	# Change to one might need to be done in both places.
	echo "# Load customers DDL and ZWR data" > output.txt
	load_fixture customers.sql
	load_fixture customers.zwr
	echo "" >> output.txt

	echo "# Stage 1 : Run 6 queries from TC030.sql that use CUSTOMERS and ORDERS tables" >> output.txt
	cp @PROJECT_SOURCE_DIR@/tests/fixtures/TC030.sql .
	octo -vv -f TC030.sql > run1.out 2>&1
	verify_plans_xrefs_gvns_triggers run1.out output.txt run1.ext

	echo "# Stage 2 : Run DROP TABLE ORDERS followed by CREATE TABLE of ORDERS" >> output.txt
	echo "DROP TABLE orders;" > TC030b.sql
	grep -i "CREATE TABLE orders" @PROJECT_SOURCE_DIR@/tests/fixtures/customers.sql >> TC030b.sql
	octo -f TC030b.sql > run2.out 2>&1
	cat run2.out >> output.txt
	verify_plans_xrefs_gvns_triggers run2.out output.txt run2.ext

	echo "# Stage 3 : Rerun 6 queries from TC030.sql that use CUSTOMERS and ORDERS tables" >> output.txt
	octo -vv -f TC030.sql > run3.out 2>&1
	verify_plans_xrefs_gvns_triggers run3.out output.txt run3.ext

	verify_output TC030 output.txt
}

@test "TC031 : OCTO587 : SIG-11 when executing a lot of CREATE TABLE queries" {
	echo "# Run [yottadb -run TC031] to generate input.sql" > output.txt
	$ydb_dist/yottadb -run TC031 > input.sql
	echo "# Run [octo -f input.sql] and verify no SIG-11 etc." >> output.txt
	octo -f input.sql >> output.txt 2>&1
	verify_output TC031 output.txt
}

@test "TC032 : OCTO527/OCTO320 : DDLs using EXTRACT wrap \$E[XTRACT] calls with piecevalue2colvalue" {
	testname="TC032"
	load_fixture $testname.zwr
	cp @PROJECT_SOURCE_DIR@/tests/fixtures/$testname.sql .
	@PROJECT_SOURCE_DIR@/tests/fixtures/sqllogic/split_queries.py "$testname".sql
	for queryfile in $(ls TC032-*.sql); do
		run_java run_query $test_port $queryfile useextended >> output.txt 2>&1
	done
	echo -e "\n# Confirm piecevalue2colvalue call included in generated plan:\n" >> output.txt
	cat _ydboctoP*.m >> output.txt
	verify_output $testname output.txt
}

@test "TC033 : OCTO524 :  Maintain text based table definition of each column in sync with CREATE TABLE specification" {
	cp @PROJECT_SOURCE_DIR@/tests/fixtures/TC033.sql .
	echo "# Run [octo -f TC033.sql] to run lots of CREATE TABLE queries" > output.txt
	octo -f TC033.sql >> output.txt 2>&1
	echo "" >> output.txt
	echo "# Run [mupip extract run.ext]" >> output.txt
	$ydb_dist/mupip extract run.ext
	echo "" >> output.txt
	echo "# Verify text based table definition for all CREATE TABLE queries in TC033.sql" >> output.txt
	grep -w "text" run.ext >> output.txt
	verify_output TC033 output.txt
}

@test "TC034 : OCTO527/OCTO320 : DDLs using EXTRACT wrap \$E[XTRACT] calls with piecevalue2colvalue" {
	testname="TC034"
	load_fixture $testname.zwr
	cp @PROJECT_SOURCE_DIR@/tests/fixtures/$testname.sql .
	@PROJECT_SOURCE_DIR@/tests/fixtures/sqllogic/split_queries.py "$testname".sql
	for queryfile in $(ls $testname-*.sql); do
		run_java run_query $test_port $queryfile useextended >> output.txt 2>&1
	done
	echo -e "\n# Confirm piecevalue2colvalue call included in generated plan:\n" >> output.txt
	cat _ydboctoP*.m >> output.txt
	verify_output $testname output.txt
}

@test "TC035 : OCTO483 : CREATE TABLE allows column-level DELIM qualifier" {
	# Load fixture with rows delimited by non-printable characters (TAB)
	testname="TC035"
	load_fixture $testname.zwr
	load_fixture $testname.sql subtest novv
	verify_output $testname output.txt
}

@test "TC036 : OCTO90 : Simple tests of auto upgrade of binary table/function/plan definitions/artifacts" {
	# This test cannot run with rocto in the background as enabling journaling requires standalone access. So stop it.
	stop_rocto
	echo "" > empty_query.sql
	echo "------------------------------------------------------------------------------------------------" >> output.txt
	echo "# Test that if FMT_BINARY_DEFINITION is different between current commit and random prior commit," >> output.txt
	echo '# the global node ^%ydboctoocto("binfmt")= gets set to the current FMT_BINARY_DEFINITION value' >> output.txt
	echo "------------------------------------------------------------------------------------------------" >> output.txt
	echo "# Run [mupip extract run1.ext]" >> output.txt
	$ydb_dist/mupip extract run1.ext
	echo '# Determine current binary definition format number (FMT_BINARY_DEFINITION) from run1.ext' >> output.txt
	curbinfmt=`grep -w "binfmt" run1.ext | sed 's/.*="//;s/"//;'`
	oldbinfmt=$[$curbinfmt - 1]
	echo "# Simulate random prior commit by setting binary definition format number to a smaller value" >> output.txt
	yottadb -run %XCMD "set ^%ydboctoocto(\"binfmt\")=$oldbinfmt"
	echo "# Turn on journaling to find out what database nodes get set during auto upgrade" >> output.txt
	$ydb_dist/mupip set -journal="enable,on,nobefore" -reg OCTOREG >& jnlon1.log
	echo "# Run [octo -f empty_query.sql] so auto upgrade of binary table/function definitions happens" >> output.txt
	octo -f empty_query.sql >> output.txt 2>&1
	echo "# Turn off journaling (no longer needed for this stage of the test)" >> output.txt
	$ydb_dist/mupip set -journal=off -reg OCTOREG >& jnloff1.log
	echo '# Verify that ^%ydboctoocto("binfmt") gets set to current FMT_BINARY_DEFINITION' >> output.txt
	$ydb_dist/mupip journal -extract -detail -forward octo.mjl >& jnlext1.log
	[[ $(grep "SET.*binfmt" octo.mjf | grep "=\"$curbinfmt\"" | wc -l) -eq 1 ]]

	echo "------------------------------------------------------------------------------------------------" >> output.txt
	echo "# Test that if FMT_BINARY_DEFINITION is same between current commit and random prior commit," >> output.txt
	echo "the global node ^%ydboctoocto(\"binfmt\")= is untouched and auto-upgrade is skipped." >> output.txt
	echo "------------------------------------------------------------------------------------------------" >> output.txt
	echo "# Turn on journaling to find out what database nodes get set during auto upgrade" >> output.txt
	$ydb_dist/mupip set -journal="enable,on,nobefore" -reg OCTOREG >& jnlon2.log
	echo "# Run [octo -f empty_query.sql] to verify no auto upgrade of binary table/function definitions happens" >> output.txt
	octo -f empty_query.sql >> output.txt 2>&1
	echo "# Turn off journaling (no longer needed for this stage of the test)" >> output.txt
	$ydb_dist/mupip set -journal=off -reg OCTOREG >& jnloff2.log
	echo '# Verify that ^%ydboctoocto("binfmt") gets set to current FMT_BINARY_DEFINITION' >> output.txt
	$ydb_dist/mupip journal -extract -detail -forward octo.mjl >& jnlext2.log
	[[ $(grep "SET.*binfmt" octo.mjf | wc -l) -eq 0 ]]

	echo "------------------------------------------------------------------------------------------------" >> output.txt
	echo "# Test that if FMT_PLAN_DEFINITION is different between current commit and random prior commit," >> output.txt
	echo "# 1) the global node ^%ydboctoocto(\"planfmt\")= gets set to the current FMT_PLAN_DEFINITION value AND" >> output.txt
	echo "# 2) all plans/artifacts get deleted." >> output.txt
	echo "------------------------------------------------------------------------------------------------" >> output.txt
	echo "# Run [mupip extract run3.ext]" >> output.txt
	$ydb_dist/mupip extract run3.ext
	echo '# Determine current plan definition format number (FMT_PLAN_DEFINITION) from run3.ext' >> output.txt
	curplanfmt=`grep -w "planfmt" run3.ext | sed 's/.*="//;s/"//;'`
	oldplanfmt=$[$curplanfmt - 1]
	echo "# Simulate random prior commit by setting plan definition format number to a smaller value" >> output.txt
	yottadb -run %XCMD "set ^%ydboctoocto(\"planfmt\")=$oldplanfmt"
	echo "# Turn on journaling to find out what database nodes get set during auto upgrade" >> output.txt
	$ydb_dist/mupip set -journal="enable,on,nobefore" -reg OCTOREG >& jnlon3.log
	echo "# Run [octo -f empty_query.sql] so auto upgrade of plan definitions happens" >> output.txt
	octo -f empty_query.sql >> output.txt 2>&1
	echo "# Turn off journaling (no longer needed for this stage of the test)" >> output.txt
	$ydb_dist/mupip set -journal=off -reg OCTOREG >& jnloff3.log
	echo '# Verify that ^%ydboctoocto("planfmt") gets set to current FMT_PLAN_DEFINITION' >> output.txt
	$ydb_dist/mupip journal -extract -detail -forward octo.mjl >& jnlext3.log
	[[ $(grep "SET.*planfmt" octo.mjf | grep "=\"$curplanfmt\"" | wc -l) -eq 1 ]]

	echo "------------------------------------------------------------------------------------------------" >> output.txt
	echo "# Test that if FMT_PLAN_DEFINITION is same between current commit and random prior commit," >> output.txt
	echo "# the global node ^%ydboctoocto(\"planfmt\")= is untouched and auto-upgrade is skipped." >> output.txt
	echo "------------------------------------------------------------------------------------------------" >> output.txt
	echo "# Turn on journaling to find out what database nodes get set during auto upgrade" >> output.txt
	$ydb_dist/mupip set -journal="enable,on,nobefore" -reg OCTOREG >& jnlon4.log
	echo "# Run [octo -f empty_query.sql] to verify no auto upgrade of plan definitions happens" >> output.txt
	octo -f empty_query.sql >> output.txt 2>&1
	echo "# Turn off journaling (no longer needed for this stage of the test)" >> output.txt
	$ydb_dist/mupip set -journal=off -reg OCTOREG >& jnloff4.log
	echo '# Verify that ^%ydboctoocto("planfmt") gets set to current FMT_PLAN_DEFINITION' >> output.txt
	$ydb_dist/mupip journal -extract -detail -forward octo.mjl >& jnlext4.log
	[[ $(grep "SET.*planfmt" octo.mjf | wc -l) -eq 0 ]]
}

@test "TC037 : OCTO589 : DELIM "" at the column level invalidates any PIECE specified and fetches entire node" {
	$ydb_dist/yottadb -run %XCMD 'set ^names3(1)="first|1",^names3(2)="second|2"'	# needed for one query in TC037.sql
	testname="TC037"
	load_fixture $testname.sql subtest novv
	mv output.txt $testname.log
	grep '^-- ' $testname.sql > output.txt	# Capture high level purpose of test at start of reference file
	cat $testname.log >> output.txt
	echo '# Verify generated plans (including xref plans) do not have $PIECE for FIRSTNAME column' >> output.txt
	grep -E '=$ZYSQLNULL|\$PIECE' _ydbocto*.m >> output.txt
	echo '# Verify text table definition does not have PIECE specified for FIRSTNAME column' >> output.txt
	$ydb_dist/mupip extract $testname.ext
	grep -w "text" $testname.ext | grep -wE "NAMES1|NAMES2|NAMES3" >> output.txt
	verify_output $testname output.txt
}

@test "TC038 : OCTO626 : CREATE TABLE should issue error if more than one column with the same name is specified" {
	load_fixture TC038.sql subtest novv
	verify_output TC038 output.txt
}

@test "TC039 : OCTO590 : Confirm table text definitions are correctly broken up across multiple GVNs by attempting to load them" {
	# This test cannot run with rocto in the background as enabling journaling requires standalone access. So stop it.
	stop_rocto
	echo "# Run [yottadb -run TC039] to generate input.sql" > output.txt
	$ydb_dist/yottadb -run TC039 &> input.sql
	echo "# Run [octo -f input.sql] and verify no SIG-11 etc." >> output.txt
	octo -f input.sql >> output.txt 2>&1

	echo "------------------------------------------------------------------------------------------------" >> output.txt
	echo "# Validate that long DDL definitions are correctly fragmented and retrieved" >> output.txt
	echo "# Do this by causing a difference in FMT_PLAN_DEFINITION to force retrieval after initial storage" >> output.txt
	echo "------------------------------------------------------------------------------------------------" >> output.txt
	echo "# Run [mupip extract run3.ext]" >> output.txt
	$ydb_dist/mupip extract run3.ext
	echo '# Determine current plan definition format number (FMT_PLAN_DEFINITION) from run3.ext' >> output.txt
	curplanfmt=`grep -w "planfmt" run3.ext | sed 's/.*="//;s/"//;'`
	oldplanfmt=$[$curplanfmt - 1]
	echo "# Simulate random prior commit by setting plan definition format number to a smaller value" >> output.txt
	yottadb -run %XCMD "set ^%ydboctoocto(\"planfmt\")=$oldplanfmt"
	echo "# Turn on journaling to find out what database nodes get set during auto upgrade" >> output.txt
	$ydb_dist/mupip set -journal="enable,on,nobefore" -reg OCTOREG >& jnlon3.log
	echo "# Run [octo -f empty_query.sql] so auto upgrade of plan definitions happens" >> output.txt
	octo <<OCTO >> output.txt 2>&1
	SELECT * FROM TC039;
OCTO
	echo "# Turn off journaling (no longer needed for this stage of the test)" >> output.txt
	$ydb_dist/mupip set -journal=off -reg OCTOREG >& jnloff3.log
	echo '# Verify that ^%ydboctoocto("planfmt") gets set to current FMT_PLAN_DEFINITION' >> output.txt
	$ydb_dist/mupip journal -extract -detail -forward octo.mjl >& jnlext3.log
	[[ $(grep "SET.*planfmt" octo.mjf | grep "=\"$curplanfmt\"" | wc -l) -eq 1 ]]
	verify_output TC039 output.txt
}

@test "TC040 : OCTO590 : Confirm enforcement of table name length limits during table creation and cleanup" {
	load_fixture TC040.sql subtest novv
	verify_output TC040 output.txt
}

@test "TC041 : OCTO483 : Prohibit specification of more than 255 characters using DELIM, i.e. the max number of args for \$CHAR" {
	echo "# Run [yottadb -run TC041] to generate input.sql with 256 characters" > output.txt
	$ydb_dist/yottadb -run TC041 &> input-256char.sql
	echo "# Run [octo -f input-256char.sql] and verify error message" >> output.txt
	run_octo_allow_error input-256char.sql output.txt
	cat input-256char.sql | sed 's/(1,/(/' &> input-255char.sql
	echo "# Run [octo -f input-255char.sql] and verify no error message" >> output.txt
	run_octo_allow_error input-255char.sql output.txt
	verify_output TC041 output.txt
}

@test "TC042 : OCTO669 : Test of ERR_CANNOT_CREATE_TABLE error" {
	load_fixture TC042.sql subtest novv
	verify_output TC042 output.txt
}

@test "TC043 : OCTO439 : CREATE TABLE times out if concurrent SELECT query is long running" {
	load_fixture HANGTIME.sql	# Define HANGTIME as a function
	(expect -d -f @PROJECT_SOURCE_DIR@/tests/fixtures/TC043.exp > expect.out) &> expect.dbg
	sed 's/\r//g;s/.*SHELL#/#/g;s/.*SHELL$/$/g;s/# .*/\n&/g;s/^# #/#/;' expect.out | grep -E '^# |^\[ERROR|^OCTO>|^CREATE' | grep -vE 'PS1|^OCTO> (|exit)$' > output.txt
	verify_output TC043 output.txt
}

@test "TC044 : OCTO575 : Octo CREATE TABLE naively creates invalid GVNs from table names" {
	echo "# Create table with name that contains _ or . then run select on it and" > output.txt
	echo "# verify that we don't get any errors." >> output.txt
	load_fixture TC044.sql subtest novv
	verify_output TC044 output.txt
}

@test "TC045 : OCTO502 : Various tests of READONLY and READWRITE keywords in CREATE TABLE" {
	cp @PROJECT_SOURCE_DIR@/tests/fixtures/TC045.sql .
	grep '^--' TC045.sql > output.txt
	echo "# Verify text based table definition from database extract to see which keyword prevailed" >> output.txt
	for setting in READONLY READWRITE UNSPECIFIED
	do
		echo "# ----------------------------------" >> output.txt
		echo '# Test of [tabletype = "'$setting'"]' >> output.txt
		echo "# ----------------------------------" >> output.txt
		if [[ "UNSPECIFIED" == $setting ]]; then
			confsetting=""
		else
			confsetting="tabletype = \"$setting\""
		fi
		echo $confsetting > octo.conf
		sed 's/MYTBL/&'$setting'/g' TC045.sql > input_$setting.sql
		octo -f input_$setting.sql >> output.txt 2>&1
		$ydb_dist/mupip extract run$setting.ext
		grep "ydboctoschema.*MYTBL"$setting".*text.*CREATE TABLE" run$setting.ext >> output.txt
	done
	verify_output TC045 output.txt
}

@test "TC046 : OCTO502 : Allow READWRITE table with column-level DELIM of \"\" if there is only 1 non-primary-key column" {
	load_fixture TC046.sql subtest novv
	verify_output TC046 output.txt
}

@test "TC047 : OCTO672 : GLOBAL keyword in CREATE TABLE command should accept just an unsubscripted global name" {
	load_fixture TC047.sql subtest novv
	echo '# Verify text table definition does not keys() inserted appropriately in the GLOBAL keyword' >> output.txt
	$ydb_dist/mupip extract octo672.ext
	grep -w "text" octo672.ext | grep "TMP" >> output.txt
	verify_output TC047 output.txt
}

@test "TC048 : OCTO595 : Creation of multiple tables of the same name in sequence with IF NOT EXISTS is skipped with a info message" {
	load_fixture TC048.sql subtest v
	echo "Exit Status:" $? | tee -a output.txt
	# Check that we unlock properly
	$ydb_dist/yottadb -run %XCMD 'for i=1:1:512 write "CREATE TABLE IF NOT EXISTS Customers (CustomerID INTEGER PRIMARY KEY);",!' > lock.sql
	octo -f lock.sql &>> output.txt # should not error.
	verify_output TC048 output.txt
}
