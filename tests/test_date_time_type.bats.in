#################################################################
#								#
# Copyright (c) 2023-2024 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
	init_test
	createdb
}

teardown() {
  stop_rocto
  corecheck
}

@test "TDTT001 : OCTO382 : Validate that timezone information input and output is correct in select cases" {
	run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TDTT001.sql
}

@test "TDTT002 : OCTO382 : Validate that date and time text format input to a date/time column in a readwrite table works" {
	# TDTT002 uses cross check function to validate date/time functionality
	# TDTT003 is used to validate the same but with formats which cannot be used with cross check
	test_port=$(start_rocto 1400 -aw)
	run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TDTT002.sql
}

@test "TDTT003 : OCTO382 : Validate that different date and time internal formats can be specified in a CREATE TABLE column definition for a readwrite table" {
	load_fixture TDTT003.sql subtest novv
	verify_output TDTT003 output.txt nodatetimefilter noinfo nodebug
}

@test "TDTT004 : OCTO382 : Validate that different date and time internal formats can be specified in a CREATE TABLE column definition for a readonly table" {
	$ydb_dist/yottadb -r datetimemglobal^datetime
	load_fixture TDTT004.sql subtest novv
	verify_output TDTT004 output.txt nodatetimefilter noinfo nodebug
}

@test "TDTT005 : OCTO382 : Ensure that the working of all binary operators are checked when operands are of type date/time (including date/time and other data type combinations)" {
	# Note only text format input is considered here and since we are validating usages this will apply to all other formats as well
	$ydb_dist/yottadb -r binaryoperationstatements^datetime "TDTT005"

	for prefix in Create Add Sub Mult Div Mod Concat Or And Comparison Like Similarto Between Notbetween In Notin Drop; do
		prefix="input$prefix"
		file="$prefix.sql"
		octo -p -f $file 2>&1 | tee -a output.txt
		verify_output "TDTT005_$prefix" output.txt nodatetimefilter noinfo nodebug
		mv output.txt TDTT005_"$prefix"_output.txt
		mv clean_output.txt TDTT005_"$prefix"_clean_output.txt
	done
	# prevent find_unused_outrefs.sh from failing
	# TDTT005_inputAdd.ref
	# TDTT005_inputAnd.ref
	# TDTT005_inputBetween.ref
	# TDTT005_inputComparison.ref
	# TDTT005_inputConcat.ref
	# TDTT005_inputCreate.ref
	# TDTT005_inputDiv.ref
	# TDTT005_inputDrop.ref
	# TDTT005_inputIn.ref
	# TDTT005_inputLike.ref
	# TDTT005_inputMod.ref
	# TDTT005_inputMult.ref
	# TDTT005_inputNotbetween.ref
	# TDTT005_inputNotin.ref
	# TDTT005_inputOr.ref
	# TDTT005_inputSimilarto.ref
	# TDTT005_inputSub.ref
}

@test "TDTT006 : OCTO382 : Ensure that the working of all unary operators are checked when operands are of type date/time" {
	# Note only text format input is considered here and since we are validating usages this will apply to all other formats as well
	$ydb_dist/yottadb -r unaryoperationstatements^datetime "TDTT006" >> input.sql
	octo -p -f input.sql 2>&1 | tee -a output.txt
	verify_output TDTT006 output.txt nodatetimefilter noinfo nodebug
}

@test "TDTT007 : OCTO382 : Ensure that the working of all cast operations are checked when operand and type are of type date/time (including date/time and other data type combinations)" {
	# Note only text format input is considered here and since we are validating usages this will apply to all other formats as well
	$ydb_dist/yottadb -r castoperationstatements^datetime "TDTT005" >> input.sql
	octo -p -f input.sql 2>&1 | tee -a output.txt
	verify_output TDTT007 output.txt nodatetimefilter noinfo nodebug
}

@test "TDTT008 : OCTO382 : Ensure that the working of case statements are checked when operands are of type date/time (including date/time and other data type combinations)" {
	# Note only text format input is considered here and since we are validating usages this will apply to all other formats as well
	$ydb_dist/yottadb -r caseoperationstatements^datetime "TDTT008" >> input.sql
	octo -p -f input.sql 2>&1 | tee -a output.txt
	verify_output TDTT008 output.txt nodatetimefilter noinfo nodebug
}

@test "TDTT009 : OCTO382 : Ensure that the working of all date and time array operations are checked" {
	# Note only text format input is considered here and since we are validating usages this will apply to all other formats as well
	$ydb_dist/yottadb -r arrayoperationstatements^datetime "TDTT009" >> input.sql
	octo -p -f input.sql 2>&1 | tee -a output.txt
	verify_output TDTT009 output.txt nodatetimefilter noinfo nodebug
}

@test "TDTT010 : OCTO382 : Ensure that the working of all aggregate functions are checked when operands are of type date/time" {
	# Note only text format input is considered here and since we are validating usages this will apply to all other formats as well
	$ydb_dist/yottadb -r aggregatefunctionstatements^datetime "TDTT010" >> input.sql
	octo -p -f input.sql 2>&1 | tee -a output.txt
	verify_output TDTT010 output.txt nodatetimefilter noinfo nodebug
}

@test "TDTT011 : OCTO382 : Ensure that the working of coalesce/greatest/least/nullif functions are checked when operands are of type date/time (including date/time and other data type combinations)" {
	# Note only text format input is considered here and since we are validating usages this will apply to all other formats as well
	$ydb_dist/yottadb -r cogtltnifunctionstatements^datetime "TDTT011" >> input.sql
	cp @PROJECT_SOURCE_DIR@/tests/fixtures/TDTT011.sql TDTT011.sql
	sed 's/^#.*//g;/^$/d' TDTT011.sql >> input.sql
	octo -p -f input.sql 2>&1 | tee -a output.txt
	verify_output TDTT011 output.txt nodatetimefilter noinfo nodebug
}

@test "TDTT012 : OCTO382 : Invalid date/time cast" {
	load_fixture TDTT012.sql subtest novv
	verify_output TDTT012 output.txt nodatetimefilter noinfo nodebug
}

@test "TDTT013 : OCTO382 : Validate different date and time user defined function usage" {
	$ydb_dist/yottadb -r userdefinedfunctionstatements^datetime "TDTT013" >> input.sql
	octo -p -f input.sql 2>&1 | tee -a output.txt
	mv output.txt output1.txt
	load_fixture TDTT013.sql subtest novv
	mv output.txt output2.txt
	echo "1st test" >> output.txt
	cat output1.txt >> output.txt
	echo "2nd test" >> output.txt
	cat output2.txt >> output.txt
	verify_output TDTT013 output.txt nodatetimefilter noinfo nodebug
}

@test "TDTT014 : OCTO382 : Validate specific cases of IN/NOT IN operation with date/time type values" {
	# Note only text format input is considered here and since we are validating usages this will apply to all other formats as well
	load_fixture TDTT014.sql subtest novv
	verify_output TDTT014 output.txt nodatetimefilter noinfo nodebug
}

@test "TDTT015 : OCTO382 : Validate specific cases of concat operation with date/time type values" {
	# Note only text format input is considered here and since we are validating usages this will apply to all other formats as well
	load_fixture TDTT015.sql subtest novv
	verify_output TDTT015 output.txt nodatetimefilter noinfo nodebug
}

@test "TDTT016 : OCTO382 : Validate specific cases of CASE operation with date/time type values" {
	# Note only text format input is considered here and since we are validating usages this will apply to all other formats as well
	load_fixture TDTT016.sql subtest novv
	verify_output TDTT016 output.txt nodatetimefilter noinfo nodebug
}

@test "TDTT017 : OCTO382 : Validate specific cases of unary negative operation with time type values and exists operation usages" {
	# Note only text format input is considered here and since we are validating usages this will apply to all other formats as well
	load_fixture TDTT017.sql subtest novv
	verify_output TDTT017 output.txt nodatetimefilter noinfo nodebug
}

@test "TDTT018 : OCTO382 : Validate specific cases of IS and IS NOT operation usages" {
	# Note only text format input is considered here and since we are validating usages this will apply to all other formats as well
	load_fixture TDTT018.sql subtest novv
	verify_output TDTT018 output.txt nodatetimefilter noinfo nodebug
}

@test "TDTT019 : OCTO382 : Validate working of date/time literals and its internal format specification" {
	load_fixture TDTT019.sql subtest novv
	verify_output TDTT019 output.txt nodatetimefilter noinfo nodebug

}
