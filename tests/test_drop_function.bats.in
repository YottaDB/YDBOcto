#################################################################
#								#
# Copyright (c) 2020-2024 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
	init_test
	createdb
	load_fixture names.sql
	load_fixture names.zwr
}

teardown() {
  corecheck
}

@test "TDF000 : OCTO345 : DROP FUNCTION doesn't work with octo-seed functions (ABS)" {
	load_fixture TDF000.sql subtest novv
	yottadb -r CHECKFUNCDELETE abs 2>&1 | tee -a output.txt	# Confirm the relevant database nodes for the function are not deleted
	verify_output TDF000 output.txt noinfo nodebug
}

@test "TDF001 : OCTO345 : DROP FUNCTION works with new function" {
	load_fixture TDF001.sql subtest novv
	yottadb -r CHECKFUNCDELETE dollarzwrite 2>&1 | tee -a output.txt	# Confirm the relevant database nodes for the function were deleted
	verify_output TDF001 output.txt noinfo nodebug
}

@test "TDF002 : OCTO90 : DROP FUNCTION should delete db nodes for plans that relied on the dropped function" {
	# Note this test is mostly the same as the "test_create_function/TCF023" subtest.
	# Change to one will need to be done in both places.
	cp @PROJECT_SOURCE_DIR@/tests/fixtures/TCF023{,create}.sql .
	cp @PROJECT_SOURCE_DIR@/tests/fixtures/TDF002.sql .
	octo -f TCF023create.sql > run0.out 2>&1
	echo "# Run 8 queries from TCF023.sql that use ABSF and REPLACEF functions" > output.txt
	octo -vv -f TCF023.sql > run1.out 2>&1
	verify_plans_xrefs_gvns_triggers run1.out output.txt run1.ext

	echo "# Run DROP FUNCTION of REPLACEF" >> output.txt
	octo -f TDF002.sql > run2.out 2>&1
	cat run2.out >> output.txt
	verify_plans_xrefs_gvns_triggers run2.out output.txt run2.ext

	verify_output TDF002 output.txt
}

@test "TDF003 : OCTO562 : DROP FUNCTION works with parameterless functions" {
	load_fixture TDF003.sql subtest novv
	yottadb -r CHECKFUNCDELETE parmlessfunc 2>&1 | tee -a output.txt	# Confirm the relevant database nodes for the function were deleted
	verify_output TDF003 output.txt noinfo nodebug
}

@test "TDF004 : OCTO562 : DROP FUNCTION issues an error when the specified function doesn't exist" {
	load_fixture TDF004.sql subtest novv
	verify_output TDF004 output.txt noinfo nodebug
}

@test "TDF005 : OCTO562 : DROP FUNCTION on overloaded function only deletes targeted definition" {
	load_fixture TDF005.sql subtest novv
	yottadb -r CHECKFUNCDELETE abstest 2>&1 | tee -a output.txt	# Confirm the relevant database nodes for the function were deleted
	# There should be one remaining ABS function definition
	verify_output TDF005 output.txt noinfo nodebug
}

@test "TDF006 : OCTO595 : DROP FUNCTION IF EXISTS issues an info message when the specified function doesn't exist" {
	load_fixture TDF006.sql subtest v
	echo "Exit Status:" $? | tee -a output.txt
	yottadb -r CHECKFUNCDELETE parmlessfunc 2>&1 | tee -a output.txt	# Confirm the relevant database nodes for the function were deleted
	yottadb -r CHECKFUNCDELETE parmfullfunc 2>&1 | tee -a output.txt	# Confirm the relevant database nodes for the function were deleted
	# Check that we unlock properly
	$ydb_dist/yottadb -run %XCMD 'for i=1:1:512 write "DROP FUNCTION IF EXISTS PARMFULLFUNC (NUMERIC);",!' > lock.sql
	# The above produces lots of 'DROP FUNCTION' output. Don't want to keep that in the reference file so filter that out.
	octo -f lock.sql | grep -v 'DROP FUNCTION' || true &>> output.txt # should not error.
	verify_output TDF006 output.txt
}
