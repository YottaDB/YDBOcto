#################################################################
#								#
# Copyright (c) 2019-2021 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
}

@test "TDT01 : drop a table, check that octo reports table unknown error on select statements and doesn't return any rows" {
  # create a global for a table that could be selected from if the table existed
  # this is included in order to test that data isn't returned from ^T1 through the select statement even when data is present
  yottadb -run %XCMD 'set ^T1(1)="2|3|4"'
  octo <<OCTO 2>&1 | tee output.txt
create table t1 (a int primary key, b int, c int, d int);
OCTO
  octo <<OCTO 2>&1 | tee output.txt
drop table t1;
select * from t1;
OCTO
  verify_output TDT01 output.txt noinfo nodebug
}

@test "TDT02 : drop a cached table, check that octo reports table unknown error on select statements and doesn't return any rows" {
  # create a global for a table that can be selected from
  yottadb -run %XCMD 'set ^T1(1)="2|3|4"'
  octo <<OCTO 2>&1 | tee output.txt
create table t1 (a int primary key, b int, c int, d int) GLOBAL "^T1(keys(""a""))";
OCTO
  octo <<OCTO 2>&1 | tee output.txt
select * from t1;
drop table t1;
select * from t1;
OCTO
  verify_output TDT02 output.txt noinfo nodebug
}

@test "TDT03 : OCTO439 : DROP TABLE (and CREATE TABLE) also deletes unnecessary global variables nodes from catalog" {
  echo "# Load customers DDL" > output.txt
  load_fixture customers.sql
  echo "# Invoke TDT03.sql to print ALL columns of ORDERS table" >> output.txt
  # Below query prints the names of ALL columns of the table called 'ORDERS' using the catalog.
  # This query will be invoked multiple times by the caller after various DROP TABLE and CREATE TABLE queries run
  # We expect the output of the query to not change. Before the OCTO439 code fixes, the output would increase in size
  # after every DROP TABLE or CREATE TABLE.
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TDT03.sql 2>&1 >> output.txt
  echo "# Now run DROP TABLE command" >> output.txt
  octo <<OCTO 2>&1 | tee -a output.txt
    drop table ORDERS;
    drop table CUSTOMERS;
OCTO
  echo "# Now run query again to verify number of columns of ORDERS table came down to 0." >> output.txt
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TDT03.sql 2>&1 >> output.txt
  echo "# And a final load of customers DDL again (CREATE TABLE)" >> output.txt
  load_fixture customers.sql
  echo "# Now run query again to verify number of columns of ORDERS table went back to its original number." >> output.txt
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TDT03.sql 2>&1 >> output.txt
  verify_output TDT03 output.txt noinfo nodebug
}

@test "TDT04 : OCTO90 : DROP TABLE should delete db nodes for plans that relied on the dropped table" {
	# Note this test is mostly the same as the "test_createtable/TC030" subtest.
	# Change to one might need to be done in both places.
	echo "# Load customers DDL" > output.txt
	load_fixture customers.sql
	load_fixture customers.zwr
	echo "" >> output.txt

	echo "# Stage 1 : Run 6 queries from TC030.sql that use CUSTOMERS and ORDERS tables" >> output.txt
	cp @PROJECT_SOURCE_DIR@/tests/fixtures/TC030.sql .
	octo -vv -f TC030.sql > run1.out 2>&1
	verify_plans_xrefs_gvns_triggers run1.out output.txt run1.ext

	echo "# Stage 2 : Run DROP TABLE of ORDERS" >> output.txt
	cp @PROJECT_SOURCE_DIR@/tests/fixtures/TDT04.sql .
	octo -f TDT04.sql >> run2.out 2>&1
	cat run2.out >> output.txt
	verify_plans_xrefs_gvns_triggers run2.out output.txt run2.ext

	verify_output TDT04 output.txt
}

@test "TDT05 : OCTO502 : DROP TABLE on READWRITE table does a KILL of the underlying GVN storing the table data" {
	echo "# Test that READONLY table does not do KILL of underlying GVN storing the table data" > final_output.txt
	echo "# And that READWRITE table does KILL of underlying GVN storing the table data" >> final_output.txt
	echo "-----------------------------------------------------------------------------" >> final_output.txt
	for setting in READONLY READWRITE
	do
		echo 'tabletype = "'$setting'"' > octo.conf
		echo "# CREATE TABLE NAMES with $setting tabletype" >> final_output.txt
		load_fixture names.sql
		echo "# Populate ^names with data for NAMES table" >> final_output.txt
		load_fixture names.zwr
		echo "# Verify NAMES table got created with READONLY or READWRITE tabletype" >> final_output.txt
		$ydb_dist/yottadb -run %XCMD 'write ^%ydboctoschema("NAMES","text",0)' >> final_output.txt
		echo "# DROP TABLE names" >> final_output.txt
		load_fixture TDT05.sql subtest novv
		cat output.txt >> final_output.txt
		echo "# Verify ^names still exists (READONLY) or not (READWRITE)" >> final_output.txt
		$ydb_dist/yottadb -run %XCMD 'write "$DATA(^names) = ",$DATA(^names),!' >> final_output.txt
	done
	verify_output TDT05 final_output.txt
}

@test "TDT06 : OCTO595 : Info msg and skip drop table execution when IF EXISTS is used and the table doesn't exist" {
  octo <<OCTO 2>&1 | tee output.txt
create table t1 (a int primary key, b int, c int, d int);
OCTO
  octo -v <<OCTO 2>&1 | tee output.txt
drop table if exists t1;
drop table if exists t1;
OCTO
  echo "Exit Status:" $? | tee -a output.txt
  # Check that we released the locks
  $ydb_dist/yottadb -run %XCMD 'for i=1:1:512 write "drop table if exists abc;",!' > lock.sql
  octo -f lock.sql &>> output.txt # should not error.
  verify_output TDT06 output.txt
}
