#################################################################
#								#
# Copyright (c) 2019-2023 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  load_fixture names.sql
  load_fixture names.zwr
  load_fixture customers.sql
  load_fixture customers.zwr
}

teardown() {
  corecheck
}

@test "THQ01 : OCTO290 : Test queries with different SELECT COLUMN LIST (single column) do not hash to same plan name" {
  octo <<OCTO 2>&1 | tee output.txt
select o1.order_id from orders o1 inner join orders o2 on o1.customer_id < o2.customer_id;
select o2.order_id from orders o1 inner join orders o2 on o1.customer_id < o2.customer_id;
OCTO
  verify_output THQ01 output.txt noinfo nodebug
  [[ $(ls -l _ydboctoP*.m | wc -l) -eq 2 ]]
}

@test "THQ02 : OCTO290 : Test queries with different ORDER BY clause do not hash to same plan name" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT id,firstname FROM names WHERE id = 0 or id = 1;
SELECT id,firstname FROM names WHERE id = 0 or id = 1 ORDER BY firstname;
OCTO
  verify_output THQ02 output.txt noinfo nodebug
  [[ $(ls -l _ydboctoP*.m | wc -l) -eq 2 ]]
}

@test "THQ03 : OCTO329 : Test queries with different SELECT COLUMN LISTs do not hash to same plan name" {
  $ydb_dist/yottadb -run ^%XCMD 'set ^T1(0,1,2)="0|1|2"'
  cat <<CAT_EOF > input.sql
CREATE TABLE t1(a INTEGER, b INTEGER, c INTEGER) GLOBAL "^T1(keys(""A""),keys(""B""),keys(""C""))";
SELECT a+b+c+a from t1;
SELECT a+b+c+b from t1;
SELECT a+b+c+c from t1;
SELECT a+b+c-a from t1;
SELECT a+b+c-b from t1;
SELECT a+b+c-c from t1;
SELECT a+b-c+a from t1;
SELECT a+b-c+b from t1;
SELECT a+b-c+c from t1;
SELECT a-b+c+a from t1;
SELECT a-b+c+b from t1;
SELECT a-b+c+c from t1;
SELECT a-b-c+a from t1;
SELECT a-b-c+b from t1;
SELECT a-b-c+c from t1;
SELECT a-b+c-a from t1;
SELECT a-b+c-b from t1;
SELECT a-b+c-c from t1;
SELECT a+b-c-a from t1;
SELECT a+b-c-b from t1;
SELECT a+b-c-c from t1;
SELECT a-b-c-a from t1;
SELECT a-b-c-b from t1;
SELECT a-b-c-c from t1;
CAT_EOF
  octo -f input.sql > output.txt 2>&1
  verify_output THQ03 output.txt noinfo nodebug
  # Verify that each of the above queries generates a unique plan by checking for 24 plans below
  [[ $(ls -l _ydboctoP*.m | wc -l) -eq 24 ]]
}

@test "THQ04 : OCTO379 : Test queries with different SELECT COLUMN LISTs (multiple columns) do not hash to same plan name" {
  octo <<OCTO 2>&1 | tee output.txt
select o1.order_id,o2.order_id from orders o1 inner join orders o2 on o1.customer_id < o2.customer_id;
select o2.order_id,o1.order_id from orders o1 inner join orders o2 on o1.customer_id < o2.customer_id;
OCTO
  verify_output THQ04 output.txt noinfo nodebug
  [[ $(ls -l _ydboctoP*.m | wc -l) -eq 2 ]]
}

@test "THQ05 : OCTO513 : Two different CROSS JOIN queries incorrectly hash to the same plan resulting in incorrect output" {
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries customers THQ05.sql
  # Verify that each of the above queries generates a unique plan by checking for 2 plans below
  [[ $(ls -l _ydboctoP*.m | wc -l) -eq 2 ]]
}

