#################################################################
#								#
# Copyright (c) 2019-2023 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  load_fixture names.sql
  load_fixture names.zwr
}

teardown() {
  corecheck
}

@test "TIJ01 : inner join with simple ON condition" {
  octo >& output.txt <<OCTO
select * from names as t1 inner join names as t2
on (t1.id = t2.id);
OCTO
  run cat output.txt
  [[ "$output" =~ "0|Zero|Cool|0|Zero|Cool" ]]
  ! [[ "$output" =~ "0|Zero|Cool|1|Acid|Burn" ]]
}

@test "TIJ02 : inner join with a table against itself with no ON condition" {
  octo <<OCTO 2>&1 | tee output.txt
CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, EmployeeID INTEGER, OrderDate VARCHAR(16), ShipperID INTEGER);
select o.ShipperID from Orders
inner join Orders o
where Orders.EmployeeID = o.ShipperID and o.ShipperID = 3;
OCTO
  # no crash is a success for this test
}

@test "TIJ03 : inner join with a table against itself with no alias on one of the names" {
  octo <<OCTO 2>&1 | tee output.txt
CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, EmployeeID INTEGER, OrderDate VARCHAR(16), ShipperID INTEGER);
select o.ShipperID from Orders
inner join Orders o
on Orders.EmployeeID = o.ShipperID where o.ShipperID = 3;
OCTO
  # no crash is a success for this test
}

@test "TIJ04 : inner join where ordered joined is inverse of the fix" {
  octo <<OCTO 2>&1 | tee output.txt
CREATE TABLE customers (customer_id INTEGER PRIMARY KEY, first_name VARCHAR(30), last_name VARCHAR(30), email VARCHAR(64), address VARCHAR(128), city VARCHAR(32), state VARCHAR(2), zipcode VARCHAR(10));
CREATE TABLE orders (order_id INTEGER PRIMARY KEY, order_date VARCHAR(30), order_amount VARCHAR(30), customer_id INTEGER);
SELECT * FROM orders as o
INNER JOIN customers AS c
ON c.customer_id = o.customer_id;
OCTO
  # no crash is a success for this test
}

@test "TIJ05 : multiple inner joins across multiple tables that should optimize to ONE FOR loop across ONE table" {
  load_fixture vista-mini.sql
  octo <<OCTO 2>&1 | tee output.txt
SELECT A.order1_id,
       C.name                           AS STATUS_NAME,
       A.current_action
FROM   ORDER1 A
       INNER JOIN ORDER_STATUS C
               ON ( A.status = C.order_status_id )
       INNER JOIN ORDER_ORDER_ACTIONS B
               ON ( A.order1_id = B.order1_id
                    AND A.current_action = B.order_order_actions_id )
INNER JOIN NEW_PERSON D ON (B.signed_by = D.new_person_id)
WHERE  C.name <> 'pending';
OCTO
  count_for_loops ./_ydboctoP*.m 1
}

@test "TIJ06 : inner join where both tables are joined based on non-key column should still fix second column" {
  load_fixture customers.sql
  load_fixture customers.zwr
  octo -vv <<OCTO 2>&1 | tee output.txt
select o1.order_id from orders o1 inner join orders o2 on o1.customer_id = o2.customer_id;
OCTO
  count_num_occurrences "LP_KEY_FIX" output.txt 1	# check that there is 1 occurrence of LP_KEY_FIX in _ydboctoP*.m
}

@test "TIJ07 : Verify that ON clause is not moved to the WHERE clause even in case of NO OUTER JOINs" {
  load_fixture TIJ07.sql subtest novv
  echo "# Verify generated M plan has IF checks in between FOR loops instead of after ALL FOR loops" >> output.txt
  grep -E "SET|octoPlan|FOR|IF" _ydboctoP*.m >> output.txt
  verify_output TIJ07 output.txt
}

