#################################################################
#								#
# Copyright (c) 2020-2021 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
	init_test
	createdb
	load_fixture names.sql
	load_fixture names.zwr
	# Start and stop rocto for all tests. This is needed because `stop_rocto` will not run when it is included in a test case
	# but that test case fails before reaching this call. Automatically doing it with `teardown` avoids this issue.
	test_port=$(start_rocto 1400 --allowschemachanges)	# Need --allowschemachanges as we run CREATE TABLE commands
}

teardown() {
	stop_rocto
}

@test "TII01 : INSERT INTO with firstName=Zero" {
	load_fixture TII01.sql subtest novv
	verify_output TII01 output.txt
}

@test "TII02 : INSERT INTO a xfer table" {
	load_fixture TII02.sql subtest novv
	verify_output TII02 output.txt
}

@test "TII03 : INSERT INTO a 3-key table" {
	load_fixture TII03.sql subtest novv
	verify_output TII03 output.txt
}

@test "TII04 : OCTO502 : Simple INSERT INTO queries work" {
	load_fixture customers.sql
	load_fixture customers.zwr
	load_fixture composite.sql
	load_fixture composite.zwr
	load_fixture TII04.sql subtest novv
	verify_output TII04 output.txt
	if [[ $ydb_chset == "UTF-8" ]]; then
		mv output.txt output_noutf8.txt
		# Since YDB is in UTF-8 mode, we can safely run queries which have UTF-8 code points
		# Some of them when run in M mode can end up with errors as the character length of
		# UTF-8 strings is different in M (byte length) vs UTF-8 (character length) mode and
		# in M mode they can exceed the column size (i.e. VARCHAR(SIZE) in CREATE TABLE).
		load_fixture TII04_utf8.sql subtest novv
		verify_output TII04_utf8 output.txt
		mv output.txt output_utf8.txt
	fi
}

@test "TII05 : OCTO502 : Test various errors in INSERT INTO" {
	load_fixture composite.sql
	load_fixture composite.zwr
	load_fixture TII05.sql subtest novv
	verify_output TII05 output.txt
}

@test "TII06 : OCTO502 : Test INSERT INTO with fewer columns than target table works" {
	load_fixture TII06.sql subtest novv
	echo "# Verify target table columns that don't have a corresponding source column are set to NULL in generated M plan" >> output.txt
	grep -E "INSERT INTO|. SET col\(" _ydboctoP*.m >> output.txt
	verify_output TII06 output.txt
}

@test "TII07 : OCTO502 : Test that physical plans get reused in case of repeated INSERT INTO queries" {
	cp @PROJECT_SOURCE_DIR@/tests/fixtures/TII07.sql .
	echo "# Run an INSERT INTO query and a SELECT query to verify the INSERT INTO worked" > output.txt
	octo -f TII07.sql >> output.txt
	echo "# Turn off write permissions in the current directory (thereby preventing physical plans from being deleted/created)" >> output.txt
	chmod -w .
	echo "# Rerun the INSERT INTO and SELECT query to verify no new physical plans get created" >> output.txt
	octo -f TII07.sql >> output.txt
	echo "# We expect no errors. Previously, we used to see the below error" >> output.txt
	echo "#	[ERROR] src/physical/emit_physical_plan.c:.* ERR_SYSCALL_WITH_ARG : System call failed: fopen(), return 13 (Permission denied): args: build/_ydboctoPAO7X4yjuUBEKaHTmKfr9E4.t" >> output.txt
	echo "# Turn write permissions back on in the current directory" >> output.txt
	chmod +w .
	verify_output TII07 output.txt
}

@test "TII08 : OCTO502 : Test that INSERT INTO builds cross references outside TSTART/TCOMMIT" {
	load_fixture TII08.sql subtest novv
	echo "# Verify that ^%ydboctoX... invocation happens BEFORE the TSTART in the generated M plan" >> output.txt
	grep -E "INSERT|ydboctoX|octoPlan|TSTART|TCOMMIT" _ydboctoP*.m >> output.txt
	verify_output TII08 output.txt
}

@test "TII09 : OCTO502 : Test that INSERT INTO correctly adds duplicate rows on table with no primary key columns" {
	load_fixture TII09.sql subtest novv
	echo "# Run [mupip extract run.ext]" >> output.txt
	$ydb_dist/mupip extract run.ext
	echo "" >> output.txt
	echo "# Additionally verify that hidden column is not emitted in the text table definition" >> output.txt
	echo "# But also verify that the hidden column name shows up in the M gvn of the GLOBAL keyword" >> output.txt
	grep -w "text" run.ext | grep -w TMP1 >> output.txt
	echo '# Additionally verify ^%ydboctoxref got built and has correct contents' >> output.txt
	yottadb -run %XCMD 'zwrite ^%ydboctoxref' >> output.txt
	echo '# Verify key fixing optimization happened for = and IS NULL operators in WHERE clause' >> output.txt
	echo '# Key fixed query will have a plan that does $ORDER(^%ydboctoxref)' >> output.txt
	grep -E -B 1 "SELECT|ydboctoxref" _ydboctoP*.m >> output.txt
	verify_output TII09 output.txt
}
