#################################################################
#								#
# Copyright (c) 2019-2021 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  if [[ @YDB_TLS_AVAILABLE@ -eq 1 ]]; then
    init_tls
  fi
  test_port=$(start_rocto 1344)
}

teardown() {
  stop_rocto
}

@test "TJC001 : Random inner/outer join queries" {
	load_fixture customers.sql
	load_fixture customers.zwr
	# 8 below is max # of inner/outer joins in one query
	yottadb -run TOJ03 8 > TJC001.sql
	# Run using psql and Octo against each of the generated queries
	run_query_in_octo_and_postgres_and_crosscheck_multiple_queries customers TJC001.sql "" usejdbc useextended
}

@test "TJC002 : Simple extended query parameter tests" {
	load_fixture customers.sql
	load_fixture customers.zwr
	load_fixture names.sql
	load_fixture names.zwr
	run_java TJC002 $test_port &> output.txt
	verify_output TJC002 output.txt
}

@test "TJC003 : First character of subsequent select query not consumed" {
	load_fixture customers.sql
	load_fixture customers.zwr
	load_fixture names.sql
	load_fixture names.zwr
	testname="TJC003"
	# Run using psql and Octo against each of the generated queries
	run_java run_query $test_port $testname useextended &> output.txt
	echo "" >> output.txt
	grep -r elect _ydboctoP*.m | sort_LC_ALL_C >> output.txt
	verify_output $testname output.txt
}

@test "TJC004 : Test Query Generator against customers database" {
	run_query_generator customers TJC04- usejdbc
}

@test "TJC005 : Test Query Generator against pastas database" {
	run_query_generator pastas TJC05- usejdbc
}

@test "TJC006 : Test Query Generator against names OR nullcharnames database" {
	if [[ $(( $RANDOM % 2)) -eq 0 ]]; then
		database="names"
	else
		database="nullcharnames"
	fi
	run_query_generator $database TJC06- usejdbc
}

@test "TJC007 : Test Query Generator against northwind database" {
	run_query_generator northwind TJC07- usejdbc
}

@test "TJC008 : Validate usage of Simple vs. Extended Query protocol using PrepareThreshold" {
	stop_rocto
	test_port=$(start_rocto 1344 verbose)
	load_fixture customers.sql
	load_fixture customers.zwr
	load_fixture names.sql
	load_fixture names.zwr
	run_java TJC008 $test_port &> output.txt
	# Confirm both simple and extended query were used
	grep "handle_query" rocto.log >> output.txt
	grep "handle_bind" rocto.log >> output.txt
	verify_output TJC008 output.txt psql
}

@test "TJC009 : Octo returns RowDescription for query with no return rows" {
	stop_rocto
	load_fixture names.sql
	load_fixture names.zwr
	test_port=$(start_rocto 1344 verbose)
	testname="TJC009"
	run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names $testname.sql "" usejdbc
	grep "Sending message of type T" rocto.log &> output.txt
	verify_output $testname output.txt psql
}

@test "TJC010 : parse_context->is_bind_parm array correctly resizes for large numbers of parameters" {
	stop_rocto
	test_port=$(start_rocto 1344 verbose)
	testname="TJC010"
	load_fixture names.sql
	load_fixture names.zwr
	run_java $testname $test_port &> output.txt
	# Cannot test memory expansion path since JDBC driver specifies parameter types; TPGC005 tests the expansion case
	grep "Memory doubled" rocto.log >> output.txt
	verify_output $testname output.txt psql
}

# Note: This test is currently insufficient for fully testing PortalSuspended message handling
# See https://gitlab.com/YottaDB/DBMS/YDBOcto/-/issues/467#note_484704994 for details.
# This note/comment can be removed if/when YDBOcto#467 is fixed.
@test "TJC011 : Test SELECT row limiting with Extended Query; Also tests INSERT INTO and YDBOcto#683 Extended Query for SET/SHOW" {
	load_fixture customers.sql
	load_fixture customers.zwr
	load_fixture names.sql
	load_fixture names.zwr
	run_java TJC011 $test_port &> output.txt
	verify_output TJC011 output.txt
}

@test "TJC012 : OCTO320 : Pipeline failures from TJC007" {
	load_fixture northwind.sql
	load_fixture northwind.zwr
	run_query_in_octo_and_postgres_and_crosscheck_multiple_queries northwind TJC012.sql "" "usejdbc"
}

@test "TJC013 : OCTO435 : Identifiers accepted in SET statements" {
	testname="TJC013"
	load_fixture $testname.sql subtest novv
	verify_output $testname output.txt
}

@test "TJC014 : OCTO422 : Rocto log should not have empty lines" {
	load_fixture names.sql
	load_fixture names.zwr
        run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TJC014a.sql "" usejdbc useextended
        run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TJC014a.sql "" usejdbc
        run_java run_query $test_port TJC014a
        run_java run_query $test_port TJC014b
        [[ $(grep -c "^$" rocto.log) -eq 0 ]]
}

@test "TJC015 : OCTO590 : Rocto ERR_ROCTO_QUERY_TOO_LONG code paths in handle_bind" {
	stop_rocto
	load_fixture names.sql
	load_fixture names.zwr
	test_port=$(start_rocto 1344 quiet)
        run_java TJC015 $test_port "" useextended &> output.txt
        run_java TJC016 $test_port "" useextended >> output.txt
        [[ $(grep -Ec "ERROR.*handle_bind.*ERR_ROCTO_QUERY_TOO_LONG" rocto.log) -eq 2 ]]
	# Extract the line numbers of the relevant error messages
	grep "handle_bind" rocto.log | sed 's/^.*handle_bind.c:\([0-9]*\) .*$/\1/g' &> err_line_nums.txt
	first_err_line_num=$(sed -n '1p' < err_line_nums.txt)
	second_err_line_num=$(sed -n '2p' < err_line_nums.txt)
	# Confirm that two separate cases of the error message were issued, i.e. from two different lines in handle_bind.c
	[[ $first_err_line_num -lt $second_err_line_num ]]
	verify_output TJC015 output.txt
}

@test "TJC017 : OCTO590 : Rocto ERR_ROCTO_QUERY_TOO_LONG code path in copy_text_parameter" {
	stop_rocto
	load_fixture names.sql
	load_fixture names.zwr
	test_port=$(start_rocto 1344 quiet)
        run_java TJC017 $test_port "" useextended &> output.txt
	# Confirm the correct number of the target error message was issued
        [[ $(grep -Ec "ERROR.*copy_bind_parameter.*ERR_ROCTO_QUERY_TOO_LONG" rocto.log) -eq 2 ]]
	# Extract the line numbers of the relevant error messages
	grep "copy_bind_parameter" rocto.log | sed 's/^.*copy_bind_parameter.c:\([0-9]*\) .*$/\1/g' &> err_line_nums.txt
	copy_text_err_line_num=$(sed -n '1p' < err_line_nums.txt)
	copy_binary_err_line_num=$(sed -n '2p' < err_line_nums.txt)
	# Confirm that two separate cases of the error message were issued, i.e. from two different lines in copy_bind_parameter.c
	[[ $copy_text_err_line_num -lt $copy_binary_err_line_num ]]
	verify_output TJC017 output.txt
}

@test "TJC018 : OCTO590 : Rocto ERR_ROCTO_QUERY_TOO_LONG code path in handle_query" {
	stop_rocto
	load_fixture names.sql
	load_fixture names.zwr
	test_port=$(start_rocto 1344 quiet)
        run_java TJC018 $test_port "" usesimple &> output.txt
	# Confirm the target error message was issued
        [[ $(grep -Ec "ERROR.*handle_query.*ERR_ROCTO_QUERY_TOO_LONG" rocto.log) -eq 1 ]]
	verify_output TJC018 output.txt
}

@test "TJC019 : OCTO502 : Test query cancel requests work even when using the extended query protocol" {
	stop_rocto
	load_fixture names.sql
	load_fixture names.zwr
	# Create function that is used in the later query to ensure it takes a long time (and hence needs to be canceled for sure).
	load_fixture HANGTIME.sql
	test_port=$(start_rocto 1344 quiet)
	# Use "useextended" below to ensure extended query protocol is used for the query that gets canceled.
        run_java TJC019 $test_port "" useextended &> output.txt
	verify_output TJC019 output.txt
}
