#################################################################
#								#
# Copyright (c) 2019-2022 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  load_fixture names.sql
  load_fixture names.zwr
}

@test "TL01 : OCTO321 : LIMIT returns more rows than requested if there is a WHERE clause with OR usages" {
  octo <<OCTO 2>&1 | tee output.txt
select * from names where id = 1 or id = 2 limit 1;
OCTO
  verify_output TL01 output.txt
}

@test "TL02 : OCTO299 : Incorrect results from ORDER BY when used with LIMIT" {
  octo <<OCTO 2>&1 | tee output.txt
select * from names order by firstname limit 2;
OCTO
  verify_output TL02 output.txt
}

@test "TL03 : OCTO269a : Verify simple queries without UNION usages but with WHERE/OR usages work fine with LIMIT and/or ORDER BY" {
  load_fixture easynames.sql
  load_fixture easynames.zwr
  cat <<CAT > input.sql
select * from easynames where id = 1 or id = 2 or id = 10 limit 0;
select * from easynames where id = 1 or id = 2 or id = 10 limit 1;
select * from easynames where id = 1 or id = 2 or id = 10 limit 2;
select * from easynames where id = 1 or id = 2 or id = 10 limit 3;
select * from easynames where id = 1 or id = 2 or id = 10 limit 4;
select * from easynames where id = 1 or id = 2 or id = 10 order by name;
select * from easynames where id = 1 or id = 2 or id = 10 order by name limit 0;
select * from easynames where id = 1 or id = 2 or id = 10 order by name limit 1;
select * from easynames where id = 1 or id = 2 or id = 10 order by name limit 2;
select * from easynames where id = 1 or id = 2 or id = 10 order by name limit 3;
select * from easynames where id = 1 or id = 2 or id = 10 order by name limit 4;
CAT
  cat input.sql > output.txt
  octo -f input.sql >> output.txt 2>&1
  verify_output TL03 output.txt
}

@test "TL04 : OCTO269b : Verify simple queries with UNION usages and optional ORDER BY and optional LIMIT usages" {
  # First test against simple fixed queries; Crosscheck Octo output with Postgres
  yottadb -run genfixedsetqueries^gensetqueries # this generates queries of the form setquery01.sql, setquery02.sql ...
  for file in setquery*.sql
  do
    run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names $file
  done
}

@test "TL05 : Simple LIMIT tests" {
  load_fixture TL05.sql subtest novv
  verify_output TL05 output.txt
}

@test "TL06 : OCTO433 : LIMIT in sub-query causes LIMIT in outer query with OR/IN operator in WHERE clause to return more rows than expected" {
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TL06.sql
}

@test "TL07 : LIMIT tests checking the handling of Numeric values" {
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TL07.sql
  # Verify that TL07.sql queries generates only 1 plan as they only differ by limit value
  [[ $(ls -l _ydboctoP*.m | wc -l) -eq 1 ]]
}

@test "TL08 : Generate two plans from two queries having same limit value but different select columns" {
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TL08.sql
  [[ $(ls -l _ydboctoP*.m | wc -l) -eq 2 ]]
}

@test "TL09 : Verify that Limit usage at a column other than the last one of ORDER BY doesn't generate a segmentation fault" {
 load_fixture TL09.sql subtest novv
 verify_output TL09 output.txt
}
