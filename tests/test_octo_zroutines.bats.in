#################################################################
#								#
# Copyright (c) 2019-2023 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  load_fixture names.sql
  load_fixture names.zwr
}

teardown() {
  corecheck
}

@test "TOZ000 : try no octo_zroutines with directory as first element in \$zroutines" {
  mkdir dirA
  export ydb_routines="$(pwd)/dirA $ydb_routines"
  octo <<OCTO 2>&1 | tee output.txt
select * from names limit 1;
OCTO
  echo "Listing of dirA should see generated files" | tee -a output.txt
  ls dirA | tee -a output.txt
  verify_output TOZ000 output.txt
}

@test "TOZ001 : try no octo_zroutines with directory as second element in \$zroutines" {
  mkdir dirA
  if [[ $ydb_chset == "UTF-8" ]]; then
	export ydb_routines="@PROJECT_BINARY_DIR@/src/utf8/_ydbocto.so $(pwd)/dirA $ydb_routines"
  else
	export ydb_routines="@PROJECT_BINARY_DIR@/src/_ydbocto.so $(pwd)/dirA $ydb_routines"
  fi
  octo <<OCTO 2>&1 | tee output.txt
select * from names limit 1;
OCTO
  echo "Listing of dirA should see generated files" | tee -a output.txt
  ls dirA | tee -a output.txt
  verify_output TOZ001 output.txt
}

@test "TOZ002 : try no octo_zroutines with object(source) syntax in \$zroutines" {
  mkdir dirA dirB
  export ydb_routines="$(pwd)/dirA($(pwd)/dirB) $ydb_routines"
  octo <<OCTO 2>&1 | tee output.txt
select * from names limit 1;
OCTO
  echo "Listing of dirA should see generated object file" | tee -a output.txt
  ls dirA | tee -a output.txt
  echo "Listing of dirB should see generated M file" | tee -a output.txt
  ls dirB | tee -a output.txt
  verify_output TOZ002 output.txt
}

@test "TOZ003 : try no octo_zroutines with no valid directories in \$zroutines" {
  export ydb_routines="@PROJECT_BINARY_DIR@/src/_ydbocto.so"
  octo <<OCTO 2>&1 | tee output.txt
select * from names limit 1;
OCTO
  verify_output TOZ003 output.txt
}

@test "TOZ004 : try with octo_zroutines set and in \$zroutines" {
	mkdir dirA
	cat >>octo.conf <<OCTO
octo_zroutines = "$(pwd)/dirA"
OCTO
	# Get $zroutines before starting Octo to compose the expected result by prepending the expected additions from
	# octo_zroutines in the config file above (path not expanded) and the subsequent ydb_routines export (path gets expanded)
	echo -n "$(pwd)/dirA $(pwd)/dirA($(pwd)/dirA) " >> expected_ydb_routines.txt
	$ydb_dist/yottadb -direct <<ZRO 2>&1 | grep -v "YDB>" | tail -n +2 >> expected_ydb_routines.txt
write \$zroutines
ZRO
	export ydb_routines="$(pwd)/dirA $ydb_routines"
	octo -vv <<OCTO 2>&1 | tee output.txt
select * from names limit 1;
OCTO
	echo "Listing of dirA should see generated files" | tee -a output.txt
	ls dirA | tee -a output.txt
	# Verify actual output
	verify_output TOZ004 output.txt noinfo nodebug
	# Verify ydb_routines is properly set
	grep ydb_routines output.txt | sed "s/.*ydb_routines='//g;s/'$//g" > actual_ydb_routines.txt
	diff expected_ydb_routines.txt actual_ydb_routines.txt
}

@test "TOZ005 : try with octo_zroutines set but not in \$zroutines" {
  mkdir dirA
  cat >>octo.conf <<OCTO
octo_zroutines = "$(pwd)/dirA"
OCTO
  octo <<OCTO 2>&1 | tee output.txt
select * from names limit 1;
OCTO
  echo "Listing of dirA should see generated files" | tee -a output.txt
  ls dirA | tee -a output.txt
  verify_output TOZ005 output.txt
}

@test "TOZ006 : use .*() as first element in \$zroutines" {
  mkdir dirA
  export ydb_routines=".*() $(pwd)/dirA $ydb_routines"
  octo <<OCTO 2>&1 | tee output.txt
select * from names limit 1;
OCTO
  echo "Listing of dirA should see generated files" | tee -a output.txt
  ls dirA | tee -a output.txt
  verify_output TOZ006 output.txt
}

@test "TOZ007 : use a non-existent directory as first element in octo_zroutines" {
  cat >>octo.conf <<OCTO
octo_zroutines = "$(pwd)/dirA"
OCTO
  export ydb_routines="."
  octo <<OCTO 2>&1 | tee output.txt
select * from names limit 1;
OCTO
  sed -i 's/found: \/.*\/dirA/found: PATHTO_dirA/' output.txt
  verify_output TOZ007 output.txt
}

@test "TOZ008 : use a regular file as value of octo_zroutines" {
  cat >>octo.conf <<OCTO
octo_zroutines = "$(pwd)/fileA"
OCTO
  touch fileA
  octo <<OCTO 2>&1 | tee output.txt
select * from names limit 1;
OCTO
  sed -i 's/directory: \/.*\/fileA/PATHTO_fileA/' output.txt
  verify_output TOZ008 output.txt
}

@test "TOZ009 : use object(source) syntax as value of octo_zroutines" {
  mkdir dirA dirB
  cat >> octo.conf <<OCTO
octo_zroutines = "$(pwd)/dirA($(pwd)/dirB)"
OCTO
  octo <<OCTO 2>&1 | tee output.txt
select * from names limit 1;
OCTO
  echo "Listing of dirA should see generated object file" | tee -a output.txt
  ls dirA | tee -a output.txt
  echo "Listing of dirB should see generated M file" | tee -a output.txt
  ls dirB | tee -a output.txt
  verify_output TOZ009 output.txt
}


@test "TOZ010 : set \$zroutines entirely though octo_zroutines" {
  cat >>octo.conf <<OCTO
octo_zroutines = "$ydb_routines"
OCTO
  unset ydb_routines
  unset gtmroutines
  octo <<OCTO 2>&1 | tee output.txt
select * from names limit 1;
OCTO
  verify_output TOZ010 output.txt
}

@test "TOZ011 : use a non-existent directory as first element in \$zroutines" {
  export ydb_routines="$(pwd)/dirA $ydb_routines"
  octo <<OCTO 2>&1 | tee output.txt
select * from names limit 1;
OCTO
  grep "YottaDB error: 150374634,(SimpleAPI),%YDB-E-ZROSYNTAX" output.txt
}

@test "TOZ012 : use .*() as the only element in \$zroutines" {
  mkdir dirA
  export ydb_routines=".*()"
  octo <<OCTO 2>&1 | tee output.txt
select * from names limit 1;
OCTO
  verify_output TOZ012 output.txt
}

@test "TOZ013 : \$zroutines with length > 512 bytes" {
  cat >>octo.conf <<OCTO
octo_zroutines = "$ydb_routines"
OCTO
  while [[ $(echo "$ydb_routines" | wc -c) -lt 512 ]]; do
	export ydb_routines="$ydb_routines .()"
  done
  # Save computed ydb_routines env var in file in case it is needed later for reproducing/analyzing a failure
  echo $ydb_routines > ydbroutines.txt
  octo <<OCTO 2>&1 | tee output.txt
select * from names limit 1;
OCTO
  verify_output TOZ013 output.txt
}

@test "TOZ014 : \$zroutines with length == 512 bytes" {
	cat >>octo.conf <<OCTO
octo_zroutines = "$ydb_routines"
OCTO
	# Add paths of 'a's and 'b's to make length of $ydb_routines + octo_zroutines equal to ZRO_INIT_ALLOC (512) without
	# triggering a $ZROUTINES syntax error
	octo_zroutines_len=$(echo -n "$ydb_routines" | wc -c)
	# target_len offsets:
	#	-6 to account for the first ".(./)" and " " in ydb_routines used to create valid $ZROUTINES path
	#	-5 to account for the second ".(./)" in ydb_routines used to create valid $ZROUTINES path
	#	-1 to account for ' ' allocated in octo_init in the failing case, i.e.:
	#		`zroutines_buffer.len_alloc = zroutines_len - zroutines_from_file_len - 1;`
	target_len=$(( (512 - $octo_zroutines_len) - 6 - 5 - 1 ))
	path_len=$(( $target_len / 2 ))
	path1=$(eval "printf '%.sa' {1..$path_len}")
	if [[ $(( $target_len % 2 )) -ne 0 ]]; then
		path2=$(eval "printf '%.sb' {1..$(( $path_len + 1))}")
	else
		path2=$(eval "printf '%.sb' {1..$path_len}")
	fi
	mkdir $path1 $path2
	ydb_routines=".(./$path1) .(./$path2)"

	octo <<OCTO 2>&1 | tee output.txt
select * from names limit 1;
OCTO
	verify_output TOZ014 output.txt
}

@test "TOZ015 : OCTO240 : ydb_routines with length == 512 bytes" {
	export ydb_routines=`$ydb_dist/yottadb -run %XCMD 'for i=1:1:256 write $select(i=256:"..",1:". ")'`
	echo 'export ydb_routines="'$ydb_routines'"' > ydbroutines.txt
	octo <<OCTO 2>&1 | tee output.txt
select * from names limit 1;
OCTO
	verify_output TOZ015 output.txt
}

@test "TOZ016 : OCTO240 : octo_zroutines (in octo.conf) with length == 512 bytes" {
	octozroutines=`$ydb_dist/yottadb -run %XCMD 'for i=1:1:512 write "x"'`
	cat >>octo.conf <<OCTO
octo_zroutines = "$octozroutines"
OCTO
	export ydb_routines=`$ydb_dist/yottadb -run %XCMD 'for i=1:1:128 write $select(i=128:"..()",1:".() ")'`
	echo 'export ydb_routines="'$ydb_routines'"' > ydbroutines.txt
	octo <<OCTO 2>&1 | tee output.txt
select * from names limit 1;
OCTO
	verify_output TOZ016 output.txt
}

