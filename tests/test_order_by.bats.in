#################################################################
#								#
# Copyright (c) 2019-2022 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  load_fixture names.sql
  load_fixture names.zwr
  # below is used by various subtests so keep it here
  $ydb_dist/yottadb -run ^%XCMD 'set ^%ydboctoocto("functions","MODULO")="$$^MODULO"'
}

@test "TOB0A : order by firstName ascending" {
  octo >& output.txt <<OCTO
select * from names order by firstName;
OCTO
  run cat output.txt
  [[ "$output" =~ /1|Acid|Burn.*0|Zero|Cool/ ]]
}

@test "TOB0B : order by firstName ascending explicit" {
  octo >& output.txt <<OCTO
select * from names order by firstName asc;
OCTO
  run cat output.txt
  [[ "$output" =~ /1|Acid|Burn.*0|Zero|Cool/ ]]
}

@test "TOB0C : order by firstName descending" {
  octo >& output.txt <<OCTO
select * from names order by firstName desc;
OCTO
  run cat output.txt
  [[ "$output" =~ /0|Zero|Cool.*1|Acid|Burn/ ]]
}

@test "TOB0D : order by lastName ascending" {
  octo >& output.txt <<OCTO
select * from names order by lastName;
OCTO
  run cat output.txt
  [[ "$output" =~ /1|Acid|Burn.*3|Lord|Nikon/ ]]
}

@test "TOB0E : order by lastName ascending explicit" {
  octo >& output.txt <<OCTO
select * from names order by lastName asc;
OCTO
  run cat output.txt
  [[ "$output" =~ /1|Acid|Burn.*3|Lord|Nikon/ ]]
}

@test "TOB0F : order by lastName descending" {
  octo >& output.txt <<OCTO
select * from names order by lastName desc;
OCTO
  run cat output.txt
  [[ "$output" =~ /3|Lord|Nikon.*1|Acid|Burn/ ]]
}

@test "TOB0G : order by id ascending" {
  octo >& output.txt <<OCTO
select * from names order by id;
OCTO
  run cat output.txt
  [[ "$output" =~ /0|Zero|Cool.*5|Zero|Cool/ ]]
}

@test "TOB0H : order by id ascending explicit" {
  octo >& output.txt <<OCTO
select * from names order by id asc;
OCTO
  run cat output.txt
  [[ "$output" =~ /0|Zero|Cool.*5|Zero|Cool/ ]]
}

@test "TOB0I : order by id descending" {
  octo >& output.txt <<OCTO
select * from names order by id desc;
OCTO
  run cat output.txt
  [[ "$output" =~ /5|Zero|Cool.*0|Zero|Cool/ ]]
}

@test "TOB01 : order by with OR in boolean expression" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT id,firstname FROM names WHERE (id = 0 or id = 1) ORDER BY firstname;
OCTO
  verify_output TOB01 output.txt noinfo nodebug
}

@test "TOB02 : order by with OR and AND in boolean expression" {
  octo <<OCTO 2>&1 | tee output.txt
SELECT id,firstname FROM names WHERE (firstname = "Zero" AND lastname = "Cool") OR (id = 2) ORDER BY firstname;
OCTO
  verify_output TOB02 output.txt noinfo nodebug
}

@test "TOB03 : OCTO332 : order by on column that is an expression using ADDITION on columns from a sub-query" {
  octo <<OCTO 2>&1 | tee output.txt
select 1+id*2 as a from (select id from names) order by a;
OCTO
  verify_output TOB03 output.txt noinfo nodebug
}

@test "TOB04 : OCTO322 : ORDER BY derived column where sub-query does UNION ALL" {
  inputfile="TOB04.sql"
  cp @PROJECT_SOURCE_DIR@/tests/fixtures/$inputfile .
  grep -v '^#' $inputfile > output.txt	# Filter out copyright from output
  octo -f $inputfile >> output.txt 2>&1
  verify_output TOB04 output.txt
}

@test "TOB05 : OCTO334 : ORDER BY on a column with empty string values does not work correctly" {
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TOB05.sql "trim_trailing_zeroes"
}

@test "TOB06 : OCTO228 : Support ORDER BY with more than one column" {
  inputfile="TOB06.sql"
  cp @PROJECT_SOURCE_DIR@/tests/fixtures/$inputfile .
  grep -v '^#' $inputfile > output.txt	# Filter out copyright from output
  octo -f $inputfile >> output.txt 2>&1
  # Also verify that only a subset of of the above queries generates a unique plan and the rest of the queries map to one another
  # The easiest way to do this is to find out the query (in a commented section) from the _ydboctoP*.m file and add it to the
  # output so it can be compared against the reference file.
  echo "; Queries that have generated plans" >> output.txt 2>&1
  echo "; ---------------------------------" >> output.txt 2>&1
  grep select _ydboctoP*.m | cut -d";" -f 2 | sort_LC_ALL_C >> output.txt 2>&1
  verify_output TOB06 output.txt
}

@test "TOB07 : ORDER BY typecast" {
  inputfile="TOB07.sql"
  cp @PROJECT_SOURCE_DIR@/tests/fixtures/$inputfile .
  grep -v '^#' $inputfile > output.txt	# Filter out copyright from output
  octo -f $inputfile >> output.txt 2>&1
  verify_output TOB07 output.txt
}

@test "TOB08 : OCTO343 : ORDER BY expression" {
  inputfile="TOB08.sql"
  cp @PROJECT_SOURCE_DIR@/tests/fixtures/$inputfile .
  grep -v '^#' $inputfile > output.txt	# Filter out copyright from output
  run_octo_allow_error $inputfile output.txt
  verify_output TOB08 output.txt
}

@test "TOB09 : OCTO280 : ORDER BY column_number" {
  inputfile="TOB09.sql"
  cp @PROJECT_SOURCE_DIR@/tests/fixtures/$inputfile .
  grep -v '^#' $inputfile > output.txt	# Filter out copyright from output
  run_octo_allow_error $inputfile output.txt
  verify_output TOB09 output.txt
}

@test "TOB10 : OCTO384 : ORDER BY using column name derived from a sub-query returns incorrect results" {
  inputfile="TOB10.sql"
  cp @PROJECT_SOURCE_DIR@/tests/fixtures/$inputfile .
  grep -v '^#' $inputfile > output.txt	# Filter out copyright from output
  run_octo_allow_error $inputfile output.txt
  verify_output TOB10 output.txt
}

@test "TOB11 : OCTO390 : ORDER BY does not work correctly for empty string values when more than one column is specified" {
  load_fixture TOB11.sql subtest
  verify_output TOB11 output.txt noinfo nodebug
}

@test "TOB12 : ORDER BY does not work correctly if VARCHAR type (i.e. string) column stores numeric values" {
  load_fixture customers.sql
  load_fixture customers.zwr
  load_fixture TOB12.sql subtest
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries customers TOB12.sql
}

@test "TOB13 : OCTO412 : ORDER BY COLUMN NUM does not work if COLUMN NUM in select column list has a sub-query" {
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TOB13.sql
}

@test "TOB14 : OCTO643 : ORDER BY returns incorrect results when used on a value returned by the ROUND function" {
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TOB14.sql
}

@test "TOB15 : OCTO700 : ORDER BY greatest/least/null_if/coalesce with select distinct works" {
  # More details: https://gitlab.com/YottaDB/DBMS/YDBOcto/-/merge_requests/977#note_932757088
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TOB15.sql
}

@test "TOB16 : OCTO842 : Validate that removal of ORDER BY columns belonging to outer query does not affect the result" {
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TOB16.sql
  load_fixture TOB16_errors.sql subtest
  verify_output TOB16_errors output.txt noinfo nodebug
}
