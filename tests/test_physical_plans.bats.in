#################################################################
#								#
# Copyright (c) 2020-2022 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  load_fixture names.sql
  load_fixture names.zwr
}

@test "TPP01 : OCTO543 : Test that ydb_routines env var change does not cause M plan vs plan related gvn mismatch" {
  save_routines=$ydb_routines
  echo "# Set ydb_routines env var to have . as the first path in the pathlist"
  export ydb_routines=". $save_routines"
  echo "# Run TPP01.sql that generates M plan and stores corresponding plan related global variables in database" >> output.txt
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TPP01.sql >> output.txt 2>&1
  echo "# Set ydb_routines env var to have $PWD as the first path in the pathlist"
  export ydb_routines="$PWD $save_routines"
  echo "# Run TPP01.sql again. Should use already generated M plan and corresponding plan related gvns in database" >> output.txt
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TPP01.sql >> output.txt 2>&1
  verify_output TPP01 output.txt
}

@test "TPP02 : OCTO543 : Test scenario where M plan exists but corresponding plan related gvn does not exist in database" {
  echo "# Run TPP01.sql that generates M plan and stores corresponding plan related global variables in database" >> output.txt
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TPP01.sql >> output.txt 2>&1
  echo "# KILL plan related global variables in database but keep M plan intact to create out-of-sync situation" >> output.txt
  yottadb -run %XCMD 'kill ^%ydboctoocto("plan_metadata")' 2>&1 | tee -a output.txt
  echo "# Run TPP01.sql again. Should NOT error out (but instead re-generate M plan and corresponding gvns)" >> output.txt
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TPP01.sql >> output.txt 2>&1
  verify_output TPP02 output.txt
}

@test "TPP03 : OCTO543 : Test scenario where M plan does not exist but corresponding plan related gvn exists in database" {
  echo "# Run TPP01.sql that generates M plan and stores corresponding plan related global variables in database" >> output.txt
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TPP01.sql >> output.txt 2>&1
  echo "# Remove M plan but keep plan related gvn intact to create out-of-sync situation" >> output.txt
  rm _ydboctoP*.{m,o}
  echo "# Run TPP01.sql again. Should NOT error out (but instead re-generate M plan and corresponding gvns)" >> output.txt
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TPP01.sql >> output.txt 2>&1
  verify_output TPP03 output.txt
}

@test "TPP04 : OCTO543 : Test scenario where _ydboctoP*.m exists but corresponding _ydboctoX*.m does not exist" {
  echo "# Run TPP01.sql that generates M plan and stores corresponding plan related global variables in database" >> output.txt
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TPP01.sql >> output.txt 2>&1
  echo "# Remove _ydboctoX*.{m,o} but keep _ydboctoP*.{m,o} intact to create out-of-sync situation" >> output.txt
  rm _ydboctoX*.{m,o}
  echo "# Run TPP01.sql again. Should NOT error out (but _ydboctoX*.{m,o} WILL NOT be regenerated)" >> output.txt
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TPP01.sql >> output.txt 2>&1
  verify_output TPP04 output.txt
}

@test "TPP05 : OCTO543 : Test scenario where _ydbocotoX*.m exists but corresponding xref plan gvn does not exist" {
  echo "# Run TPP01.sql that generates M xref routine and stores corresponding xref plan related gvn in database" >> output.txt
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TPP01.sql >> output.txt 2>&1
  echo "# KILL ^%ydbAIMD* but keep (_ydboctoX*.{m,o} and ^%ydbAIMOctoCache) to create an out-of-sync situation" >> output.txt
  yottadb -r killAIMData^aimutils &>> output.txt
  echo "# Run TPP01.sql again. Should return NO rows (incorrect result) because ^%ydbAIMD* was killed" >> output.txt
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TPP01.sql >> output.txt 2>&1
  echo "# Verify ^%ydbAIMD* was NOT rebuilt. Running [ZWRITE ^%ydbAIMD*]. Output below" >> output.txt
  yottadb -r zwriteAIMData^aimutils &>> output.txt
  verify_output TPP05 output.txt
}

@test "TPP06 : OCTO543 : Test scenario where gvn (that indicates xref has been built) is killed" {
  echo "# Run TPP01.sql that generates M xref plan and stores corresponding xref plan related gvn in database" >> output.txt
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TPP01.sql >> output.txt 2>&1
  echo "# KILL ^%ydbAIMOctoCache but keep _ydboctoX*.{m,o} intact to create out-of-sync situation" >> output.txt
  yottadb -run %XCMD 'kill ^%ydbAIMOctoCache' 2>&1 | tee -a output.txt
  echo "# Run TPP01.sql again. Should return correct results and automatically reconstitute ^%ydbAIMOctoCache" >> output.txt
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TPP01.sql >> output.txt 2>&1
  echo "# Verify ^%ydbAIMOctoCache was correctly rebuilt : Running [ZWRITE ^%ydbAIMOctoCache]. Output below" >> output.txt
  yottadb -run %XCMD 'zwrite ^%ydbAIMOctoCache' 2>&1 | tee -a output.txt
  verify_output TPP06 output.txt
}

@test "TPP07 : OCTO543 : Test ZLINKFILE error if xref rebuild is forced and _ydboctoX*.{m,o} has been deleted" {
  echo "# Run TPP01.sql that generates M xref plan and stores corresponding xref plan related gvn in database" >> output.txt
  octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TPP01.sql >> output.txt 2>&1
  echo "# KILL ^%ydbAIMOctoCache and also remove _ydboctoX*.{m,o} to xref rebuild" >> output.txt
  yottadb -run %XCMD 'kill ^%ydbAIMOctoCache' 2>&1 | tee -a output.txt
  rm _ydboctoX*.{m,o}
  echo "# Run TPP01.sql again. Should issue ZLINKFILE error because _ydboctoX*.m (which rebuilds xref) has been deleted" >> output.txt
  run_octo_allow_error @PROJECT_SOURCE_DIR@/tests/fixtures/TPP01.sql output.txt
  verify_output TPP07 output.txt
}

@test "TPP08 : OCTO694 : Test that xref plan gets regenerated if a physical plan that relies on it gets regenerated" {
	echo "# Run TPP08.sql that generates xref plan for NAMES table and LASTNAME column" >> output.txt
	octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TPP08.sql >> output.txt 2>&1
	echo "# Delete xref plan _ydboctoX*.{m,o}" >> output.txt
	rm _ydboctoX*.{m,o}
	echo "# Run TPP08b.sql again. Verify that no error occurs. xref plan gets regenerated" >> output.txt
	octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TPP08b.sql >> output.txt 2>&1
	verify_output TPP08 output.txt
}

@test "TPP09 : OCTO694 : Test that xref plan gets regenerated (even if it exists) if Octo has no idea of it in its global nodes" {
	echo "# Run TPP08.sql that generates xref plan for NAMES table and LASTNAME column" >> output.txt
	octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TPP08.sql >> output.txt 2>&1
	echo '# KILL internal gvns so Octo has no idea of any generated physical/xref plans' >> output.txt
	yottadb -run %XCMD 'kill ^%ydboctoocto("plandirs"),^%ydboctoocto("plan_metadata"),^%ydbAIMOctoCache' 2>&1 | tee -a output.txt
	echo "# Edit the existing xref plan so it contains garbage. And rerun query that will use this xref plan" >> output.txt
	echo "# If the xref plan does not get regenerated we would see an error due to running the garbage M code" >> output.txt
	echo "# This is a way of verifying that the xref plan does indeed get regenerated" >> output.txt
	xrefplan=`echo _ydboctoX*.m`
	mv $xrefplan $xrefplan.tmp
	echo "  Garbage xref plan" > $xrefplan
	echo "# Run TPP08.sql again. Verify that no error occurs and xref plan gets regenerated" >> output.txt
	octo -f @PROJECT_SOURCE_DIR@/tests/fixtures/TPP08.sql >> output.txt 2>&1
	echo '# Verify internal gvns in Octo corresponding to xref plans did get regenerated' >> output.txt
	yottadb -run %XCMD 'zwrite ^%ydboctoocto("plandirs",*) zwrite ^%ydboctoocto("plan_metadata",*) zwrite ^%ydbAIMOctoCache' 2>&1 | tee -a output.txt
	verify_output TPP09 output.txt
}

