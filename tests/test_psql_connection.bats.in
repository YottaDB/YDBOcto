#################################################################
#								#
# Copyright (c) 2019-2022 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  if [[ @YDB_TLS_AVAILABLE@ -eq 1 ]]; then
    init_tls
  fi
  load_fixture names.sql
  load_fixture names.zwr
  load_fixture pastas.sql
  load_fixture pastas.zwr
  create_default_user
  test_port=$(start_rocto 1339)
}

teardown() {
  stop_rocto
}

@test "TPC00A : test no MD5 authentication failure" {
  # Use non-existent user
  run_psql_auth buttons bobby $test_port <<OCTO 2>&1 | tee output.txt
SELECT * FROM names;
OCTO
    [[ ! "$(cat results.log)" =~ "failed to retrieve user info from database" ]]
}

@test "TPC00B : select wildcard columns" {
  run_psql $test_port <<OCTO 2>&1 | tee output.txt
SELECT * FROM names;
OCTO
  [[ "$(grep -c -E "Zero.\+|Cool" output.txt)" == "2" ]]
}

@test "TPC00C : select wildcard columns with envvar ydb_lvnullsubs=2 (used to previously error out with LVNULLSUBS)" {
  export ydb_lvnullsubs=2
  run_psql $test_port <<OCTO 2>&1 | tee output.txt
SELECT * FROM names;
OCTO
  [[ "$(grep -c -E "Zero.\+|Cool" output.txt)" == "2" ]]
}

@test "TPC00D : select lastName only (empty row+column check)" {
  run_psql $test_port <<OCTO 2>&1 | tee output.txt
SELECT lastName FROM names;
OCTO
  verify_output T0011 output.txt noinfo nodebug
}

@test "TPC00E : select two empty columns only (empty row+column check)" {
  run_psql $test_port <<OCTO 2>&1 | tee output.txt
SELECT lastName, favoritePasta FROM names4;
OCTO
  verify_output T0012 output.txt noinfo nodebug
}

@test "TPC00F : ensure correct columns are sent using xref" {
  run_psql $test_port <<OCTO 2>&1 | tee output.txt
SELECT * FROM names WHERE firstName = "Zero";
OCTO
  [[ "$(grep -c -E "0.+Zero.+Cool" output.txt)" == "1" ]]
}

@test "TPC00G : use_dns config option false" {
  stop_rocto
  run sed -i '/rocto: {/a use_dns: false;' octo.conf
  if [[ $status -ne 0 ]]; then
    echo "rocto: { use_dns: false; }" > octo.conf
  fi
  test_portA=$(start_rocto $test_port)
  run_psql $test_portA <<OCTO 2>&1 | tee output.txt
SELECT * FROM names WHERE firstName = "Zero";
OCTO
  [[ $(grep -c "127.0.0.1" rocto.log) -ge 1 ]]
}

@test "TPC00H : use_dns config option true" {
  stop_rocto
  run sed -i '/rocto: {/a use_dns: true;' octo.conf
  if [[ $status -ne 0 ]]; then
    echo "rocto: { use_dns: true; }" > octo.conf
  fi
  test_portB=$(start_rocto $test_port)
  run_psql $test_portB <<OCTO 2>&1 | tee output.txt
SELECT * FROM names WHERE firstName = "Zero";
OCTO
  [[ $(grep -c "localhost" rocto.log) -ge 1 ]]
}

@test "TPC00I : verify that dead procs don't become zombies" {
  run_psql $test_port <<OCTO 2>&1 | tee output.txt
SELECT * FROM names;
OCTO
  # Sleep for a moment so rocto has time to clean the PID
  sleep 1s
  [[ $(ps -ef | awk '$3 == '`cat rocto.pid`' { print $0;}' | wc -l) -eq 0 ]]
}

@test "TPC00J : ensure error message when YDB_TLS_AVAILABLE not set and ssl_on is set " {
  if [[ @YDB_TLS_AVAILABLE@ -ne 0 ]]; then
    skip "YDB_TLS_AVAILABLE is set"
  fi
  stop_rocto
  cat <<OCTO &> octo.conf
rocto: {
	ssl_on: true;
	port: $test_port;
}

tls: {
	CAfile: "$test_temp/CA.crt";
	CApath: "$test_temp/";
	OCTOSERVER: {
		format: "PEM";
		cert: "$test_temp/server.crt";
		key: "$test_temp/server.key";
	}
}
OCTO
  run rocto -vv
  [[ "$output" =~ "ERROR" ]]
  [[ "$output" =~ "YottaDB TLS plugin not installed" ]]
}

@test "TPC00K : ensure socket cleanup when rocto process is killed" {
  kill -9 $(cat rocto.pid)
  start_rocto $test_port
  log=$(cat rocto.log)
  [[ ! "$log" =~ "System error 98: Address already in use" ]]
}

@test "TPC00L : ensure error message when trying to call an M function in rocto" {
  DDOLAR='$$'
  run_psql $test_port <<OCTO 2>&1 | tee output.txt
select $DDOLAR^USERFUNC1(42) from names;
OCTO
  verify_output T0023 output.txt noinfo nodebug
}

@test "TPC00M : ensure full SQL query is logged (no missing bytes) in rocto and octo log when started with -vvv" {
  query="select id from names"
  expectstring="Parsing done for SQL command \[$query\]"
  echo $query > query.sql
  run_psql $test_port < query.sql 2>&1 | tee output.txt
  octo -vvv -f query.sql 2>&1 | tee octo.log
  [[ $(grep -c "$expectstring" rocto.log) -eq 1 ]]
  [[ $(grep -c "$expectstring" octo.log) -eq 1 ]]
}

@test "TPC000 : invalid syntax should get an error message" {
  run_psql $test_port <<OCTO 2>&1 | tee output.txt
SELECT * AFRO names;
OCTO
  cat output.txt rocto.log > combined_output.log
  sed -i '/.*failed to send.*/d' combined_output.log
  verify_output TPC000 combined_output.log psql noinfo nodebug
}

@test "TPC001 : start rocto without --allowschemachanges and try to change the schema" {
  yottadb -run %XCMD 'set ^T1(1,2)="1|2",^T1(42,9001)="42|9001",^T1(1337,42)="1337|42"'
  stop_rocto
  test_portC=$(start_rocto $test_port)
  cat >> in.sql <<OCTO
select * from t1;
create table t1(a int, b int);
select * from t1;
drop table t1;
select * from names limit 1;
OCTO
  cat in.sql 2>&1 | tee output.txt
  run_psql $test_portC < in.sql 2>&1 | tee -a output.txt
  verify_output TPC001 output.txt noinfo nodebug
}

@test "TPC002 : start rocto with --allowschemachanges and try to change the schema" {
  yottadb -run %XCMD 'set ^T1(1,2)="1|2",^T1(42,9001)="42|9001",^T1(1337,42)="1337|42"'
  stop_rocto
  test_portD=$(start_rocto $test_port -aw)
  cat >> in.sql <<OCTO
select * from t1;
create table t1(a int, b int) global "^T1(keys(""a""),keys(""b""))";
select * from t1;
drop table t1;
select * from t1;
OCTO
  cat in.sql 2>&1 | tee output.txt
  run_psql $test_portD < in.sql 2>&1 | tee -a output.txt
  verify_output TPC002 output.txt noinfo nodebug
}

@test "TPC003 : start rocto with -a and try to change the schema" {
  yottadb -run %XCMD 'set ^T1(1,2)="1|2",^T1(42,9001)="42|9001",^T1(1337,42)="1337|42"'
  stop_rocto
  test_portE=$(start_rocto $test_port -aw)
  cat >> in.sql <<OCTO
select * from t1;
create table t1(a int, b int) global "^T1(keys(""a""),keys(""b""))";
select * from t1;
drop table t1;
select * from t1;
OCTO
  cat in.sql 2>&1 | tee output.txt
  run_psql $test_portE < in.sql 2>&1 | tee -a output.txt
  verify_output TPC003 output.txt noinfo nodebug
}

@test "TPC004 : test clean termination with Terminate message" {
  run_psql $test_port <<OCTO 2>&1 | tee output.txt
\q
OCTO
    # Confirm that the Termination was received and applied within rocto_main_loop
    [[ "$(grep -c -E "rocto_main_loop.*connection closed cleanly" rocto.log)" == "1" ]]
    grep -Ev "SSLRequest|Loaded config|rocto started on port" rocto.log >> rocto.clean
    verify_output TPC004 rocto.clean psql nodebug
}

@test "TPC005 : ensure error message when trying to use prepared statement parameters via simple query protocol" {
  cat >> in.sql <<OCTO
select * from names where \$1 = \$2;
OCTO
  cat in.sql 2>&1 | tee output.txt
  run_psql $test_port < in.sql 2>&1 | tee -a output.txt
  verify_output TPC005 output.txt noinfo nodebug
}

@test "TPC006 : ensure zero rows returned with Simple Query protocol" {
  cat >> in.sql <<OCTO
select * from names where id = 7;
OCTO
  cat in.sql 2>&1 | tee output.txt
  run_psql $test_port < in.sql 2>&1 | tee -a output.txt
  verify_output TPC006 output.txt noinfo nodebug
}

@test "TPC007 : Rocto enforces ssl_required configuration setting" {
	if [[ @YDB_TLS_AVAILABLE@ -eq 1 ]]; then
		stop_rocto
		cat <<OCTO &> octo.conf
rocto: {
ssl_on: true;
ssl_required: true;
}

tls: {
CAfile: "$test_temp/CA.crt";
CApath: "$test_temp/";
OCTOSERVER: {
	format: "PEM";
	cert: "$test_temp/server.crt";
	key: "$test_temp/server.key";
}
}
OCTO
		cat >> in.sql <<OCTO
select * from names;
exit
OCTO

		test_portF=$(start_rocto 1339)
		# Ignore extra verbiage emitted by some versions of psql and retain only the common/relevant message
		PGPASSWORD=ydbrocks psql -U ydb "sslmode=disable host=localhost port=$test_portF" 2>&1	\
			| grep "FATAL:  Server requires all connections to be TLS encrypted."		\
			| sed 's/psql: //' >> output.txt		# Remove psql prompt for output compatibility between versions
		run_psql $test_portF < in.sql 2>&1 | tee -a output.txt
		verify_output TPC007 output.txt noinfo nodebug
	else
		skip "YDB_TLS_AVAILABLE is not set"
	fi
}

@test "TPC008 : Rocto detects conflicts between ssl_required and ssl_on" {
	if [[ @YDB_TLS_AVAILABLE@ -eq 1 ]]; then
		stop_rocto
		cat <<OCTO &> octo.conf
rocto: {
ssl_on: false;
ssl_required: true;
}
OCTO
		run rocto
		echo $output &> rocto.log
		verify_output TPC008 rocto.log noinfo nodebug
	else
		skip "YDB_TLS_AVAILABLE is not set"
	fi
}

@test "TPC009 : Rocto flags use of ssl_required when YDB TLS plugin is not installed" {
	if [[ @YDB_TLS_AVAILABLE@ -eq 0 ]]; then
		stop_rocto
		cat <<OCTO &> octo.conf
rocto: {
ssl_on: false;
ssl_required: true;
}
OCTO
		run rocto
		echo $output &> rocto.log
		verify_output TPC009 rocto.log noinfo nodebug
	else
		skip "YDB_TLS_AVAILABLE is set"
	fi
}

@test "TPC010 : OCTO483 : CREATE TABLE allows TAB characters in DELIM qualifier" {
	# Load fixture with rows delimited by non-printable characters (TAB)
	load_fixture TC016.zwr
	# Restart rocto with --allowschemachanges and --readwrite
	stop_rocto
	test_portG=$(start_rocto $test_port quiet -aw)
	run_psql $test_portG TC016.sql 2>&1 | tee output.txt
	verify_output TPC010 output.txt noinfo
}

@test "TPC011 : OCTO483 : CREATE TABLE allows other non-printable characters in DELIM qualifier" {
	# Load fixture with rows delimited by non-printable characters (carriage return)
	load_fixture TC017.zwr
	# Restart rocto with --allowschemachanges and --readwrite
	stop_rocto
	test_portH=$(start_rocto $test_port quiet -aw)
	run_psql $test_portH TC017.sql 2>&1 | tee output.txt
	verify_output TPC011 output.txt noinfo
}

@test "TPC012 : OCTO483 : CREATE TABLE works with regular characters as DELIM qualifier" {
	# Load fixture with rows delimited by regular characters
	load_fixture TC018U.zwr	# '_'-delimited
	load_fixture TC018P.zwr # '|'-delimited
	# Restart rocto with --allowschemachanges and --readwrite
	stop_rocto
	test_portI=$(start_rocto $test_port quiet -aw)
	run_psql $test_portI TC018.sql 2>&1 | tee output.txt
	verify_output TPC012 output.txt noinfo
}

@test "TPC013 : OCTO483 : CREATE TABLE works with multiple characters as DELIM qualifier" {
	# Load fixture with rows delimited by multiple regular characters
	load_fixture TC019.zwr
	# Restart rocto with --allowschemachanges and --readwrite
	stop_rocto
	test_portJ=$(start_rocto $test_port quiet -aw)
	run_psql $test_portJ TC019.sql 2>&1 | tee output.txt
	verify_output TPC013 output.txt noinfo
}

@test " TPC014 : OCTO483 : CREATE TABLE works with multiple characters as DELIM qualifier, including non-printable characters" {
	# Load fixture with rows delimited by multiple regular and non-printable characters
	load_fixture TC020.zwr
	# Restart rocto with --allowschemachanges and --readwrite
	stop_rocto
	test_portK=$(start_rocto $test_port quiet -aw)
	run_psql $test_portK TC020.sql 2>&1 | tee output.txt
	verify_output TPC014 output.txt noinfo
}

@test " TPC015 : OCTO483 : Rocto issues error when CREATE TABLE DELIM list contains non-integers" {
	run_psql $test_port TERR024.sql 2>&1 | tee output.txt
	verify_output TPC015 output.txt noinfo
}

@test " TPC016 : OCTO483 : Rocto issues error when invalid integer values are used in CREATE TABLE DELIM list" {
	run_psql $test_port TERR025.sql 2>&1 | tee output.txt
	verify_output TPC016 output.txt noinfo
}

@test " TPC017 : OCTO502 : AS keyword supports list of column name aliases (on top of table name alias)" {
	# We want to test that the column names of the select column list are correct. And there is no easy way
	# to do that other than to run the queries through psql/rocto. But this means we cannot run the crosscheck.
	# Since this test cares more about the column names, we skip the crosscheck and maintain a reference file.
	run_psql $test_port TPC017.sql 2>&1 | tee output.txt
	verify_output TPC017 output.txt noinfo nodebug
}

@test "TPC018 : OCTO590 : Rocto does not issue read size error for long queries" {
	stop_rocto
	test_portL=$(start_rocto $test_port quiet -aw)
	testname="TPC018"
	cat <<OCTO &> $testname.sql
CREATE TABLE table1 (
  id INTEGER PRIMARY KEY
  $(for i in $(seq 1 10000); do echo ", column$i VARCHAR"; done)
);
SELECT * from table1;
select c.relname, a.attname
from pg_catalog.pg_class as c
    inner join pg_catalog.pg_attribute as a on a.attrelid = c.oid
where c.relname = 'TABLE1' and c.relkind = 'r';
OCTO
	# Load the table schema into octo
	run_psql $test_portL $testname.sql 2>&1 | tee output.txt
	# Output for this test is large, so confirm no error without using outref
	# This also covers the SELECT query above, since table1 should exist and no "Unknown table" error should be issued
	[[ $(grep -c ERROR output.txt) -eq 0 ]]
	# Count rows returned columns to ensure all accounted for
	[[ $(grep -c "TABLE1  | COLUMN" output.txt) -eq 10000 ]]
}

@test " TPC019 : OCTO590 : Rocto issues error for query exceeding OCTO_MAX_QUERY_LEN" {
	testname=TPC019
	stop_rocto
	test_portM=$(start_rocto $test_port quiet)
	cat <<OCTO > $testname.sql
SELECT * FROM names WHERE id = 0 OR id = 2
$(for i in $(seq 1 32120); do echo " AND id = 10000000000001234512345"; done);
OCTO
	run_psql $test_portM $testname.sql 2>&1 | tee output.txt
	verify_output $testname output.txt noinfo nodebug
}

@test "TPC020 : OCTO509 : \d works with rocto" {
  # Only verify result as generated query differs between platforms
  run_psql $test_port TPC020.sql | tee output.txt
  verify_output TPC020 output.txt noinfo nodebug
}

@test "TPC021 : OCTO502 : Test that INSERT INTO displays number of rows inserted when used with psql and rocto" {
	stop_rocto
	test_portN=$(start_rocto $test_port quiet --readwrite)
	run_psql $test_port TPC021.sql | tee output.txt
	verify_output TPC021 output.txt noinfo nodebug
}

@test "TPC022 : OCTO683 : Test that SHOW command sends RowDescription messages with Simple Query Protocol (psql client)" {
	run_psql $test_port TPC022.sql 2>&1 | tee output.txt
	verify_output TPC022 output.txt noinfo
}

@test "TPC023 : OCTO597 : Test that SET/SHOW commands correctly update/retrieve runtime variables using the Simple Query Protocol (psql client)" {
	run_psql $test_port TPC023.sql 2>&1 | tee output.txt
	verify_output TPC023 output.txt noinfo nodebug
}

@test "TPC024 : OCTO597 : Test that SET/SHOW commands works for all supported variables" {
	run_psql $test_port TPC024.sql 2>&1 | tee output.txt
	# Confirm error messages issued for read-only variables, blocking out host/port info likely to change across test runs
	grep "ERR_PARM_CANNOT_BE_CHANGED" rocto.log | sed 's/^\[.*:[0-9]*\] /\[HOST:POST\] /' >> output.txt
	verify_output TPC024 output.txt noinfo nodebug
}

@test "TPC025 : OCTO597 : Test pg_settings xrefs are updated when value changed via SET command" {
	run_psql $test_port TPC025.sql 2>&1 | tee output.txt
	verify_output TPC025 output.txt noinfo nodebug
}

@test "TPC026 : OCTO710 : Test multiple clients connect to same rocto listener and run concurrent queries fine" {
	load_fixture HANGTIME.sql       # Define HANGTIME as a function
	echo "# Start 3 rocto servers in the background by initiating 3 client connections to the same rocto port" > output.txt
	echo "# Each client runs the same query in TPC026.sql that takes 12 seconds to complete" >> output.txt
	strip_sql_comments TPC026.sql
	# Note that we do not invoke "run_psql" with TPC026.sql as a parameter in the calls below as it is possible
	# "strip_sql_comments TPC026.sql" is invoked by each of the "run_psql" calls below at exactly the same time
	# resulting in a "TPC026.sql" input file that is empty for some of the "psql" invocations. This can cause
	# rare test failures. Hence the "strip_sql_comments" is done separately above and the stripped input file is
	# provided as stdin in the below commands.
	run_psql $test_port < TPC026.sql > output1.txt 2>&1 &
	run_psql $test_port < TPC026.sql > output2.txt 2>&1 &
	run_psql $test_port < TPC026.sql > output3.txt 2>&1 &
	echo "# Sleep 5 seconds to give rocto servers time to have started executing queries" >> output.txt
	echo "# Since they anyways will take 12 seconds to run, we are not losing any test runtime due to this sleep." >> output.txt
	sleep 5s
	echo "# Check YDB locks owned by backgrounded rocto server processes. We expect 3 of them." >> output.txt
	echo "# Before YDBOcto#710 fix, we would see only 1 lock at any point in time." >> output.txt
	$ydb_dist/lke show -all > output0.txt 2>&1
	echo "PASS : 3 locks seen in LKE SHOW -ALL output as expected" >> output.txt
	[[ $(grep "ddl" output0.txt | sort -u | wc -l) -eq 3 ]]
	echo "# Wait for backgrounded clients to finish" >> output.txt
	wait %1 %2 %3
	echo "# Verify that all 3 queries that ran concurrently gave the correct output" >> output.txt
	cat output1.txt output2.txt output3.txt >> output.txt
	verify_output TPC026 output.txt noinfo nodebug
}

@test "TPC027 : OCTO739 : Test lots of client/psql connections to rocto work without EMFILE/ENO24 (Too many open files) error" {
	echo "# Restart rocto after limiting process to 16 max file descriptors" > output.txt
	stop_rocto
	ulimit -n 16
	test_port=$(start_rocto $test_port)
	echo "# Run 16 queries one after other using different psql connections to same rocto listener" >> output.txt
	echo "# Verify all psql connections executed fine without max fd limit being reached" >> output.txt
	try=1
	while [ $try -le 16 ];
	do
		run_psql $test_port TPC027.sql 2>&1 | tee -a output.txt
		try=$[$try + 1]
	done
	verify_output TPC027 output.txt noinfo nodebug
}

