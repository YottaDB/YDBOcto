#################################################################
#								#
# Copyright (c) 2019-2021 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  load_fixture names.sql
  load_fixture names.zwr
  load_fixture customers.sql
  load_fixture customers.zwr
}

@test "TRTE01 : LIKE/SIMILAR TO etc. usages in names database" {
	# TRTE01.sql has 250+ queries so run only a small random fraction (20%) of them to cut down test runtime.
	run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TRTE01.sql 0.20
}

@test "TRTE02 : OCTO398 : LIKE with Wildcard Characters returns incorrect results in some cases" {
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries customers TRTE02.sql
}

@test "TRTE03 : OCTO418 : Issue error if LIKE pattern ends with escape character" {
  # TRTE03.sql cannot be used with `run_query_in_octo_and_postgres_and_crosscheck_multiple_queries` because of error
  load_fixture TRTE03.sql subtest
  verify_output TRTE03_errors output.txt noinfo nodebug
}

@test "TRTE04a & TRTE04b : OCTO468 : LIKE, SIMLAR TO and ~ works with non string literal comparison" {
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TRTE04a.sql
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries customers TRTE04b.sql
}

@test "TRTE05 : LIKE/SIMILAR TO etc. only generate one plan for different string literals" {
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TRTE05.sql
  [[ $(ls -l _ydboctoP*.m | wc -l) -eq 1 ]]
}

@test "TRTE06 : Verifies that optimization doesn't break pattern processing when same pattern but different operation is used" {
  run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TRTE06.sql
}

@test "TRTE07 : Optimize LIKE (and SIMILAR TO) operator to EQUALS operator if no wildcards are used in pattern" {
  cp @PROJECT_SOURCE_DIR@/tests/fixtures/TRTE07.sql .
  # Construct list of queries using LIKE
  grep " like " TRTE07.sql > like.sql
  # Construct list of queries using NOT LIKE
  sed 's/ like / not like /g' like.sql > notlike.sql
  # Construct list of queries using SIMILAR TO
  sed 's/ like / similar to /g' like.sql > similarto.sql
  # Construct list of queries using NOT SIMILAR TO
  sed 's/ like / not similar to /g' like.sql > notsimilarto.sql
  # Construct list of queries using EQUAL TO
  sed 's/ like / = /g' like.sql > equalto.sql
  # Construct list of queries using NOT EQUAL TO
  sed 's/ like / != /g' like.sql > notequalto.sql
  # Construct consolidated list of queries
  cat like.sql notlike.sql similarto.sql notsimilarto.sql equalto.sql notequalto.sql > input.sql
  # Run octo -vv on queries to figure out which plans each query goes to
  octo -vv -f input.sql > output.txt 2>&1
  # Print list of generated M plans and which queries map to each generated plan.
  grep -E "INFO_PARSING_DONE|INFO_M_PLAN|INFO_REUSE_M_PLAN" output.txt | sed 's/.* \[//;s/;]$//;s/] (to execute SQL query)//;' | awk 'NR % 2 == 1 { line = $0;} NR % 2 == 0 { printf "%s : %s;\n", $0, line; }' | sed 's,'`pwd`',$PWD,;' | sort_LC_ALL_C > clean_output.txt
  # Not using "verify_output" as that replaces _ydboctoPxxx with _ydboctoP*.m which is not desired as we want to see
  # exactly which queries map to which plans.
  cp ../../tests/outref/TRTE07.ref .
  diff TRTE07.ref clean_output.txt
}
