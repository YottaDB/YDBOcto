#################################################################
#								#
# Copyright (c) 2019-2024 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  load_fixture names.sql
  load_fixture names.zwr
}

teardown() {
  corecheck
}

@test "TSQ000 : OID type length" {
  load_fixture TSQ000.sql subtest
  verify_output TSQ000 output.txt
}

@test "TSQ001 : get relkind" {
  load_fixture TSQ001.sql subtest
  verify_output TSQ001 output.txt
}

@test "TSQ002 : get tables" {
  load_fixture TSQ002.sql subtest
  verify_output TSQ002 output.txt nodebug   # nodebug added to reduce otherwise large outref size
}

@test "TSQ003 : test1" {
  load_fixture TSQ003.sql subtest
  verify_output TSQ003 output.txt nodebug   # nodebug added to reduce otherwise large outref size
}

@test "TSQ004 : test2" {
  load_fixture TSQ004.sql subtest
  verify_output TSQ004 output.txt
}

@test "TSQ005 : test3" {
  load_fixture TSQ005.sql subtest
  verify_output TSQ005 output.txt nodebug   # nodebug added as DEBUG messages cause erratic terminal output
}

@test "TSQ006 : select database version" {
  load_fixture TSQ006.sql subtest
  verify_output TSQ006 output.txt
}

@test "TSQ007 : psql \\dt" {
  load_fixture TSQ007.sql subtest
  verify_output TSQ007 output.txt
}

@test "TSQ008 : verify that OIDs are lined up for namespaces" {
  export ydb_mstack_size=10000
  load_fixture TSQ008.sql subtest
  verify_output TSQ008 output.txt
}

@test "TSQ009 : verify attrdef table and pg_get_expr function exist (ODBC)" {
  load_fixture TSQ009.sql subtest
  verify_output TSQ009 output.txt
}

@test "TSQ010 : verify typlen field is correct in pg_catalog.pg_type" {
  load_fixture TSQ010.sql subtest novv
  verify_output TSQ010 output.txt
}

@test "TSQ011 : function lookup query succeeds without error" {
  load_fixture TSQ011.sql subtest novv
  verify_output TSQ011 output.txt
}

@test "TSQ012 : OCTO945 : \d PG_CLASS etc. does not display the ending parenthesis after OID" {
	echo "# Determine list of tables loaded by octo-seed.sql by doing a [\d] with no arguments" >> output.txt
	echo "\d;" | octo >& slashd.txt
	cat slashd.txt >> output.txt
	echo "# Do a \d <tablename> for each <tablename> identified in the above [\d] output." >> output.txt
	echo "# We expect to see the [Global:] line for each table show a gvn with a terminating right paren." >> output.txt
	echo "# We include the entire output in the reference file just in case it helps identify other regressions" >> output.txt
	tablelist=$(grep "table" slashd.txt | awk -F"|" '{print $2;}')
	for table in $tablelist; do echo "\d $table;"; done >> slashd_table.sql
	octo < slashd_table.sql >> output.txt
	verify_output TSQ012 output.txt
}

@test "TSQ013 : OCTO948 : Ensure tables/functions defined in Octo seed cannot be dropped" {
	# Determine the list of table/function names from octo-seed.sql
	cp @PROJECT_SOURCE_DIR@/tests/fixtures/octo-seed.sql .
	grep -r "CREATE TABLE" octo-seed.sql >> input_create_table.sql.log
	grep -r "CREATE FUNCTION" octo-seed.sql >> input_create_function.sql.log
	sed 's/(.*/(/' input_create_table.sql.log >> input_create_table.sql.log2
	sed '/^\//d;' input_create_function.sql.log >> input_create_function.sql.log2
	sed '/^ \*/d;' input_create_function.sql.log2 >> input_create_function.sql.log3
	sed 's/\(.*\) \(.*\)\.\(.*\)\((.*\)/\1 \`\2\.\3\`\4/' input_create_function.sql.log3 >> input_create_function.sql.log4
	# Add drop statements
	sed 's/CREATE TABLE \(.*\) *(/drop table \1;/' input_create_table.sql.log2 >> input_drop_table.sql
	grep "drop table .*\..*" input_drop_table.sql | sed 's/drop table .*\.\(.*\)/drop table \1/' >> input_drop_table.sql
	sed 's/CREATE FUNCTION \(.*\) RETURNS.*/drop function \1;/' input_create_function.sql.log4 >> input_drop_function.sql
	grep "drop function .*\..*" input_drop_function.sql | sed 's/drop function `.*\.\(.*\)`\(.*\)/drop function \1\2/' >> input_drop_function.sql
	cat input_*.sql >> input.sql
	# Validate that all of them generate an error
	octo -p -f input.sql 2>&1 | tee -a output.txt
	verify_output TSQ013 output.txt
}
