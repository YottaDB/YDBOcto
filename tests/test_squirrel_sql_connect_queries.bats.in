#################################################################
#								#
# Copyright (c) 2019-2023 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

#
# Note: Most of the below SquirrelSQL queries do not work correctly.
#	This is most likely because we have not yet implemented the full Postgres Catalog.
#
load test_helpers

setup() {
  init_test
  createdb
  if [[ @YDB_TLS_AVAILABLE@ -eq 1 ]]; then
    init_tls
  fi
  load_fixture names.sql
  load_fixture names.zwr
  test_port=$(start_rocto 1345)
}

teardown() {
  stop_rocto
  corecheck
}

@test "TSSCQ01 : Squirrel SQL : SET extra_float_digits" {
  testname="TSSCQ01"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname 2>&1 output.txt
  # Confirm no errors
  [[ $(grep -v "CUSTOM_ERROR" rocto.log | grep -c "ERROR") -eq 0 ]]
  # Confirm command was parsed
  grep "SET extra_float_digits = 3" rocto.log >> output.txt
  echo -e "\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt psql noconfig
}

@test "TSSCQ02 : Squirrel SQL : SET application_name" {
  testname="TSSCQ02"
  echo -en "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname 2>&1 output.txt
  # Confirm no errors
  [[ $(grep -v "CUSTOM_ERROR" rocto.log | grep -c "ERROR") -eq 0 ]]
  # Newline for outref readability
  echo >> output.txt
  # Confirm command was parsed
  grep "SET application_name = 'PostgreSQL JDBC Driver'" rocto.log >> output.txt
  echo -e "\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt psql noconfig
}

@test "TSSCQ03 : Squirrel SQL : SELECT current_schema()" {
  # Note that this case also tests the usage of a function with 0 parameters,
  # and so no specific test for that is needed in test_create_function.bats.in
  testname="TSSCQ03"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  # Confirm no errors
  [[ $(grep -v "CUSTOM_ERROR" rocto.log | grep -c "ERROR") -eq 0 ]]
  echo -e "\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt psql noinfo
}

@test "TSSCQ04 : Squirrel SQL : typname = name and nspname = pg_catalog" {
  # Seems to only return a single row
  testname="TSSCQ04"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  echo -e "\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt psql noinfo
}

@test "TSSCQ05 : Squirrel SQL : name = max_index_keys" {
  # Currently returns an error because of Unknown table pg_catalog.pg_settings
  testname="TSSCQ05"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  echo -e "\n\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt noinfo
}

@test "TSSCQ06 : Squirrel SQL : word <> ALL known keywords" {
  # Gets additional keywords beyond just the known keywords, maybe?
  # Currently returns an error because it tries to interpret the function pg_catalog.Pg_get_keywords() as a
  # table name and ends up with an Unknown table error.
  # Also note that this query uses SQL arrays, which are currently unsupported.
  #
  # TODO: Further, note that the fixes for #679 cause octo to exit with a non-zero code on error,
  # resulting in an otherwise erroneous test failure. `|| true` is added to the octo command
  # to prevent this failure. When the above issues are resolved, this operation can be removed.
  testname="TSSCQ06"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  echo -e "\n\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1 || true
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt noinfo
}

@test "TSSCQ07 : Squirrel SQL : nspname != pg_toast and typelem = 0 and typrelid = 0" {
  # Supposed to return a list of data type names (bool, int, char ...)
  # Currently returns only "oid" and "text".
  testname="TSSCQ07"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  echo -e "\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt noinfo
}

@test "TSSCQ08 : Squirrel SQL : 5-way join" {
  # Query truncated?
  testname="TSSCQ08"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  echo -e "\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt noinfo
}

@test "TSSCQ09 : Squirrel SQL : List of tables from the information schema" {
  # Returns a list of tables from the information schema
  # Query truncated?
  testname="TSSCQ09"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  echo -e "\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt noconfig
}

@test "TSSCQ10 : Squirrel SQL : List of system tables from the pg_catalog" {
  # Returns a list of system tables
  testname="TSSCQ10"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  echo -e "\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt noconfig
}

@test "TSSCQ11 : Squirrel SQL : List of user defined tables" {
  # Returns a list of user defined tables
  testname="TSSCQ11"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  echo -e "\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt noconfig
}

@test "TSSCQ12 : Squirrel SQL : Returns information_schema, pg_catalog, public" {
  # Return value is 3 rows, information_schema, pg_catalog, public
  testname="TSSCQ12"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  # Confirm unimplemented feature warning
  grep "WARN.*arrays" rocto.log >> output.txt 2>&1
  echo -e "\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt psql noconfig
}

@test "TSSCQ13 : Squirrel SQL : Column retrieval query" {
  load_fixture customers.sql
  load_fixture customers.zwr
  testname="TSSCQ13"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  echo -e "\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt  noconfig
}

@test "TSSCQ14 : Squirrel SQL : Column retrieval query" {
  testname="TSSCQ14"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  echo -e "\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt noconfig
}

@test "TSSCQ15 : Squirrel SQL : Column retrieval query" {
  testname="TSSCQ15"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  echo -e "\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt noconfig
}

@test "TSSCQ16 : Squirrel SQL : Column retrieval query" {
  testname="TSSCQ16"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  echo -e "\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt noinfo
}

@test "TSSCQ17 : Squirrel SQL : Column retrieval query" {
  testname="TSSCQ17"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  echo -e "\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt noinfo
}

@test "TSSCQ18 : Squirrel SQL : Column retrieval query" {
  load_fixture northwind.sql
  load_fixture northwind.zwr
  testname="TSSCQ18"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  echo -e "\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt noinfo
}

@test "TSSCQ19 : Squirrel SQL : Column retrieval query" {
  load_fixture northwind.sql
  load_fixture northwind.zwr
  testname="TSSCQ19"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  echo -e "\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt noinfo
}

@test "TSSCQ20 : Squirrel SQL : Column retrieval query" {
  load_fixture customers.sql
  load_fixture customers.zwr
  testname="TSSCQ20"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  echo -e "\n----- OCTO -----" >> output.txt
  octo -f $testname.sql >> output.txt 2>&1
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt noinfo
}

@test "TSSCQ21 : Squirrel SQL : Connection query" {
  # Returns syntax error due to unsupported array syntax
  testname="TSSCQ21"
  echo -e "\n----- ROCTO/JDBC -----" &> output.txt
  run_java run_query $test_port $testname >> output.txt 2>&1
  echo -e "\n\n----- OCTO -----" >> output.txt
  # Error is expected, so don't fail test with non-zero exit code by appending `|| true`
  octo -f $testname.sql >> output.txt 2>&1 || true
  # Prepend query executed
  printf '%s\n%s\n' "$(cat $testname.sql)" "$(cat output.txt)" > output.txt
  verify_output $testname output.txt noinfo
}
