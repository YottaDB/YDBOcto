#################################################################
#								#
# Copyright (c) 2020-2022 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
	init_test
	createdb
	load_fixture names.sql
	load_fixture names.zwr
}

@test "TV000 : WITHOUT -v, WITHOUT config file verbosity" {
	# Create local copy of octo.conf without verbosity setting
	if [[ @DISABLE_INSTALL@ == "ON" ]]; then
		grep -vE "^verbosity" @PROJECT_SOURCE_DIR@/src/aux/octo.conf.default &> octo.conf
	else
		grep -vE "^verbosity" $ydb_dist/plugin/octo/octo.conf &> octo.conf
	fi
	load_fixture TV000.sql subtest novv
	verify_output TV000 output.txt
}

@test "TV001 : WITHOUT -v, WITH config file verbosity set to all valid levels" {
	echo -e "------------------------------\nUsing command line verbosity level: default (no -v)\n------------------------------" >> output.txt
	for verbosity in ERROR INFO DEBUG TRACE; do
		cat <<OCTO &> octo.conf
verbosity = "$verbosity"
OCTO
		rm -rf *.m *.o		# Cleanup plans to force regeneration
		echo -e "\n------------------------------\nUsing config verbosity level: $verbosity\n------------------------------\n" >> output.txt
		load_fixture TV000.sql subtest novv
	done

	# Confirm that config is loaded from $ydb_dist if octo is installed there
	if [[ @DISABLE_INSTALL@ == "OFF" ]]; then
		# We expect this message 3 times, once each for the following verbosity levels: INFO, DEBUG, TRACE
		[[ $(grep -c "Loaded config from /.*/plugin/octo/octo.conf" output.txt) -eq 3 ]]
	fi
	verify_output TV001 output.txt
}

@test "TV002 : WITH -v, WITHOUT config file verbosity" {
	# Only filter verbosity from config file if config file exists
	if [[ @DISABLE_INSTALL@ == "ON" ]]; then
		grep -vE "^verbosity" @PROJECT_SOURCE_DIR@/src/aux/octo.conf.default &> octo.conf
	else
		grep -vE "^verbosity" $ydb_dist/plugin/octo/octo.conf &> octo.conf
	fi
	load_fixture TV000.sql subtest v
	verify_output TV002 output.txt
}

@test "TV003 : WITH -v, WITH config file verbosity set to all valid levels" {
	# The output should be the same for all cases, as command line options override config file settings.
	# Accordingly, use the same outref for all possible config file verbosity settings.
	for verbosity in ERROR INFO DEBUG TRACE; do
		cat <<OCTO &> octo.conf
verbosity = "$verbosity"
OCTO
		rm -rf *.m *.o		# Cleanup plans to force regeneration
		load_fixture TV000.sql subtest v
		verify_output TV003 output.txt
		# Rename to cleanup for the next loop iteration and save each output case for debugging in case of failure
		mv output.txt $verbosity.txt
	done
}

@test "TV004 : WITH -vv, WITHOUT config file verbosity" {
	if [[ @DISABLE_INSTALL@ == "ON" ]]; then
		grep -vE "^verbosity" @PROJECT_SOURCE_DIR@/src/aux/octo.conf.default &> octo.conf
	else
		grep -vE "^verbosity" $ydb_dist/plugin/octo/octo.conf &> octo.conf
	fi
	load_fixture TV000.sql subtest vv
	verify_output TV004 output.txt
}

@test "TV005 : WITH -vv, WITH config file verbosity set to all valid levels" {
	# The output should be the same for all cases, as command line options override config file settings.
	# Accordingly, use the same outref for all possible config file verbosity settings.
	for verbosity in ERROR INFO DEBUG TRACE; do
		cat <<OCTO &> octo.conf
verbosity = "$verbosity"
OCTO
		rm -rf *.m *.o		# Cleanup plans to force regeneration
		load_fixture TV000.sql subtest vv
		verify_output TV005 output.txt
		# Rename to cleanup for the next loop iteration and save each output case for debugging in case of failure
		mv output.txt $verbosity.txt
	done
}

@test "TV006 : WITH -vvv, WITHOUT config file verbosity" {
	if [[ @DISABLE_INSTALL@ == "ON" ]]; then
		grep -vE "^verbosity" @PROJECT_SOURCE_DIR@/src/aux/octo.conf.default &> octo.conf
	else
		grep -vE "^verbosity" $ydb_dist/plugin/octo/octo.conf &> octo.conf
	fi
	load_fixture TV000.sql subtest vvv
	verify_output TV006 output.txt
}

@test "TV007 : WITH -vvv, WITH config file verbosity set to all valid levels" {
	# The output should be the same for all cases, as command line options override config file settings.
	# Accordingly, use the same outref for all possible config file verbosity settings.
	for verbosity in ERROR INFO DEBUG TRACE; do
		cat <<OCTO &> octo.conf
verbosity = "$verbosity"
OCTO
		rm -rf *.m *.o		# Cleanup plans to force regeneration
		load_fixture TV000.sql subtest vvv
		verify_output TV007 output.txt
		# Rename to cleanup for the next loop iteration and save each output case for debugging in case of failure
		mv output.txt $verbosity.txt
	done
}

@test "TV008 : octo correctly outputs config file syntax errors" {
	cat <<OCTO &> octo.conf
verbosity = "ERROR"
abcd
OCTO
	octo <<OCTO 2>&1 | tee output.txt
exit
OCTO
	verify_output TV008 output.txt
}

# TV009 moved to test_no_parallel_suite.bats.in

@test "TV010 : octo disallows FATAL as verbosity level" {
	cat <<OCTO &> octo.conf
verbosity = "FATAL"
OCTO
	octo <<OCTO 2>&1 | tee output.txt
exit
OCTO
	verify_output TV010 output.txt
}

@test "TV011 : verbosity is propagated to _ydboctoInit.m" {
	rm *.dat *.gld
	createdb 1

	echo -e "Verbosity set to ERROR:" >> output.txt
	octo <<OCTO 2>&1 | tee -a output.txt
exit
OCTO

	echo -e "\nVerbosity set to INFO:" >> output.txt
	octo -v <<OCTO 2>&1 | tee -a output.txt
exit
OCTO

	echo -e "\nVerbosity set to DEBUG:" >> output.txt
	octo -vv <<OCTO 2>&1 | tee -a output.txt
exit
OCTO

	echo -e "\nVerbosity set to TRACE:" >> output.txt
	octo -vvv <<OCTO 2>&1 | tee -a output.txt
exit
OCTO
	verify_output TV011 output.txt
}

@test "TV012 : OCTO506 : octo -vv produces garbage logical plan output for queries with lots of OR conditions" {
  load_fixture TV012.sql subtest
  # Verify tail of logical plan (as full plan is almost 0.4Mb in size and would result in a huge reference file)
  mv output.txt full_output.txt
  echo "# head -20 of full_output.txt follows" > output.txt
  # Note that "Loaded config" message could be variable (one could see octo.conf from $ydb_dist being loaded or not
  # depending on whether @DISABLE_INSTALL@ is ON or OFF). Therefore filter it out before capturing first 20 and last 20 lines
  # or else the reference file cannot be deterministic.
  # Similarly, note that -vv will yield information for many ydb_* environment variables, which is not relevant for this test.
  # Accordingly, these lines are stripped out.
  grep -v 'Loaded config' full_output.txt | grep -v ydb_ | head -20 >> output.txt
  echo "# tail -20 of full_output.txt follows" >> output.txt
  grep -v 'Loaded config' full_output.txt | tail -20 >> output.txt
  verify_output TV012 output.txt
}

@test "TV013: OCTO511 : octo -c logs that the config file was read" {
	mkdir tmp
	touch tmp/octo.conf
	octo -v -c tmp/octo.conf <<< exit > full_output.txt 2>&1
	grep 'Loaded config' full_output.txt > output.txt
	verify_output TV013 output.txt
}

@test "TV014: OCTO490 : octo -vv outputs all pertinent YDB environment variables" {
	octo -vv <<OCTO &> output.txt
\q
OCTO
	for ydbvar in ydb_{boolean,chset,crypt_config,dir,dist,gbldir,lct_stdnull,rel,repl_instance,repl_instname,routines,xc_ydbposix,side_effects}; do
		grep $ydbvar output.txt
	done
}

@test "TV015: OCTO502 : Verify LOGICAL PLAN output of VALUES clause and INSERT INTO using -vv" {
	cp @PROJECT_SOURCE_DIR@/tests/fixtures/TII06.sql .
	# TII06.sql has one query that is also used by the TV015 subtest
	# The query file has that query tagged as TV015 so search for it to find the query
	grep TV015 TII06.sql > input.sql
	octo -f input.sql -vv > output.txt 2>&1
	verify_output TV015 output.txt
}

@test "TV016 : OCTO502 : octo disallows integers as verbosity level (only strings are accepted)" {
	echo "verbosity = 1" > octo.conf
	echo "# Test that [verbosity = 1] issues error" > output.txt
	octo < /dev/null >> output.txt 2>&1 || true
	verify_output TV016 output.txt
}

