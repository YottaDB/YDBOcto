#################################################################
#								#
# Copyright (c) 2021-2022 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup_file() {
	# This sets-up a temporary directory so that we can download and generate files there.
	setup_bats_env

	# Remove Current Octo environment (when invoked locally; pipeline env is clean); disrupts VistA
	for e in `env | grep -E '^(ydb|gtm)' | cut -d= -f1`; do unset $e; done

	# Source VistA environment, and add $ydb_routines for Octo,
	source @TEST_VISTA_ENV_FILE@
	export ydb_dist=$gtm_dist
	[[ -z ${ydb_routines} ]] && export ydb_routines=$gtmroutines

	# Add Posix plugin call-out file
	export ydb_xc_ydbposix="$ydb_dist/plugin/ydbposix.xc"

	# Get a good routine directory
	primary_routine_directory=$($ydb_dist/yottadb -r %XCMD 'W $P($$SRCDIR^%RSEL," ")')
	echo "Primary Routine Directory: $primary_routine_directory"

	# Set the location of various optional files from CMake
	test_vista_input_sql="@TEST_VISTA_INPUT_SQL@"
	test_vista_input_m="@TEST_VISTA_INPUT_M@"
	test_vista_input_f="@TEST_VISTA_INPUT_F@"
	test_vista_input_f_sql="@TEST_VISTA_INPUT_F_SQL@"

	# Get SQL Generator %YDBOCTOVISTAM
	pushd $primary_routine_directory
	if [ ! -f "$test_vista_input_m" ]; then
		rm -f _YDBOCTOVISTAM.m
		curl -sLO https://gitlab.com/YottaDB/DBMS/ydbvistaocto/raw/master/_YDBOCTOVISTAM.m
	else
		cp "$test_vista_input_m" .
	fi
	popd

	if [ ! -f "$test_vista_input_sql" ]; then
		# Generate the vista.sql file
		# Variables DUZ and DIQUIET are VistA variables to allow Fileman to operate.
		# DUZ=.5 Run as Postmaster
		# DUZ(0)="@" Run with Programmer Priviliges
		# DIQUIET Don't print new lines during DT^DICRW
		# DT^DICRW Set-up minimum Fileman Environment
		# MAPALL^%YDBOCTOVISTAM Main code that creates the SQL mapping file
		$ydb_dist/yottadb -r %XCMD 'S DUZ=.5,DIQUIET=1,DUZ(0)="@" D DT^DICRW,MAPALL^%YDBOCTOVISTAM("@PROJECT_BINARY_DIR@/vista.sql")'
	else
		# We want the destination file to be named vista.sql irrespective of the name of the source file as that is relied upon in later stages
		cp "$test_vista_input_sql" "@PROJECT_BINARY_DIR@"/vista.sql
	fi

	# Get VistA functions routine %YDBOCTOVISTAF
	pushd $primary_routine_directory
	if [ ! -f "$test_vista_input_f" ]; then
		rm -f _YDBOCTOVISTAF.m
		curl -sLO https://gitlab.com/YottaDB/DBMS/ydbvistaocto/raw/master/_YDBOCTOVISTAF.m
	else
		cp "$test_vista_input_f" .
	fi
	popd

	# Get VistA functions definitions SQL
	if [ ! -f "$test_vista_input_f_sql" ]; then
		rm -f _YDBOCTOVISTAF.sql
		curl -sLO https://gitlab.com/YottaDB/DBMS/ydbvistaocto/raw/master/_YDBOCTOVISTAF.sql
	else
		cp "$test_vista_input_f_sql" .
	fi

	# Set-up PATH and the rest of ydb_routines, normally done by other scripts we are not using
	if [[ @DISABLE_INSTALL@ == "ON" ]]; then
		export PATH="@PROJECT_BINARY_DIR@/src:$PATH"
		export ydb_routines=".(. @PROJECT_SOURCE_DIR@/tests/fixtures) $ydb_dist/plugin/o/_ydbposix.so @PROJECT_BINARY_DIR@/src/_ydbocto.so @PROJECT_BINARY_DIR@ $ydb_routines"
	else
		# In our other tests, ydb_env_set does this.
		export PATH="$ydb_dist/plugin/bin:$PATH"
		export ydb_routines=".(. @PROJECT_SOURCE_DIR@/tests/fixtures) $ydb_dist/plugin/o/_ydbposix.so $ydb_dist/plugin/o/_ydbocto.so @PROJECT_BINARY_DIR@ $ydb_routines"
	fi

	# Save environment for debugging
	env > dbg_env.out
	env | grep -E '^(ydb|gtm)' > dbg_ydb_env.out

	# Delete and recreate the Octo region (just in case it was done before)
	# This test needs to be re-runnable, and thus we ensure that the region is created
	# with the correct settings
	if $ydb_dist/yottadb -run ^GDE show | grep '%ydbocto'; then
		$ydb_dist/yottadb -run ^GDE <<FILE1
delete -region OCTO
delete -segment OCTO
delete -name %ydbocto*
FILE1
	fi
	$ydb_dist/yottadb -run ^GDE <<FILE2
add -name %ydbocto* -region=OCTO
add -region OCTO -dyn=OCTO -null_subscripts=true -key_size=1019 -record_size=1048576
add -segment OCTO -file="$test_temp/octo.dat" -block_size=2048 -allocation=128000
exit
FILE2

	# Create Octo Database
	$ydb_dist/mupip create -r=OCTO

	# Import VistA DDL and Functions into Octo
	octo -f @PROJECT_BINARY_DIR@/vista.sql > OctoImport.log
	octo -f _YDBOCTOVISTAF.sql             > OctoFunctionsImport.log

	# Remove bats_test.out as we are not really a test but just a temporary directory
	# Otherwise pipeline tries to evaluate us as a test
	rm -f bats_test.out
}

setup() {
	setup_bats_env
	save_env_variables
}

@test "TVD0000 : Hello VistA" {
	load_fixture TVD0000.sql subtest novv
	verify_output TVD0000 output.txt
}

@test "TVD0001 : NULL queries against ORDER1 table" {
	load_fixture TVD0001.sql subtest novv
	verify_output TVD0001 output.txt
}

@test "TVD0002 : Test INSERT INTO, DELETE FROM, UPDATE queries against ORDER1 table are disallowed due to READ_ONLY" {
	load_fixture TVD0002.sql subtest novv
	verify_output TVD0002 output.txt
}

@test "TVD0003 : Test Realistic Sample Query 1" {
	load_fixture TVD0003.sql subtest novv
	verify_output TVD0003 output.txt
}

@test "TVD0004 : Test Realistic Sample Query 2" {
	load_fixture TVD0004.sql subtest novv
	verify_output TVD0004 output.txt
}

@test "TVD0005 : OCTO761, YDBOctoVistA#7 Refactoring Extract Fields to use DELIM \"\"" {
	load_fixture TVD0005.sql subtest novv
	verify_output TVD0005 output.txt
}

@test "TVD0006 : YDBOctoVistA#7 Refactoring Word Processing Extract Fields to use DELIM \"\"" {
	load_fixture TVD0006.sql subtest novv
	verify_output TVD0006 output.txt
}

@test "TVD0007 : YDBOctoVistA#14 COMPUTED MULTIPLE fields produce valid output" {
	load_fixture TVD0007.sql subtest novv
	verify_output TVD0007 output.txt
}
