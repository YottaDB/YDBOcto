#################################################################
#								#
# Copyright (c) 2019-2022 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

load test_helpers

setup() {
  init_test
  createdb
  load_fixture names.sql
  load_fixture names.zwr
}

@test "TX01 : xref top level count is maintained correctly if mapped global nodes are deleted" {
  # Run SQL query that generates xref
  octo <<OCTO 2>&1 | tee output.txt
SELECT * FROM names WHERE firstName = "Zero";
OCTO
  # Verify xref is generated
  echo " --> ZWRITE ^names,^%ydbAIMD*" >> output.txt
  yottadb -run %XCMD 'zwrite ^names'  2>&1 | tee -a output.txt
  yottadb -run zwriteAIMData^aimutils 2>&1 | tee -a output.txt
  # Delete mapped node and Verify xref is automatically updated by the installed trigger
  echo " --> KILL ^names(0)  ZWRITE ^%ydbAIMD*" >> output.txt
  yottadb -run %XCMD 'kill ^names(0)' 2>&1 | tee -a output.txt
  yottadb -run zwriteAIMData^aimutils 2>&1 | tee -a output.txt
  echo " --> KILL ^names(5)  ZWRITE ^%ydbAIMD*" >> output.txt
  yottadb -run %XCMD 'kill ^names(5)' 2>&1 | tee -a output.txt
  yottadb -run zwriteAIMData^aimutils 2>&1 | tee -a output.txt
  verify_output TX01 output.txt noinfo nodebug
}

@test "TX02 : OCTO540 : Incorrect results if WHERE clause has COLUMN is NULL usage and M global nodes change after xrefs were built" {
  load_fixture northwind.sql
  load_fixture northwind.zwr
  cp @PROJECT_SOURCE_DIR@/tests/fixtures/TX02.sql .
  echo "# cat TX02.sql" > output.txt
  grep SELECT TX02.sql >> output.txt
  echo "# Running : octo -f TX02.sql : Expect 1 row of output" >> output.txt
  octo -f TX02.sql 2>&1 | tee -a output.txt
  echo "# Running : zwrite ^Customers(37)" >> output.txt
  yottadb -run %XCMD 'zwrite ^Customers(37)' 2>&1 | tee -a output.txt
  echo "# Running : set ^Customers(37) : Changing PostalCode from NULL to 'NullCode'" >> output.txt
  yottadb -run %XCMD 'set ^Customers(37)="Hungry Owl All-Night Grocers|Patricia McKenna|8 Johnstown Road|Cork|NullCode|Ireland"' 2>&1 | tee -a output.txt
  echo "# Re-Running : octo -f TX02.sql : Expect NO output" >> output.txt
  octo -f TX02.sql 2>&1 | tee -a output.txt
  echo "#" >> output.txt
  verify_output TX02 output.txt
}

@test "TX03 : OCTO667 : Query that builds more than one cross reference does not TP restart indefinitely" {
	echo '# Need 1 region in order to reproduce the indefinite TP restart issue' > output.txt
	echo '# More than 1 region does not reproduce the issue (reasons not clear)' > output.txt
	echo '# Delete gld and 2 *.dat files created by createdb as part of setup() function' >> output.txt
	rm $ydb_gbldir *.dat
	echo '# Create 1 region database' >> output.txt
	createdb 1
	echo '# Need to set global buffers to a small value for the LRU clock algorithm (in "db_csh_getn" of YDB repo)' >> output.txt
	echo "# to kick in and cause a self-inflicted restart." >> output.txt
	mupip set -global_buffers=65 -reg "*"
	echo '# Create ^names1 and ^names2 globals with lots of nodes corresponding to the NAMES1 and NAMES2 tables' >> output.txt
	echo '# But more importantly also set nodes in the same globals that are not part of the NAMES1/NAMES2 tables' >> output.txt
	echo '# and that take up more space in the GDS block as this is necessary to cause a restart due to lack of' >> output.txt
	echo '# global buffers ("cdb_sc_lostcr" in tp_hist.c).' >> output.txt
	echo '# Note that two globals are needed to reproduce the original issue.' >> output.txt
	echo '# It is not clear yet why that is the case but it is not considered important enough to investigate.' >> output.txt
	yottadb -run ^%XCMD 'for i=1:1:1000 s (^names1(i),^names2(i))="A|B" s (^names1(i,0),^names2(i,0))=$j(1,200)'
	yottadb -run ^%XCMD 'for i=1001 s (^names1(i),^names2(i))="C|D" s (^names1(i,0),^names2(i,0))=$j(1,200)'
	echo '# Run SQL query TX03.sql that generates xref' >> output.txt
	cp @PROJECT_SOURCE_DIR@/tests/fixtures/TX03.sql .
	octo -f TX03.sql 2>&1 | tee -a output.txt
	verify_output TX03 output.txt
}

@test "TX04 : OCTO531 : Optimize IS NULL check in WHERE clause by using key fixing optimization" {
	echo '# Run IS NULL query using Octo and Postgres and verify same output (should see no message below)' > final_output.txt
	run_query_in_octo_and_postgres_and_crosscheck_multiple_queries names TX04.sql
	echo '# Verify ^%ydbAIMD* got built and has correct contents' >> final_output.txt
	yottadb -run zwriteAIMData^aimutils >> final_output.txt
	echo '# Verify key fixing optimization happened in physical plan only for <lastname IS NULL> query' >> final_output.txt
	echo '# Key fixed query will have a plan that does $ORDER(^%ydbAIMD*)' >> final_output.txt
	grep -E -B 1 "SELECT|%ydbAIMD" _ydboctoP*.m >> final_output.txt
	verify_output TX04 final_output.txt
}

@test "TX05 : OCTO657 : Octo-AIM regression where NULLs are missed because data that doesn't exist isn't indexed" {
        # Type 1 does not work will any region that has null enabled
        # Normally, Octo testing framework has nulls enabled even for DEFAULT region
	mupip set -null_subscripts=never -region DEFAULT
	$ydb_dist/yottadb -run %XCMD 'kill ^x set ^x(1,1)="a",^x(2,0)=""'
	cp @PROJECT_SOURCE_DIR@/tests/fixtures/TX05.sql .
	octo -f TX05.sql 2>&1 | tee -a output.txt
	verify_output TX05 output.txt
}

@test "TX06 : Test AIMTYPE 1 on CREATE TABLE" {
        # Type 1 does not work will any region that has null enabled
        # Normally, Octo testing framework has nulls enabled even for DEFAULT region
	mupip set -null_subscripts=never -region DEFAULT

	# Note that this SQL DDL does not use ENDPOINT, and therefore, has some weird data
	# that looks like this:
	# ^%ydbAIMDDolRlgd8xujbnMBgUv9VCA(1,"","AMASTERVUID")=""
	# ^%ydbAIMDDolRlgd8xujbnMBgUv9VCA(1,"","AVUID")=""
	# ^%ydbAIMDDolRlgd8xujbnMBgUv9VCA(1,"","B")=""
	#
	# These are index nodes in VistA and are not supposed to be indexed; however, for the
	# purposes of this test, this is fine, as the ENDPOINT logic is tested in TW28.
	cp @PROJECT_SOURCE_DIR@/tests/fixtures/TX06.sql .
	load_fixture vista-mini.zwr

	# Remove node which will result into a NULL entry
	yottadb -run %XCMD 'kill ^ORD(100.01,1,"VUID")'
	load_fixture TX06.sql

	yottadb -run zwriteAIMData^aimutils 2>&1 | tee -a output.txt
	grep '%YDBAIM' _ydboctoX* | tee -a output.txt
	verify_output TX06 output.txt
}
