#!/bin/bash
#################################################################
#								#
# Copyright (c) 2020-2022 YottaDB LLC and/or its subsidiaries.	#
# All rights reserved.						#
#								#
#	This source code contains the intellectual property	#
#	of its copyright holder(s), and is made available	#
#	under a license.  If you do not know the terms of	#
#	the license, please stop and do not read further.	#
#								#
#################################################################

# Error handling setup
trap clean_up SIGHUP SIGINT SIGTERM

script_name=$(basename $0)
cleanup_files=""

clean_up() {
	rm -rf $cleanup_files
}

error_exit() {
	echo "ERROR: $script_name: $1" 1>&2  # Direct to stderr
	clean_up
	exit 1
}

if [[ "" = $ydb_dist ]]; then
	error_exit "\$ydb_dist is undefined. Please set \$ydb_dist before installing Octo."
fi
if [[ "root" != $(whoami) ]]; then
	error_exit "Cannot install as user $(whoami). YottaDB Octo does not currently support non-root installations."
fi

# Confirm installation is for correct platform (OS/distro, version, architecture)
expected_platform_name=@PLATFORM_NAME@
actual_platform_name=$(./get_platform_name.sh)
# Treat CentOS and RHEL interchangably
if [[ "rhel" = $actual_platform_name  || "centos" = $actual_platform_name ]]; then
	actual_platform_name="CentOS/RHEL"
fi
if [[ "rhel" = $expected_platform_name  || "centos" = $expected_platform_name ]]; then
	expected_platform_name="CentOS/RHEL"
fi
if [[ $actual_platform_name != $expected_platform_name ]]; then
	error_exit "Tarball built for $expected_platform_name, but current platform is $actual_platform_name."
fi
# Only check the major version and ignore minor version differences for compatibility
expected_platform_version=$(echo @PLATFORM_VERSION@ | cut -f 1 -d '.')
actual_platform_version=$(./get_platform_version.sh | cut -f 1 -d '.')
if [[ $actual_platform_version != $expected_platform_version ]]; then
	error_exit "Tarball built for $expected_platform_name version $expected_platform_version, but current platform version is $actual_platform_version."
fi
expected_platform_arch=@PLATFORM_ARCH@
actual_platform_arch=$(./get_platform_arch.sh)
if [[ $actual_platform_architecture != $expected_platform_architecture ]]; then
	error_exit "Tarball built for $expected_platform_name on $expected_platform_architecture architecture, but current platform architecture is $actual_platform_architecture."
fi

# An exhaustive list of installation files can be found in src/CMakeLists.txt (those with `install` rules).
# Any modification to those rules will likely need to be reflected here.

# Check that YDB release is supported
required_release=@MIN_YDB_RELEASE@
actual_release=$(./get_ydb_release.sh $required_release)
if [[ 0 -ne $? ]]; then
	echo "ERROR: YottaDB version r$actual_release not supported. Minimum supported version: $required_release."
	exit 1
fi

# Create Octo plugin directory
echo -n "INFO: Creating Octo plugin directory..."
install -d $ydb_dist/plugin/octo
if [[ $? -eq 0 ]]; then
	echo " OK."
	cleanup_files="$cleanup_files $ydb_dist/plugin/octo"
else
	error_exit "$LINENO: Failed to create Octo plugin directory."
fi
# Check for all requisite files for proper Octo/Rocto operation
# Check for YDBPosix
req_posix_files=""

if [[ -d $ydb_dist/utf8 || "utf8" =~ $ydb_dist ]]; then
	uf8_supported="yes"
else
	echo "INFO: YottaDB installation does not support UTF-8 mode. Installing Octo without UTF-8 support."
	uf8_supported="no"
fi

echo "INFO: Checking for YDBPosix plugin..."
echo -n "----> Checking for $ydb_dist/plugin/libydbposix.so... "
if [[ ! -f $ydb_dist/plugin/libydbposix.so ]]; then
	req_posix_files="$ydb_dist/plugin/libydbposix.so"
	install -D plugin/libydbposix.so $ydb_dist/plugin/
	if [[ $? -eq 0 ]]; then
		echo "OK."
		cleanup_files="$cleanup_files $ydb_dist/plugin/libydbposix.so"
	else
		error_exit "$LINENO: Failed to install libydbposix.so"
	fi
else
		echo " OK."
fi
echo -n "----> Checking for $ydb_dist/plugin/ydbposix.xc... "
if [[ ! -f $ydb_dist/plugin/ydbposix.xc ]]; then
	req_posix_files="$req_posix_files $ydb_dist/plugin/ydbposix.xc"
	install -D plugin/ydbposix.xc $ydb_dist/plugin/
	if [[ $? -eq 0 ]]; then
		echo "OK."
		cleanup_files="$cleanup_files $ydb_dist/plugin/ydbposix.xc"
	else
		error_exit "$LINENO: Failed to install ydbposix.xc"
	fi
else
		echo " OK."
fi
echo -n "----> Checking for $ydb_dist/plugin/o/_ydbposix.so..."
if [[ ! -f $ydb_dist/plugin/o/_ydbposix.so ]]; then
	req_posix_files="$req_posix_files $ydb_dist/plugin/o/_ydbposix.so"
	install -D plugin/o/_ydbposix.so $ydb_dist/plugin/o/
	if [[ $? -eq 0 ]]; then
		echo " OK."
		cleanup_files="$cleanup_files $ydb_dist/plugin/o/_ydbposix.so"
	else
		error_exit "$LINENO: Failed to install _ydbposix.so"
	fi
else
		echo " OK."
fi
# UTF8 mode is optional
if [[ "yes" == $utf8_supported ]]; then
	echo -n "----> Checking for $ydb_dist/plugin/o/utf8/ydbposix.so..."
	if [[ ! -f $ydb_dist/plugin/o/utf8/_ydbposix.so ]]; then
		req_posix_files="$req_posix_files $ydb_dist/plugin/o/utf8/_ydbposix.so"
		install -D plugin/o/_ydbposix.so $ydb_dist/plugin/o/utf8
		if [[ $? -eq 0 ]]; then
			echo " OK."
			cleanup_files="$cleanup_files $ydb_dist/plugin/o/utf8/_ydbposix.so"
		else
			error_exit "$LINENO: Failed to install ydbposix.so for UTF-8 mode"
		fi
	fi
fi
if [[ "" != $req_posix_files ]]; then
	echo "INFO: YDBPosix components missing from $ydb_dist. Installed requisite files:"
	for file in $req_posix_files; do
		echo "	$file"
	done
else
	echo "INFO: All YDBPosix plugin components found."
fi

# Install ydbocto.ci, octo.conf, and octo-seed.* files
echo "INFO: Installing Octo support files..."
echo -n "----> Checking for $ydb_dist/plugin/octo/ydbocto.ci... "
install -D plugin/octo/ydbocto.ci $ydb_dist/plugin/octo/
if [[ $? -eq 0 ]]; then
	echo "OK."
	cleanup_files="$cleanup_files $ydb_dist/plugin/octo/ydbocto.ci"
else
	error_exit "$LINENO: Failed to install ydbocto.ci"
fi
echo -n "----> Checking for $ydb_dist/plugin/octo/ydbocto.xc... "
install -D plugin/octo/ydbocto.xc $ydb_dist/plugin/octo/
if [[ $? -eq 0 ]]; then
	echo "OK."
	cleanup_files="$cleanup_files $ydb_dist/plugin/octo/ydbocto.xc"
else
	error_exit "$LINENO: Failed to install ydbocto.xc"
fi
echo -n "----> Checking for $ydb_dist/plugin/octo/octo-seed.\{sql,zwr\}... "
install -D plugin/octo/octo-seed.* $ydb_dist/plugin/octo/
if [[ $? -eq 0 ]]; then
	echo "OK."
	cleanup_files="$cleanup_files $ydb_dist/plugin/octo/octo-seed.sql $ydb_dist/plugin/octo/octo-seed.zwr"
else
	error_exit "$LINENO: Failed to install octo-seed.sql and octo-seed.zwr"
fi
# Don't overwrite octo.conf if it already exists
if [[ ! -f "$ydb_dist/plugin/octo/octo.conf" ]]; then
	echo "INFO: No octo.conf configuration file found at $ydb_dist/plugin/octo. Installing default."
	install -D -m 644 plugin/octo/octo.conf $ydb_dist/plugin/octo
	if [[ $? -eq 0 ]]; then
		cleanup_files="$cleanup_files $ydb_dist/plugin/octo/octo.conf"
	else
		error_exit "$LINENO: Failed to install octo.conf"
	fi
fi
echo "INFO: Octo support files installed."
# Install binaries and create softlinks to them
echo "INFO: Installing Octo binaries..."
echo -n "----> Creating Octo binary directory... "
install -d $ydb_dist/plugin/octo/bin
if [[ $? -eq 0 ]]; then
	echo "OK."
	cleanup_files="$cleanup_files $ydb_dist/plugin/octo/bin"
else
	error_exit "$LINENO: Failed to create Octo binary directory."
fi
echo -n "----> Checking for $ydb_dist/plugin/octo/bin/\{octo,rocto\}... "
install -D plugin/octo/bin/*octo $ydb_dist/plugin/octo/bin
if [[ $? -eq 0 ]]; then
	echo "OK."
	cleanup_files="$cleanup_files $ydb_dist/plugin/octo/bin/octo $ydb_dist/plugin/octo/bin/rocto"
else
	error_exit "$LINENO: Failed to install octo and rocto binaries."
fi
install -d $ydb_dist/plugin/bin/
echo -n "----> Creating symbolic links to Octo binaries in $ydb_dist/plugin/bin... "
rm $ydb_dist/plugin/bin/*octo	# Cleanup existing links to prevent existing file error
ln -s $ydb_dist/plugin/octo/bin/*octo $ydb_dist/plugin/bin/
if [[ $? -eq 0 ]]; then
	echo "OK."
	cleanup_files="$cleanup_files $ydb_dist/plugin/bin/octo $ydb_dist/plugin/bin/rocto"
else
	error_exit "$LINENO: Failed to create symbolic links to octo and rocto binaries."
fi
echo "INFO: Octo binaries installed."

# Install Octo M routines and object files
echo "INFO: Installing Octo libraries and routines..."
install -d $ydb_dist/plugin/r
echo -n "----> Installing Octo M routines... "
install -D -m 644 plugin/r/*.m $ydb_dist/plugin/r
if [[ $? -eq 0 ]]; then
	echo "OK."
	cleanup_files="$cleanup_files $ydb_dist/plugin/r/_ydbocto*.m"
else
	error_exit "$LINENO: Failed to install Octo M routines."
fi
echo -n "----> Installing Octo M mode shared libraries... "
install -D -m 644 plugin/o/_ydbocto.so $ydb_dist/plugin/o
if [[ $? -eq 0 ]]; then
	echo "OK."
	cleanup_files="$cleanup_files $ydb_dist/plugin/o/_ydbocto.so"
else
	error_exit "$LINENO: Failed to install Octo M mode shared libraries."
fi
if [[ -f plugin/o/utf8/_ydbocto.so ]]; then
	echo -n "----> Installing Octo UTF-8 mode shared libraries..."
	install -D -m 644 plugin/o/utf8/_ydbocto.so $ydb_dist/plugin/o/utf8
	if [[ $? -eq 0 ]]; then
		echo " OK."
		cleanup_files="$cleanup_files $ydb_dist/plugin/o/_ydbocto.so"
	else
		error_exit "$LINENO: Failed to install Octo UTF-8 mode shared libraries."
	fi
else
	echo "WARNING: Octo UTF-8 libraries not found. Octo libraries installed without UTF-8 support."
	utf8_supported="no"
fi
echo -n "----> Installing Octo C shared libraries... "
install -D -m 644 plugin/libcocto.so $ydb_dist/plugin
if [[ $? -eq 0 ]]; then
	echo "OK."
	cleanup_files="$cleanup_files $ydb_dist/plugin/libcocto.so"
else
	error_exit "$LINENO: Failed to install Octo C shared libraries."
fi
echo -n "----> Installing Octo debug files... "
install -D -m 644 plugin/octo/*.dbg $ydb_dist/plugin/octo
if [[ $? -eq 0 ]]; then
	echo "OK."
	cleanup_files="$cleanup_files $ydb_dist/plugin/octo/*.dbg"
else
	# This block should only be reached during pipeline testing.
	echo "WARNING: $LINENO: Failed to install Octo debug files. Please contact Octo support if you received this message unexpectedly."
fi
echo "INFO: Octo libraries and routines installed."
echo "YottaDB Octo installation complete."
